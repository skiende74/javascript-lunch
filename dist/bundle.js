(()=>{"use strict";var t={509:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".eRlIIF278cpmiHq2vS6P {\r\n  width: 100%;\r\n  height: 44px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n}\r\n\r\n.eRlIIF278cpmiHq2vS6P:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.LyznXMKWC8RkefhT72Bf {\r\n  border: 1px solid var(--grey-300);\r\n  background: transparent;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\n.KF_WGp1jezQkqJFk7DjU {\r\n  background: var(--primary-color);\r\n\r\n  color: var(--grey-100);\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/BasicButton.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;;EAEZ,kBAAkB;;EAElB,YAAY;EACZ,kBAAkB;;EAElB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,uBAAuB;;EAEvB,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;;EAEhC,sBAAsB;AACxB",sourcesContent:[".button {\r\n  width: 100%;\r\n  height: 44px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n}\r\n\r\n.button:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.buttonSecondary {\r\n  border: 1px solid var(--grey-300);\r\n  background: transparent;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\n.buttonPrimary {\r\n  background: var(--primary-color);\r\n\r\n  color: var(--grey-100);\r\n}\r\n"],sourceRoot:""}]),a.locals={button:"eRlIIF278cpmiHq2vS6P",buttonSecondary:"LyznXMKWC8RkefhT72Bf",buttonPrimary:"KF_WGp1jezQkqJFk7DjU"};const o=a},516:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,"/* 음식점 추가 모달 *****************************************/\r\n\r\n.modal--open {\r\n  display: block;\r\n  height: 100%;\r\n  background: white;\r\n}\r\n\r\n.modal-backdrop {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  background: rgba(0, 0, 0, 0.35);\r\n}\r\n.modal--open .modal-backdrop {\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n\r\n.modal-container {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 80%;\r\n\r\n  padding: 32px 16px;\r\n\r\n  border-radius: 8px 8px 0px 0px;\r\n  background: var(--grey-100);\r\n}\r\n.modal--open .modal-container {\r\n  visibility: visible;\r\n  opacity: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.modal-title {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-item label {\r\n  color: var(--grey-400);\r\n  font-size: 14px;\r\n}\r\n\r\n.form-item--required label::after {\r\n  padding-left: 4px;\r\n\r\n  color: var(--primary-color);\r\n  content: '*';\r\n}\r\n\r\n.form-item .help-text {\r\n  color: var(--grey-300);\r\n}\r\n\r\n.form-item input,\r\n.form-item textarea,\r\n.form-item select {\r\n  padding: 8px;\r\n  margin: 6px 0;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  font-size: 16px;\r\n}\r\n\r\n.form-item textarea {\r\n  height: 60px;\r\n}\r\n\r\n.form-item select {\r\n  height: 44px;\r\n\r\n  padding: 8px;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\ninput[name='name'],\r\ninput[name='link'] {\r\n  height: 44px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/BasicModal.css"],names:[],mappings:"AAAA,sDAAsD;;AAEtD;EACE,cAAc;EACd,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,qCAAqC;;EAErC,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,+BAA+B;AACjC;AACA;EACE,mBAAmB;EACnB,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,qCAAqC;;EAErC,eAAe;EACf,SAAS;EACT,OAAO;EACP,WAAW;EACX,WAAW;;EAEX,kBAAkB;;EAElB,8BAA8B;EAC9B,2BAA2B;AAC7B;AACA;EACE,mBAAmB;EACnB,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;;EAEtB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,iBAAiB;;EAEjB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;;EAEZ,YAAY;;EAEZ,iCAAiC;EACjC,kBAAkB;;EAElB,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;AACd",sourcesContent:["/* 음식점 추가 모달 *****************************************/\r\n\r\n.modal--open {\r\n  display: block;\r\n  height: 100%;\r\n  background: white;\r\n}\r\n\r\n.modal-backdrop {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  background: rgba(0, 0, 0, 0.35);\r\n}\r\n.modal--open .modal-backdrop {\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n\r\n.modal-container {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 80%;\r\n\r\n  padding: 32px 16px;\r\n\r\n  border-radius: 8px 8px 0px 0px;\r\n  background: var(--grey-100);\r\n}\r\n.modal--open .modal-container {\r\n  visibility: visible;\r\n  opacity: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.modal-title {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-item label {\r\n  color: var(--grey-400);\r\n  font-size: 14px;\r\n}\r\n\r\n.form-item--required label::after {\r\n  padding-left: 4px;\r\n\r\n  color: var(--primary-color);\r\n  content: '*';\r\n}\r\n\r\n.form-item .help-text {\r\n  color: var(--grey-300);\r\n}\r\n\r\n.form-item input,\r\n.form-item textarea,\r\n.form-item select {\r\n  padding: 8px;\r\n  margin: 6px 0;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  font-size: 16px;\r\n}\r\n\r\n.form-item textarea {\r\n  height: 60px;\r\n}\r\n\r\n.form-item select {\r\n  height: 44px;\r\n\r\n  padding: 8px;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\ninput[name='name'],\r\ninput[name='link'] {\r\n  height: 44px;\r\n}\r\n"],sourceRoot:""}]);const o=a},534:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".wm1LFStXH1_XNSsT8MjB {\r\n  width: 36px;\r\n  height: 36px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/CategoryIcon.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;AACd",sourcesContent:[".categoryIcon {\r\n  width: 36px;\r\n  height: 36px;\r\n}\r\n"],sourceRoot:""}]),a.locals={categoryIcon:"wm1LFStXH1_XNSsT8MjB"};const o=a},50:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".restaurant-filter-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  padding: 0 16px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.restaurant-filter {\r\n  padding: 8px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/FilterContainer.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd",sourcesContent:[".restaurant-filter-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  padding: 0 16px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.restaurant-filter {\r\n  padding: 8px;\r\n}\r\n"],sourceRoot:""}]);const o=a},281:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".BhrZqUDmppkD0hLx5kCg {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 64px;\r\n  height: 64px;\r\n  min-width: 64px;\r\n  min-height: 64px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border-radius: 50%;\r\n  background: var(--lighten-color);\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/RestaurantCategoryIcon.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;;EAEhB,kBAAkB;;EAElB,kBAAkB;EAClB,gCAAgC;AAClC",sourcesContent:[".restaurant__category {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 64px;\r\n  height: 64px;\r\n  min-width: 64px;\r\n  min-height: 64px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border-radius: 50%;\r\n  background: var(--lighten-color);\r\n}\r\n"],sourceRoot:""}]),a.locals={restaurant__category:"BhrZqUDmppkD0hLx5kCg"};const o=a},894:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,"select {\r\n  height: 44px;\r\n  min-width: 125px;\r\n\r\n  border: 1px solid #d0d5dd;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 16px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/SelectBox.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB",sourcesContent:["select {\r\n  height: 44px;\r\n  min-width: 125px;\r\n\r\n  border: 1px solid #d0d5dd;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 16px;\r\n}\r\n"],sourceRoot:""}]);const o=a},499:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".gnb {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 64px;\r\n\r\n  padding: 0 16px;\r\n\r\n  background-color: var(--primary-color);\r\n}\r\n\r\n.gnb__title {\r\n  color: #fcfcfd;\r\n}\r\n\r\n.gnb__button {\r\n  height: 40px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n}\r\n\r\n.gnb__button img {\r\n  display: block;\r\n  width: 40px;\r\n  height: 40px;\r\n  object-fit: contain;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Header/Header.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;;EAEZ,eAAe;;EAEf,sCAAsC;AACxC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;;EAEZ,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB",sourcesContent:[".gnb {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 64px;\r\n\r\n  padding: 0 16px;\r\n\r\n  background-color: var(--primary-color);\r\n}\r\n\r\n.gnb__title {\r\n  color: #fcfcfd;\r\n}\r\n\r\n.gnb__button {\r\n  height: 40px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n}\r\n\r\n.gnb__button img {\r\n  display: block;\r\n  width: 40px;\r\n  height: 40px;\r\n  object-fit: contain;\r\n}\r\n"],sourceRoot:""}]);const o=a},342:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".modal.basic-modal .detail-modal__container {\r\n  min-height: 556px;\r\n  height: 70vh !important;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/MainApp.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,uBAAuB;AACzB",sourcesContent:[".modal.basic-modal .detail-modal__container {\r\n  min-height: 556px;\r\n  height: 70vh !important;\r\n}\r\n"],sourceRoot:""}]);const o=a},873:(t,e,r)=>{r.d(e,{A:()=>l});var n=r(354),i=r.n(n),s=r(314),a=r.n(s),o=r(516),c=a()(i());c.i(o.A),c.push([t.id,".button-container {\r\n  display: flex;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/NewRestaurantModal/NewRestaurantModal.css"],names:[],mappings:"AACA;EACE,aAAa;AACf",sourcesContent:["@import url('../Basic/BasicModal.css');\r\n.button-container {\r\n  display: flex;\r\n}\r\n"],sourceRoot:""}]);const l=c},306:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".fXHLVliEE8LsA0GyysEm {\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n\r\n.HdCmGycu3hxDqHlCUuq2 {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.ZP7_AmooWl3lQtDx54R7 {\r\n  margin: 0;\r\n}\r\n\r\n.t_oHWbpeO2DwxqqegCNn {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.qRYbpYhBv29HPLbxjauv {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantItem.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;;EAEhC,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;AAC7B;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,4BAA4B;AAC9B",sourcesContent:[".restaurant {\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n\r\n.restaurant__info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.restaurant__name {\r\n  margin: 0;\r\n}\r\n\r\n.restaurant__distance {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.restaurant__description {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n"],sourceRoot:""}]),a.locals={restaurant:"fXHLVliEE8LsA0GyysEm",restaurant__info:"HdCmGycu3hxDqHlCUuq2",restaurant__name:"ZP7_AmooWl3lQtDx54R7",restaurant__distance:"t_oHWbpeO2DwxqqegCNn",restaurant__description:"qRYbpYhBv29HPLbxjauv"};const o=a},403:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".L1gzP4L6WvCIE4h20MGf {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n.fJow_ldVeDz3g4Pd7PrQ {\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 12px;\r\n}\r\n\r\n.ohxFQilFwHMemPm4YFZz {\r\n  margin: 0;\r\n}\r\n\r\n.L1gzP4L6WvCIE4h20MGf .ngCiHdrtCL6zjAF5YcVk {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.HzyStBOl2CS56iUuslpg {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 10;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.Mo9Gn2SFG4Yjv22NhJYM {\r\n  display: flex;\r\n  width: 100%;\r\n}\r\n.a71_W5lO7oWZOQ2yyWIN {\r\n  text-decoration: underline;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantItemDetail.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;;EAEhC,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,aAAa;AACf;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,WAAW;AACb;AACA;EACE,0BAA0B;AAC5B",sourcesContent:[".restaurant {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n.restaurantContent {\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 12px;\r\n}\r\n\r\n.restaurant__name {\r\n  margin: 0;\r\n}\r\n\r\n.restaurant .restaurant__distance {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.restaurant__description {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 10;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.restaurant__buttonContainer {\r\n  display: flex;\r\n  width: 100%;\r\n}\r\n.restaurant__link {\r\n  text-decoration: underline;\r\n}\r\n"],sourceRoot:""}]),a.locals={restaurant:"L1gzP4L6WvCIE4h20MGf",restaurantContent:"fJow_ldVeDz3g4Pd7PrQ",restaurant__name:"ohxFQilFwHMemPm4YFZz",restaurant__distance:"ngCiHdrtCL6zjAF5YcVk",restaurant__description:"HzyStBOl2CS56iUuslpg",restaurant__buttonContainer:"Mo9Gn2SFG4Yjv22NhJYM",restaurant__link:"a71_W5lO7oWZOQ2yyWIN"};const o=a},139:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".restaurant-list-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  padding: 0 16px;\r\n  margin: 16px 0;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantList.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,eAAe;EACf,cAAc;AAChB",sourcesContent:[".restaurant-list-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  padding: 0 16px;\r\n  margin: 16px 0;\r\n}\r\n"],sourceRoot:""}]);const o=a},143:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,".custom-tab {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n}\r\n\r\n.custom-tab > * {\r\n  padding: 9px 0;\r\n\r\n  flex: 1;\r\n\r\n  font-family: Roboto;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 24px;\r\n  letter-spacing: 0.5px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.custom-tab > *[checked='on'] {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--primary-color);\r\n  color: var(--primary-color);\r\n}\r\n.custom-tab > * {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--grey-300);\r\n  color: var(--grey-300);\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Tab.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,cAAc;;EAEd,OAAO;;EAEP,mBAAmB;EACnB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,qBAAqB;;EAErB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,wBAAwB;EACxB,kCAAkC;EAClC,2BAA2B;AAC7B;AACA;EACE,wBAAwB;EACxB,6BAA6B;EAC7B,sBAAsB;AACxB",sourcesContent:[".custom-tab {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n}\r\n\r\n.custom-tab > * {\r\n  padding: 9px 0;\r\n\r\n  flex: 1;\r\n\r\n  font-family: Roboto;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 24px;\r\n  letter-spacing: 0.5px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.custom-tab > *[checked='on'] {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--primary-color);\r\n  color: var(--primary-color);\r\n}\r\n.custom-tab > * {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--grey-300);\r\n  color: var(--grey-300);\r\n}\r\n"],sourceRoot:""}]);const o=a},966:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,"* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nul,\r\nli {\r\n  list-style: hidden;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  font-family: sans-serif;\r\n  font-size: 16px;\r\n}\r\n\r\n:root {\r\n  --primary-color: #ec4a0a;\r\n  --lighten-color: #f6a88a;\r\n  --grey-100: #ffffff;\r\n  --grey-200: #d0d5dd;\r\n  --grey-300: #667085;\r\n  --grey-400: #344054;\r\n  --grey-500: #000000;\r\n}\r\n\r\n.text-title {\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-subtitle {\r\n  font-size: 18px;\r\n  line-height: 28px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-body {\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n}\r\n\r\n.text-caption {\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  font-weight: 400;\r\n}\r\n\r\n.error {\r\n  color: rgb(213, 93, 23);\r\n  height: 20px;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/global.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,kBAAkB;AACpB;;AAEA;;EAEE,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB",sourcesContent:["* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nul,\r\nli {\r\n  list-style: hidden;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  font-family: sans-serif;\r\n  font-size: 16px;\r\n}\r\n\r\n:root {\r\n  --primary-color: #ec4a0a;\r\n  --lighten-color: #f6a88a;\r\n  --grey-100: #ffffff;\r\n  --grey-200: #d0d5dd;\r\n  --grey-300: #667085;\r\n  --grey-400: #344054;\r\n  --grey-500: #000000;\r\n}\r\n\r\n.text-title {\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-subtitle {\r\n  font-size: 18px;\r\n  line-height: 28px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-body {\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n}\r\n\r\n.text-caption {\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  font-weight: 400;\r\n}\r\n\r\n.error {\r\n  color: rgb(213, 93, 23);\r\n  height: 20px;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const o=a},211:(t,e,r)=>{r.d(e,{A:()=>d});var n=r(354),i=r.n(n),s=r(314),a=r.n(s),o=r(966),c=r(790),l=a()(i());l.i(o.A),l.i(c.A),l.push([t.id,"\r\n","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const d=l},790:(t,e,r)=>{r.d(e,{A:()=>o});var n=r(354),i=r.n(n),s=r(314),a=r.n(s)()(i());a.push([t.id,"* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\ninput {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n}\r\n\r\ntextarea {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n  resize: none;\r\n}\r\n\r\n:root {\r\n  cursor: default;\r\n}\r\n\r\nimg,\r\npicture,\r\nvideo,\r\nsvg {\r\n  display: block;\r\n  max-width: 100%;\r\n}\r\n\r\nbutton {\r\n  background: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\nol,\r\nul {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;EAIE,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;;EAEE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ",sourcesContent:["* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\ninput {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n}\r\n\r\ntextarea {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n  resize: none;\r\n}\r\n\r\n:root {\r\n  cursor: default;\r\n}\r\n\r\nimg,\r\npicture,\r\nvideo,\r\nsvg {\r\n  display: block;\r\n  max-width: 100%;\r\n}\r\n\r\nbutton {\r\n  background: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\nol,\r\nul {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n"],sourceRoot:""}]);const o=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var o=0;o<this.length;o++){var c=this[o][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);n&&a[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},354:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var s={},a=[],o=0;o<t.length;o++){var c=t[o],l=n.base?c[0]+n.base:c[0],d=s[l]||0,A="".concat(l," ").concat(d);s[l]=d+1;var p=r(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=i(h,n);n.byIndex=o,e.splice(o,0,{identifier:A,updater:u,references:1})}a.push(A)}return a}function i(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,i){var s=n(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var o=r(s[a]);e[o].references--}for(var c=n(t,i),l=0;l<s.length;l++){var d=r(s[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}s=c}}},659:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var s=e[n]={id:n,exports:{}};return t[n](s,s.exports,r),s.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var i=n.length-1;i>-1&&(!t||!/^http(s?):/.test(t));)t=n[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),r.nc=void 0,(()=>{const t=r.p+"add-button.png";var e=r(72),n=r.n(e),i=r(825),s=r.n(i),a=r(659),o=r.n(a),c=r(56),l=r.n(c),d=r(540),A=r.n(d),p=r(113),h=r.n(p),u=r(499),m={};m.styleTagTransform=h(),m.setAttributes=l(),m.insert=o().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=A(),n()(u.A,m),u.A&&u.A.locals&&u.A.locals;class f extends HTMLDivElement{constructor(){super(),this.role="banner"}connectedCallback(){this.render()}render(){var e;this.classList.add("gnb"),this.innerHTML=`\n      <h1 class="gnb__title text-title">점심 뭐 먹지</h1>\n      <button type="button" class="gnb__button" aria-label="음식점 추가">\n        <img src=${t} alt="음식점 추가" />\n      </button>`,null===(e=this.querySelector("button"))||void 0===e||e.addEventListener("click",(()=>{var t;null===(t=document.querySelector(".modal"))||void 0===t||t.classList.add("modal--open")}))}}customElements.define("header-bar",f,{extends:"div"});const E=Object.freeze({DISTANCES:[5,10,15,20,30],SORT_CRITERION:{이름순:"name",거리순:"distance"}}),v={한식:"korean",중식:"chinese",일식:"japanese",아시안:"asian",양식:"western",기타:"etc"},g=Object.assign({전체:"all"},v),b=Object.keys(g),w=Object.keys(v),y=Object.keys(E.SORT_CRITERION);class C extends HTMLElement{connectedCallback(){this.render(),this.setEvent()}render(){}setEvent(){}on(t,e,r){var n;null===(n=document.querySelector(t))||void 0===n||n.addEventListener(e,r)}}const x=C;var B=r(894),k={};k.styleTagTransform=h(),k.setAttributes=l(),k.insert=o().bind(null,"head"),k.domAPI=s(),k.insertStyleElement=A(),n()(B.A,k),B.A&&B.A.locals&&B.A.locals;var T,S,_,L,M=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},j=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class q extends HTMLSelectElement{constructor(t=[],e=[],r=""){super(),T.add(this),this.values=[],S.set(this,[]),_.set(this,""),this.values=t,M(this,S,e,"f"),M(this,_,r,"f"),this.render()}set(t,e,r){this.values=t,M(this,S,e,"f"),M(this,_,r,"f"),this.render()}get(){return{values:this.values,texts:j(this,S,"f"),names:j(this,_,"f")}}render(){this.className="restaurant-filter",this.name=j(this,_,"f"),this.id=`${j(this,_,"f")}-filter`,j(this,T,"m",L).call(this)}}S=new WeakMap,_=new WeakMap,T=new WeakSet,L=function(){for(let t=0;t<this.values.length;t++){const e=new Option(j(this,S,"f")[t],this.values[t]);this.add(e)}};const W=q;customElements.define("select-box",q,{extends:"select"});var P=r(50),R={};R.styleTagTransform=h(),R.setAttributes=l(),R.insert=o().bind(null,"head"),R.domAPI=s(),R.insertStyleElement=A(),n()(P.A,R),P.A&&P.A.locals&&P.A.locals;var I,Y,H,N=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},z=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};I=new WeakMap,Y=new WeakMap,H=new WeakMap,customElements.define("filter-container",class extends x{constructor(){super(),I.set(this,void 0),Y.set(this,void 0),H.set(this,void 0),N(this,I,new W(b,b,"category"),"f"),N(this,Y,new W(y,y,"sorting"),"f"),N(this,H,document.querySelector(".restaurant-list"),"f")}render(){this.append(z(this,I,"f")),this.append(z(this,Y,"f"))}get(){return{category:z(this,I,"f").value,sortCriteria:z(this,Y,"f").value}}setEvent(){this.addEventListener("change",(()=>{this.parentElement.paint()}))}});var F=r(516),O={};O.styleTagTransform=h(),O.setAttributes=l(),O.insert=o().bind(null,"head"),O.domAPI=s(),O.insertStyleElement=A(),n()(F.A,O),F.A&&F.A.locals&&F.A.locals;var D,$,U,Z,X,V=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)},G=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r};class J extends HTMLDivElement{constructor(){super(),D.add(this),$.set(this,void 0),U.set(this,void 0),this.classList.add("modal");const t=Array.from(this.querySelectorAll(".modal > *"));G(this,$,V(this,D,"m",Z).call(this),"f"),this.append(V(this,$,"f")),G(this,U,V(this,D,"m",X).call(this),"f"),this.append(V(this,U,"f")),this.appendAll(t),V(this,$,"f").addEventListener("click",(()=>{var t;null===(t=document.querySelector(".modal"))||void 0===t||t.classList.remove("modal--open")}))}appendAll(t){t.forEach((t=>V(this,U,"f").append(t)))}removeAll(){V(this,U,"f").replaceChildren()}replaceChildNodes(t){this.removeAll(),this.appendAll(t)}closeModal(){this.classList.remove("modal--open")}openModal(){this.classList.add("modal--open")}}$=new WeakMap,U=new WeakMap,D=new WeakSet,Z=function(){const t=document.createElement("div");return t.classList.add("modal-backdrop"),t.addEventListener("click",this.closeModal.bind(this)),t},X=function(){const t=document.createElement("div");return this.getAttribute("class-container")&&(t.className=this.getAttribute("class-container")),t.classList.add("modal-container"),t};const Q=J;customElements.define("basic-modal",J,{extends:"div"});var K=r(509),tt={};tt.styleTagTransform=h(),tt.setAttributes=l(),tt.insert=o().bind(null,"head"),tt.domAPI=s(),tt.insertStyleElement=A(),n()(K.A,tt);const et=K.A&&K.A.locals?K.A.locals:void 0;var rt;class nt extends HTMLButtonElement{constructor(t,e,r,n){super(),rt.set(this,void 0),t=null!=t?t:this.getAttribute("style-variant"),e=null!=e?e:this.innerText,r=null!=r?r:this.getAttribute("type"),function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===n?i.call(t,r):i?i.value=r:e.set(t,r)}(this,rt,t,"f"),this.innerText=e,this.setAttribute("type",r);const i="primary"===function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,rt,"f")?["button--primary",`${et.buttonPrimary}`]:["button--secondary",`${et.buttonSecondary}`];this.classList.add("button",`${et.button}`,"text-caption"),this.classList.add(...i),this.addEventListener("click",(()=>{n()}))}render(){}}rt=new WeakMap,customElements.define("basic-button",nt,{extends:"button"});const it=nt,st=r.p+"favorite-icon-filled.png",at=r.p+"favorite-icon-lined.png";var ot,ct;class lt extends HTMLImageElement{constructor(){super(),ot.add(this),this.classList.add("clickable"),this.src=at,this.alt="즐겨찾기 아이콘",this.setAttribute("clicked","off"),function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,ot,"m",ct).call(this)}attributeChangedCallback(t,e,r){"clicked"===t&&("on"===r?this.src=st:"off"===r&&(this.src=at))}isFavorite(){return"on"===this.getAttribute("clicked")}set(t){this.setAttribute("clicked",t?"on":"off")}on(){this.setAttribute("clicked","on")}off(){this.setAttribute("clicked","off")}isOn(){return"on"===this.getAttribute("clicked")}}ot=new WeakSet,ct=function(){this.addEventListener("click",(()=>{"off"===this.getAttribute("clicked")?this.setAttribute("clicked","on"):this.setAttribute("clicked","off")}))},lt.observedAttributes=["clicked"],customElements.define("favorite-icon",lt,{extends:"img"});const dt=lt;var At,pt,ht,ut,mt=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},ft=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class Et extends HTMLDivElement{constructor(t){super(),this.name="",this.idName="",this.hasVerification=!1,this.isRequired=!1,this.helpText="",At.set(this,void 0),pt.set(this,void 0),ht.set(this,void 0),ut.set(this,void 0),this.classList.add("input-box"),this.innerHTML='\n    <label class="text-caption"></label>\n    <input type="text" name=""  id="" />\n    <span class="help-text text-caption"></span>\n    <div class="error invisible"></span>',mt(this,At,this.querySelector(":scope > label"),"f"),mt(this,pt,this.querySelector(":scope > input"),"f"),mt(this,ht,this.querySelector(":scope > span"),"f"),mt(this,ut,this.querySelector(":scope > .error"),"f"),t?this.setState(t):this.print(),this.print()}setState(t){const{name:e,idName:r,classList:n,hasVerification:i,isRequired:s,helpText:a}=t;this.name=null!=e?e:"",this.idName=null!=r?r:"",this.classList.add(...null!=n?n:[]),this.hasVerification=null!=i&&i,this.isRequired=null!=s&&s,this.helpText=null!=a?a:"",this.classList.add("form-item"),this.isRequired&&this.classList.add("form-item--required"),this.print()}print(){ft(this,At,"f").htmlFor=`${this.idName} text-caption`,ft(this,At,"f").innerText=this.name,ft(this,pt,"f").name=this.idName,ft(this,pt,"f").id=this.idName,this.helpText&&(ft(this,ht,"f").innerText=this.helpText),this.hasVerification&&(ft(this,ut,"f").innerText=`${this.name} 값은 필수 입력입니다.`)}occurError(){}}At=new WeakMap,pt=new WeakMap,ht=new WeakMap,ut=new WeakMap,customElements.define("vertical-input-box",Et,{extends:"div"});const vt=r.p+"category-korean.png",gt=r.p+"category-asian.png",bt=r.p+"category-japanese.png",wt=r.p+"category-chinese.png",yt=r.p+"category-western.png",Ct=r.p+"category-etc.png";var xt=r(534),Bt={};Bt.styleTagTransform=h(),Bt.setAttributes=l(),Bt.insert=o().bind(null,"head"),Bt.domAPI=s(),Bt.insertStyleElement=A(),n()(xt.A,Bt);const kt=xt.A&&xt.A.locals?xt.A.locals:void 0,Tt={한식:vt,아시안:gt,일식:bt,중식:wt,양식:yt,기타:Ct};class St extends HTMLImageElement{constructor(t){super(),t||(t=this.getAttribute("category")),this.className=`category-icon ${kt.categoryIcon}`,this.src=Tt[t],this.alt=t}}customElements.define("category-icon",St,{extends:"img"});const _t=St;var Lt=r(281),Mt={};Mt.styleTagTransform=h(),Mt.setAttributes=l(),Mt.insert=o().bind(null,"head"),Mt.domAPI=s(),Mt.insertStyleElement=A(),n()(Lt.A,Mt);const jt=Lt.A&&Lt.A.locals?Lt.A.locals:void 0;class qt extends HTMLDivElement{constructor(){super(),this.className=`restaurant__category ${jt.restaurant__category}`}setCategory(t){this.replaceChildren(new _t(t))}}customElements.define("restaurant-category-icon",qt,{extends:"div"});var Wt,Pt,Rt,It=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};Wt=new WeakSet,Pt=function(){if(!this.name.length||this.name.length>20)throw new Error("[ERROR] 이름의 길이는 1~20자 여야 합니다.")},Rt=function(){if(this.description&&this.description.length>500)throw new Error("[ERROR] 음식점 설명 길이는 500자를 초과할 수 없습니다.")};const Yt=class{constructor(t){Wt.add(this),this.name=t.name,this.distance=t.distance,this.category=t.category,this.description=t.description,this.link=t.link,this.isFavorite=t.isFavorite,It(this,Wt,"m",Pt).call(this),It(this,Wt,"m",Rt).call(this)}get(){const t={name:this.name,distance:this.distance,category:this.category};return this.description&&(t.description=this.description),this.link&&(t.link=this.link),void 0!==this.isFavorite&&(t.isFavorite=this.isFavorite),t}isEqual(t){return this.name===t.name&&this.distance===t.distance&&this.category===t.category}},Ht=class{constructor(t){this.restaurantList=t.map((t=>new Yt(t)))}get(){return this.restaurantList.map((t=>t.get()))}filterByCategory(t){return"전체"===t?this.restaurantList.map((t=>t.get())):this.restaurantList.map((t=>t.get())).filter((e=>e.category===t))}sort(t){return"이름순"===t?this.sortByName():this.sortByDistance()}sortByName(){return this.restaurantList.map((t=>t.get())).toSorted(((t,e)=>t.name.localeCompare(e.name)))}sortByDistance(){return this.restaurantList.map((t=>t.get())).toSorted(((t,e)=>t.distance-e.distance))}addRestaurant(t){if(this.has(t))throw new Error("[ERROR] 이미 존재하는 음식점입니다.");this.restaurantList.push(new Yt(t))}has(t){return this.restaurantList.some((e=>e.isEqual(t)))}remove(t){return this.restaurantList.filter((e=>!e.isEqual(t)))}};var Nt,zt,Ft=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};Nt=new WeakMap,zt=new WeakMap;const Ot=class{constructor(){Nt.set(this,"restaurants"),zt.set(this,new Ht([])),Ft(this,zt,"f"),this.update()}getFromRestaurantList(t,e){this.update();const r=Ft(this,zt,"f").filterByCategory(t);return new Ht(r).sort(e)}update(){const t=this.get();!function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===n?i.call(t,r):i?i.value=r:e.set(t,r)}(this,zt,new Ht(t),"f")}get(){var t;return JSON.parse(null!==(t=localStorage.getItem(Ft(this,Nt,"f")))&&void 0!==t?t:"[]")}set(t){localStorage.setItem(Ft(this,Nt,"f"),JSON.stringify(t))}add(t){this.update(),Ft(this,zt,"f").addRestaurant(t),localStorage.setItem(Ft(this,Nt,"f"),JSON.stringify(Ft(this,zt,"f").get()))}remove(t){this.update(),localStorage.setItem(Ft(this,Nt,"f"),JSON.stringify(Ft(this,zt,"f").remove(t)))}};var Dt=r(306),$t={};$t.styleTagTransform=h(),$t.setAttributes=l(),$t.insert=o().bind(null,"head"),$t.domAPI=s(),$t.insertStyleElement=A(),n()(Dt.A,$t);const Ut=Dt.A&&Dt.A.locals?Dt.A.locals:void 0;var Zt,Xt,Vt,Gt,Jt,Qt,Kt,te,ee,re=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},ne=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class ie extends HTMLLIElement{constructor({category:t,name:e,distance:r,description:n,link:i,isFavorite:s}){super(),Zt.add(this),Xt.set(this,void 0),Vt.set(this,void 0),Gt.set(this,void 0),Jt.set(this,void 0),Qt.set(this,void 0),Kt.set(this,void 0),te.set(this,void 0),re(this,Xt,t,"f"),re(this,Jt,e,"f"),re(this,Vt,r,"f"),re(this,Gt,null!=n?n:"","f"),re(this,Qt,null!=i?i:"","f"),re(this,Kt,null!=s&&s,"f"),this.template(),this.paint()}template(){this.classList.add("restaurant",`${Ut.restaurant}`),this.innerHTML=`\n    <div is="restaurant-category-icon"> </div>\n    <div class="restaurant__info ${Ut.restaurant__info}">\n    <h3 class="restaurant__name text-subtitle ${Ut.restaurant__name}"></h3>\n    <span class="restaurant__distance text-body  ${Ut.restaurant__distance}"></span>\n    <p class="restaurant__description text-body ${Ut.restaurant__description}">\n    </p>\n    <img is="favorite-icon" class="favorite-icon" style="width:26px; position:absolute; right:10px; top:10px;"/>\n    </div>\n   `}paint(){var t;this.querySelector('div[is="restaurant-category-icon"]').setCategory(ne(this,Xt,"f")),this.querySelector(".restaurant__name").textContent=`${ne(this,Jt,"f")}`,this.querySelector(".restaurant__distance").textContent=`캠퍼스부터 ${ne(this,Vt,"f")}분 내`,this.querySelector(".restaurant__description").textContent=`${null!==(t=ne(this,Gt,"f"))&&void 0!==t?t:""}`,re(this,te,this.querySelector('img[is="favorite-icon"]'),"f"),ne(this,te,"f").set(ne(this,Kt,"f")),this.addEventListener("click",ne(this,Zt,"m",ee).bind(this))}get(){var t;return{category:ne(this,Xt,"f"),name:ne(this,Jt,"f"),distance:ne(this,Vt,"f"),description:ne(this,Gt,"f"),link:ne(this,Qt,"f"),isFavorite:null===(t=ne(this,te,"f"))||void 0===t?void 0:t.isFavorite()}}}Xt=new WeakMap,Vt=new WeakMap,Gt=new WeakMap,Jt=new WeakMap,Qt=new WeakMap,Kt=new WeakMap,te=new WeakMap,Zt=new WeakSet,ee=function(t){t.target.classList.contains("favorite-icon")||document.querySelector(".main-app-new").paintDetailModal(this.get())};const se=ie;customElements.define("restaurant-item",ie,{extends:"li"});var ae=r(139),oe={};oe.styleTagTransform=h(),oe.setAttributes=l(),oe.insert=o().bind(null,"head"),oe.domAPI=s(),oe.insertStyleElement=A(),n()(ae.A,oe),ae.A&&ae.A.locals&&ae.A.locals;var ce,le,de,Ae=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},pe=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class he extends HTMLUListElement{constructor(){super(),ce.add(this),le.set(this,void 0),this.classList.add("restaurant-list"),Ae(this,le,[],"f"),this.addEventListener("click",(t=>{var e,r;if(t.target instanceof dt){const n=(new Ot).get(),i=(null===(e=t.target.parentElement)||void 0===e?void 0:e.parentElement).get(),s=n.map((t=>new Yt(i).isEqual(t)?i:t));(new Ot).set(s),(null===(r=this.parentElement)||void 0===r?void 0:r.parentElement).paint()}}))}paint(t){Ae(this,le,t,"f"),pe(this,ce,"m",de).call(this),pe(this,le,"f").map((t=>new se(t))).forEach((t=>{this.append(t)}))}get(){return Array.from(this.children).map((t=>t.get()))}}le=new WeakMap,ce=new WeakSet,de=function(){for(;this.firstChild;)this.removeChild(this.firstChild)},customElements.define("restaurant-list",he,{extends:"ul"});var ue=r(403),me={};me.styleTagTransform=h(),me.setAttributes=l(),me.insert=o().bind(null,"head"),me.domAPI=s(),me.insertStyleElement=A(),n()(ue.A,me);const fe=ue.A&&ue.A.locals?ue.A.locals:void 0;var Ee,ve,ge,be,we,ye,Ce,xe,Be=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},ke=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class Te extends HTMLLIElement{constructor(t){super(),Ee.add(this),ve.set(this,"기타"),ge.set(this,"빈 이름"),be.set(this,void 0),we.set(this,void 0),ye.set(this,void 0),Ce.set(this,!1),this.template(),t?this.setState(t):this.paint()}setState({category:t,name:e,distance:r,description:n,link:i,isFavorite:s}){Be(this,ve,t,"f"),Be(this,ge,e,"f"),Be(this,be,r,"f"),Be(this,we,null!=n?n:"","f"),Be(this,ye,null!=i?i:"","f"),Be(this,Ce,null!=s&&s,"f"),this.paint()}template(){this.classList.add("restaurant-item-detail",`${fe.restaurant}`),this.innerHTML=`\n    <div class="restaurant-content ${fe.restaurantContent}">\n      <div is="restaurant-category-icon"> </div>\n      <h3 class="restaurant__name text-subtitle ${fe.restaurant__name}"></h3>\n      <span class="restaurant__distance text-body ${fe.restaurant__distance}"></span>\n      <p class="restaurant__description text-body ${fe.restaurant__description}"></p>\n      <a class="restaurant__link text-body ${fe.restaurant__link}"></a>\n    </div>\n      <div class="restaurant__button-container ${fe.restaurant__buttonContainer}" > </div>\n      <img is="favorite-icon" class="restaurant__favorite-icon" style="width:25px; position:absolute; right:10px; top:10px;"/>\n\n     `;const t=this.querySelector(".restaurant__button-container");t.append(new it("secondary","삭제하기","reset",(()=>{(new Ot).remove(this.get()),this.parentElement.parentElement.closeModal(),document.querySelector("#main-app").paint()}))),t.append(new it("primary","닫기","submit",(()=>{this.parentElement.parentElement.closeModal()}))),this.addEventListener("click",ke(this,Ee,"m",xe).bind(this))}paint(){var t;this.querySelector('div[is="restaurant-category-icon"]').setCategory(ke(this,ve,"f")),this.querySelector(".restaurant__name").textContent=`${ke(this,ge,"f")}`,this.querySelector(".restaurant__distance").textContent=`캠퍼스부터 ${ke(this,be,"f")}분 내`,this.querySelector(".restaurant__description").textContent=`${null!==(t=ke(this,we,"f"))&&void 0!==t?t:""}`,this.querySelector(".restaurant__favorite-icon").set(ke(this,Ce,"f"));const e=this.querySelector(".restaurant__link");e.setAttribute("href",ke(this,ye,"f")),e.textContent=ke(this,ye,"f")}get(){return{category:ke(this,ve,"f"),name:ke(this,ge,"f"),distance:ke(this,be,"f"),description:ke(this,we,"f"),link:ke(this,ye,"f"),isFavorite:ke(this,Ce,"f")}}}ve=new WeakMap,ge=new WeakMap,be=new WeakMap,we=new WeakMap,ye=new WeakMap,Ce=new WeakMap,Ee=new WeakSet,xe=function(t){if(t.target.classList.contains("restaurant__favorite-icon")){Be(this,Ce,"on"===this.querySelector(".restaurant__favorite-icon").getAttribute("clicked"),"f");const t=(new Ot).get().filter((t=>!new Yt(this.get()).isEqual(t)));console.log(t),(new Ot).set([...t,this.get()]),document.querySelector(".main-app-new").paint()}};const Se=Te;customElements.define("restaurant-item-detail",Te,{extends:"li"});class _e extends HTMLFormElement{constructor(){super(),this.innerHTML='\n    <div class="form-item form-item--required category-select">\n      <label for="category text-caption">카테고리</label>\n      <select is="select-box"></select>\n      <div class="error invisible">카테고리는 필수 입력입니다.</div>\n    </div>\n    \n    <div is="vertical-input-box"></div>\n\n    <div class="form-item form-item--required distance-select">\n      <label for="distance text-caption">거리(도보 이동 시간)</label>\n      <select is="select-box"></select>\n      <div class="error invisible">거리 값은 필수 입력입니다.</div>\n    </div>\n\n    <div class="form-item">\n      <label for="description text-caption">설명</label>\n      <textarea name="description" id="description" cols="30" rows="5"></textarea>\n      <span class="help-text text-caption">메뉴 등 추가 정보를 입력해 주세요.</span>\n    </div>\n\n    <div is="vertical-input-box" class="link-input-box"></div>\n\n    <div class="button-container"></div>\n    ',this.querySelector('.category-select select[is="select-box"]').set(["선택해주세요",...w],["선택해주세요",...w],"category"),this.querySelector('div[is="vertical-input-box"]').setState({name:"이름",idName:"name",classList:["name-input-box"],hasVerification:!0,isRequired:!0});const t=["선택해주세요",...E.DISTANCES.map((t=>`${t}`))],e=["선택해주세요",...E.DISTANCES.map((t=>`${String(t)}분 내`))];this.querySelector('.distance-select select[is="select-box"]').set(t,e,"distance"),this.querySelector(".link-input-box").setState({name:"링크",idName:"link",helpText:"매장 정보를 확인할 수 있는 링크를 입력해 주세요."});const r=this.querySelector(".button-container");r.append(new it("secondary","취소하기","reset",(()=>{var t;(null===(t=this.parentElement)||void 0===t?void 0:t.parentElement).closeModal()}))),r.append(new it("primary","추가하기","submit",(()=>{})))}}customElements.define("new-restaurant-form",_e,{extends:"form"});var Le=r(873),Me={};Me.styleTagTransform=h(),Me.setAttributes=l(),Me.insert=o().bind(null,"head"),Me.domAPI=s(),Me.insertStyleElement=A(),n()(Le.A,Me),Le.A&&Le.A.locals&&Le.A.locals;var je,qe,We,Pe,Re,Ie,Ye,He,Ne=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},ze=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};qe=new WeakMap,We=new WeakMap,je=new WeakSet,Pe=function(t,e,r){var n,i,s;const a="선택해주세요"===t,o=Number.isNaN(e),c=!r;return a&&(null===(n=this.querySelector(".category-select > .error"))||void 0===n||n.classList.remove("invisible")),o&&(null===(i=this.querySelector(".distance-select > .error"))||void 0===i||i.classList.remove("invisible")),c&&(null===(s=this.querySelector(".name-input-box > .error"))||void 0===s||s.classList.remove("invisible")),a||o||c},Re=function(){var t,e,r;null===(t=this.querySelector(".category-select > .error"))||void 0===t||t.classList.add("invisible"),null===(e=this.querySelector(".distance-select > .error"))||void 0===e||e.classList.add("invisible"),null===(r=this.querySelector(".name-input-box > .error"))||void 0===r||r.classList.add("invisible")},Ie=function(){ze(this,We,"f").addEventListener("submit",(t=>{t.preventDefault(),ze(this,je,"m",Re).call(this);const{name:e,distance:r,category:n,description:i,link:s}=ze(this,je,"m",Ye).call(this);if(ze(this,je,"m",Pe).call(this,n,r,e))return;const a=r,o=n,c=Object.assign(Object.assign({name:e,distance:a,category:o},i&&{description:i}),s&&{link:s});(new Ot).add(c),ze(this,je,"m",He).call(this),this.closeModal()}))},Ye=function(){return{name:ze(this,We,"f").elements.namedItem("name").value,distance:Number(ze(this,We,"f").elements.namedItem("distance").value),category:ze(this,We,"f").elements.namedItem("category").value,description:ze(this,We,"f").elements.namedItem("description").value,link:ze(this,We,"f").elements.namedItem("link").value}},He=function(){this.parentElement.paint()},customElements.define("new-restaurant-modal",class extends Q{constructor(){super(),je.add(this),qe.set(this,void 0),We.set(this,void 0);const t=document.createElement("div");t.innerHTML='\n    <h2 class="modal-title text-title">새로운 음식점</h2>\n    <form is="new-restaurant-form" class="new-restaurant-form"></form>\n    ',Ne(this,qe,t.querySelector(".modal-title"),"f"),Ne(this,We,t.querySelector(".new-restaurant-form"),"f"),this.appendAll([ze(this,qe,"f"),ze(this,We,"f")]),ze(this,je,"m",Ie).call(this)}closeModal(){ze(this,je,"m",Re).call(this),this.classList.remove("modal--open")}getForm(){return ze(this,We,"f")}},{extends:"div"});class Fe extends HTMLDivElement{constructor(){var t;super(),this.setAttribute("checked",null!==(t=this.getAttribute("checked"))&&void 0!==t?t:"off"),this.addEventListener("click",(()=>{this.isOn()?this.off():this.on()}))}isOn(){return"on"===this.getAttribute("checked")}on(){this.setAttribute("checked","on")}off(){this.setAttribute("checked","off")}}Fe.observedAttributes=["checked"],customElements.define("on-off-button",Fe,{extends:"div"});var Oe=r(143),De={};De.styleTagTransform=h(),De.setAttributes=l(),De.insert=o().bind(null,"head"),De.domAPI=s(),De.insertStyleElement=A(),n()(Oe.A,De),Oe.A&&Oe.A.locals&&Oe.A.locals;var $e,Ue=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r};const Ze="my-tab";class Xe extends HTMLDivElement{constructor(){super(),$e.set(this,void 0),this.classList.add("custom-tab",Ze),Ue(this,$e,this.querySelector(":scope > *"),"f"),this.addEventListener("click",(t=>{this.contains(t.target)&&(Array.from(this.children).forEach((t=>t.off())),t.target.on(),Ue(this,$e,t.target,"f"))}))}getSelected(){return function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,$e,"f")}}$e=new WeakMap,customElements.define(Ze,Xe,{extends:"div"});var Ve=r(211),Ge={};Ge.styleTagTransform=h(),Ge.setAttributes=l(),Ge.insert=o().bind(null,"head"),Ge.domAPI=s(),Ge.insertStyleElement=A(),n()(Ve.A,Ge),Ve.A&&Ve.A.locals&&Ve.A.locals;const Je=[{name:"피양콩할머니",category:"한식",distance:10,description:"평양 출신의 할머니가 수십 년간 운영해온 비지 전문점 피양콩 할마니. 두부를 빼지 않은\n되비지를 맛볼 수 있는 곳으로, ‘피양’은 평안도 사투리로 ‘평양’을 의미한다. 딸과 함께\n운영하는 이곳에선 맷돌로 직접 간 콩만을 사용하며, 일체의 조미료를 넣지 않은 건강식을\n선보인다. 콩비지와 피양 만두가 이곳의 대표 메뉴지만, 할머니가 옛날 방식을 고수하며\n만들어내는 비지전골 또한 이 집의 역사를 느낄 수 있는 특별한 메뉴다. 반찬은 손님들이\n먹고 싶은 만큼 덜어 먹을 수 있게 준비돼 있다.",link:"https://www.naver.com"},{name:"친친",category:"중식",distance:5,description:"Since 2004 편리한 교통과 주차, 그리고 관록만큼 깊은 맛과 정성으로 정통 중식의 세계를\n    펼쳐갑니다.",link:"https://www.naver.com"},{name:"잇쇼우",category:"일식",distance:10,description:"잇쇼우는 정통 자가제면 사누끼 우동이 대표메뉴입니다. 기술은 정성을 이길 수 없다는\n    신념으로 모든 음식에 최선을 다하는 잇쇼우는 고객 한분 한분께 최선을 다하겠습니다",link:"https://www.naver.com"},{name:"이태리키친",category:"양식",distance:20,description:"늘 변화를 추구하는 이태리키친입니다.",link:"https://www.naver.com"},{name:"호야빈 삼성점",category:"아시안",distance:15,description:"푸짐한 양에 국물이 일품인 쌀국수",link:"https://www.naver.com"},{name:"도스타코스 선릉점",category:"기타",distance:5,description:"멕시칸 캐주얼 그릴",link:"https://www.naver.com"},{name:"얌샘김밥",category:"한식",distance:5,description:"멕시칸 캐주얼 그릴",link:"https://www.naver.com"}];var Qe,Ke,tr,er,rr,nr,ir,sr=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},ar=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class or extends HTMLDivElement{constructor(){super(),Qe.add(this),Ke.set(this,void 0),tr.set(this,void 0),er.set(this,void 0),this.observedAttributes=[],this.classList.add("all-restaurant-app"),this.innerHTML='\n    <filter-container class="restaurant-filter-container"></filter-container>\n    <ul is="restaurant-list" class="restaurant-list-container restaurant-list"></ul>\n    ',sr(this,Ke,this.querySelector(".restaurant-filter-container"),"f"),sr(this,tr,this.querySelector(".restaurant-list"),"f"),sr(this,er,new Ot,"f"),this.paint()}connectedCallback(){this.paint()}paint(){ar(this,tr,"f").paint(ar(this,Qe,"m",rr).call(this))}}Ke=new WeakMap,tr=new WeakMap,er=new WeakMap,Qe=new WeakSet,rr=function(){const{category:t,sortCriteria:e}=ar(this,Ke,"f").get();let r=ar(this,Qe,"m",ir).call(this,t,e);return r||(ar(this,Qe,"m",nr).call(this),r=ar(this,Qe,"m",ir).call(this,t,e)),r},nr=function(){ar(this,er,"f").set(Je)},ir=function(t,e){return ar(this,er,"f").getFromRestaurantList(t,e)},customElements.define("all-restaurant-app",or,{extends:"div"});var cr,lr,dr,Ar,pr,hr,ur,mr,fr=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},Er=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class vr extends HTMLDivElement{constructor(){super(),cr.add(this),lr.set(this,void 0),dr.set(this,void 0),Ar.set(this,void 0),this.observedAttributes=[],this.classList.add("favorite-restaurant-app"),this.innerHTML='\n    <filter-container class="restaurant-filter-container"></filter-container>\n    <ul is="restaurant-list" class="restaurant-list-container restaurant-list"></ul>\n    ',fr(this,lr,this.querySelector(".restaurant-filter-container"),"f"),fr(this,dr,this.querySelector(".restaurant-list"),"f"),fr(this,Ar,new Ot,"f"),this.paint(),this.addEventListener("click",(t=>{var e;if(t.target instanceof dt){const r=Er(this,cr,"m",mr).call(this),n=null===(e=t.target.parentElement)||void 0===e?void 0:e.parentElement,i=r.filter((t=>!new Yt(t).isEqual(n.get())));i.push(n.get()),Er(this,Ar,"f").set(i),this.paint()}}))}connectedCallback(){this.paint()}paint(){Er(this,dr,"f").paint(Er(this,cr,"m",pr).call(this))}}lr=new WeakMap,dr=new WeakMap,Ar=new WeakMap,cr=new WeakSet,pr=function(){const{category:t,sortCriteria:e}=Er(this,lr,"f").get();let r=Er(this,cr,"m",ur).call(this,t,e);return 0===r.length&&(Er(this,cr,"m",hr).call(this),r=Er(this,cr,"m",ur).call(this,t,e)),r.filter((t=>t.isFavorite))},hr=function(){Er(this,Ar,"f").set(Je)},ur=function(t,e){return Er(this,Ar,"f").getFromRestaurantList(t,e)},mr=function(){return Er(this,Ar,"f").get()},customElements.define("favorite-restaurant-app",vr,{extends:"div"});var gr=r(342),br={};br.styleTagTransform=h(),br.setAttributes=l(),br.insert=o().bind(null,"head"),br.domAPI=s(),br.insertStyleElement=A(),n()(gr.A,br),gr.A&&gr.A.locals&&gr.A.locals;var wr,yr,Cr,xr,Br,kr=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},Tr=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class Sr extends HTMLDivElement{constructor(){super(),wr.set(this,void 0),yr.set(this,void 0),Cr.set(this,void 0),xr.set(this,void 0),Br.set(this,void 0),this.observedAttributes=[],this.className="main-app-new",this.id="main-app",this.innerHTML='\n    <div is="my-tab" class="restaurant-nav-tab" style="margin-top:22px;"> \n      <div is="on-off-button" class="text-subtitle" checked="on" data-id="all">모든 음식점</div>\n      <div is="on-off-button" class="text-subtitle" data-id="favorite">자주 가는 음식점</div>\n    </div>\n\n    <div is="all-restaurant-app" class="hidden" data-id="all"></div>\n    <div is="favorite-restaurant-app" class="" data-id="favorite"></div>\n  \n    <div is="new-restaurant-modal" class="modal new-restaurant-modal"></div>\n\n    <div is="basic-modal" class="modal basic-modal detail-modal" class-container="detail-modal__container" >\n      <li is="restaurant-item-detail" class="restaurant-item-detail" style=""></li>\n    </div>\n    ',kr(this,wr,this.querySelector('div[is="my-tab"]'),"f"),kr(this,xr,this.querySelector(".new-restaurant-modal"),"f"),kr(this,yr,this.querySelector('div[is="all-restaurant-app"]'),"f"),kr(this,Cr,this.querySelector('div[is="favorite-restaurant-app"]'),"f"),this.paint(),Tr(this,wr,"f").addEventListener("click",(()=>{this.paint()})),kr(this,Br,this.querySelector(".detail-modal"),"f"),Tr(this,Br,"f").appendAll([])}paint(){Tr(this,yr,"f")===this.querySelector(`.main-app-new > div[data-id="${Tr(this,wr,"f").getSelected().dataset.id}"]`)?(Tr(this,Cr,"f").classList.add("hidden"),Tr(this,yr,"f").classList.remove("hidden"),Tr(this,yr,"f").paint()):(Tr(this,yr,"f").classList.add("hidden"),Tr(this,Cr,"f").classList.remove("hidden"),Tr(this,Cr,"f").paint())}paintDetailModal(t){Tr(this,Br,"f").openModal(),Tr(this,Br,"f").replaceChildNodes([new Se(t)])}}wr=new WeakMap,yr=new WeakMap,Cr=new WeakMap,xr=new WeakMap,Br=new WeakMap,customElements.define("main-app",Sr,{extends:"div"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ekMsZUFBZUMsT0FBTyxXQUFZLEdBQVMsQ0FBRUMsUUFBUyxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9CYXNpY0J1dHRvbi5tb2R1bGUuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNNb2RhbC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9DYXRlZ29yeUljb24ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0ZpbHRlckNvbnRhaW5lci5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9SZXN0YXVyYW50Q2F0ZWdvcnlJY29uLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9TZWxlY3RCb3guY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9NYWluQXBwLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL05ld1Jlc3RhdXJhbnRNb2RhbC9OZXdSZXN0YXVyYW50TW9kYWwuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudEl0ZW0ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtRGV0YWlsLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9UYWIuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Nzcy9nbG9iYWwuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Nzcy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY3NzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2FkZC1idXR0b24ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5jc3M/MDU1ZSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29uc3RhbnRzL0NvbmRpdGlvbi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2VDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9TZWxlY3RCb3guY3NzP2Y4NTIiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9TZWxlY3RCb3gudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9GaWx0ZXJDb250YWluZXIuY3NzPzg0NGEiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9GaWx0ZXJDb250YWluZXIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9CYXNpY01vZGFsLmNzcz9hNTg2Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNNb2RhbC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0Jhc2ljQnV0dG9uLm1vZHVsZS5jc3M/NzQ3ZSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0Jhc2ljQnV0dG9uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2Zhdm9yaXRlLWljb24tZmlsbGVkLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL2Fzc2V0cy9mYXZvcml0ZS1pY29uLWxpbmVkLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0Zhdm9yaXRlSWNvbi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL1ZlcnRpY2FsSW5wdXRCb3gudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9hc3NldHMvY2F0ZWdvcnkta29yZWFuLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL2Fzc2V0cy9jYXRlZ29yeS1hc2lhbi5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9hc3NldHMvY2F0ZWdvcnktamFwYW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2NhdGVnb3J5LWNoaW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2NhdGVnb3J5LXdlc3Rlcm4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2NhdGVnb3J5LWV0Yy5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9DYXRlZ29yeUljb24ubW9kdWxlLmNzcz81OWQwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQ2F0ZWdvcnlJY29uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvUmVzdGF1cmFudENhdGVnb3J5SWNvbi5tb2R1bGUuY3NzP2ZkNzUiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9SZXN0YXVyYW50Q2F0ZWdvcnlJY29uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbnMvZW50aXRpZXMvUmVzdGF1cmFudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9kb21haW5zL2VudGl0aWVzL1Jlc3RhdXJhbnRDb2xsZWN0aW9uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbnMvc2VydmljZXMvUmVzdGF1cmFudERCU2VydmljZS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3M/ZTUwNSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QuY3NzP2IxNTEiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtRGV0YWlsLm1vZHVsZS5jc3M/MTA3MyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtRGV0YWlsLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvTmV3UmVzdGF1cmFudE1vZGFsL05ld1Jlc3RhdXJhbnRGb3JtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvTmV3UmVzdGF1cmFudE1vZGFsL05ld1Jlc3RhdXJhbnRNb2RhbC5jc3M/Y2RjOSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL05ld1Jlc3RhdXJhbnRNb2RhbC9OZXdSZXN0YXVyYW50TW9kYWwudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Pbk9mZkJ1dHRvbi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1RhYi5jc3M/M2ExOCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1RhYi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jc3MvaW5kZXguY3NzP2Y3ZWEiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvbW9jay9yZXN0YXVyYW50TGlzdC5tb2NrLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQWxsUmVzdGF1cmFudEFwcC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Zhdm9yaXRlUmVzdGF1cmFudEFwcC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01haW5BcHAuY3NzP2MzYWQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9NYWluQXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmVSbElJRjI3OGNwbWlIcTJ2UzZQIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcblxcclxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcclxcblxcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcblxcclxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmVSbElJRjI3OGNwbWlIcTJ2UzZQOmxhc3QtY2hpbGQge1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uTHl6blhNS1dDOFJrZWZoVDcyQmYge1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0zMDApO1xcclxcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cXHJcXG4uS0ZfV0dwMWplelFrcUpGazdEalUge1xcclxcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxuXFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXNpYy9CYXNpY0J1dHRvbi5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztFQUNYLFlBQVk7O0VBRVosa0JBQWtCOztFQUVsQixZQUFZO0VBQ1osa0JBQWtCOztFQUVsQixnQkFBZ0I7RUFDaEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsdUJBQXVCOztFQUV2QixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQ0FBZ0M7O0VBRWhDLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYnV0dG9uIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcblxcclxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcclxcblxcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcblxcclxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbjpsYXN0LWNoaWxkIHtcXHJcXG4gIG1hcmdpbi1yaWdodDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvblNlY29uZGFyeSB7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxyXFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG5cXHJcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25QcmltYXJ5IHtcXHJcXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcblxcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMTAwKTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiYnV0dG9uXCI6IFwiZVJsSUlGMjc4Y3BtaUhxMnZTNlBcIixcblx0XCJidXR0b25TZWNvbmRhcnlcIjogXCJMeXpuWE1LV0M4UmtlZmhUNzJCZlwiLFxuXHRcImJ1dHRvblByaW1hcnlcIjogXCJLRl9XR3AxamV6UWtxSkZrN0RqVVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIOydjOyLneygkCDstpTqsIAg66qo64usICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcclxcblxcclxcbi5tb2RhbC0tb3BlbiB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtYmFja2Ryb3Age1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbiAgb3BhY2l0eTogMDtcXHJcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNHMgZWFzZS1pbi1vdXQ7XFxyXFxuXFxyXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICB0b3A6IDA7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGJvdHRvbTogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuXFxyXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcclxcbn1cXHJcXG4ubW9kYWwtLW9wZW4gLm1vZGFsLWJhY2tkcm9wIHtcXHJcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxuICBvcGFjaXR5OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtY29udGFpbmVyIHtcXHJcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjRzIGVhc2UtaW4tb3V0O1xcclxcblxcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgYm90dG9tOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiA4MCU7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAzMnB4IDE2cHg7XFxyXFxuXFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDBweCAwcHg7XFxyXFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1ncmV5LTEwMCk7XFxyXFxufVxcclxcbi5tb2RhbC0tb3BlbiAubW9kYWwtY29udGFpbmVyIHtcXHJcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxuICBvcGFjaXR5OiAxO1xcclxcbiAgb3ZlcmZsb3cteTogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLXRpdGxlIHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0ge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFxyXFxuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIGxhYmVsIHtcXHJcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTQwMCk7XFxyXFxuICBmb250LXNpemU6IDE0cHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0tLXJlcXVpcmVkIGxhYmVsOjphZnRlciB7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDRweDtcXHJcXG5cXHJcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXHJcXG4gIGNvbnRlbnQ6ICcqJztcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSAuaGVscC10ZXh0IHtcXHJcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gaW5wdXQsXFxyXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSxcXHJcXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxyXFxuICBwYWRkaW5nOiA4cHg7XFxyXFxuICBtYXJnaW46IDZweCAwO1xcclxcblxcclxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcblxcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIHRleHRhcmVhIHtcXHJcXG4gIGhlaWdodDogNjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcblxcclxcbiAgcGFkZGluZzogOHB4O1xcclxcblxcclxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcblxcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXRbbmFtZT0nbmFtZSddLFxcclxcbmlucHV0W25hbWU9J2xpbmsnXSB7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0Jhc2ljTW9kYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHNEQUFzRDs7QUFFdEQ7RUFDRSxjQUFjO0VBQ2QsWUFBWTtFQUNaLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YscUNBQXFDOztFQUVyQyxlQUFlO0VBQ2YsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsT0FBTzs7RUFFUCwrQkFBK0I7QUFDakM7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixVQUFVO0FBQ1o7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLHFDQUFxQzs7RUFFckMsZUFBZTtFQUNmLFNBQVM7RUFDVCxPQUFPO0VBQ1AsV0FBVztFQUNYLFdBQVc7O0VBRVgsa0JBQWtCOztFQUVsQiw4QkFBOEI7RUFDOUIsMkJBQTJCO0FBQzdCO0FBQ0E7RUFDRSxtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUJBQWlCOztFQUVqQiwyQkFBMkI7RUFDM0IsWUFBWTtBQUNkOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBOzs7RUFHRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZOztFQUVaLGlDQUFpQztFQUNqQyxrQkFBa0I7O0VBRWxCLHNCQUFzQjtBQUN4Qjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyog7J2M7Iud7KCQIOy2lOqwgCDrqqjri6wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxyXFxuXFxyXFxuLm1vZGFsLS1vcGVuIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5tb2RhbC1iYWNrZHJvcCB7XFxyXFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxuICBvcGFjaXR5OiAwO1xcclxcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI0cyBlYXNlLWluLW91dDtcXHJcXG5cXHJcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgYm90dG9tOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG5cXHJcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4zNSk7XFxyXFxufVxcclxcbi5tb2RhbC0tb3BlbiAubW9kYWwtYmFja2Ryb3Age1xcclxcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXHJcXG4gIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblxcclxcbi5tb2RhbC1jb250YWluZXIge1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbiAgb3BhY2l0eTogMDtcXHJcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNHMgZWFzZS1pbi1vdXQ7XFxyXFxuXFxyXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDgwJTtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDMycHggMTZweDtcXHJcXG5cXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweCA4cHggMHB4IDBweDtcXHJcXG4gIGJhY2tncm91bmQ6IHZhcigtLWdyZXktMTAwKTtcXHJcXG59XFxyXFxuLm1vZGFsLS1vcGVuIC5tb2RhbC1jb250YWluZXIge1xcclxcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXHJcXG4gIG9wYWNpdHk6IDE7XFxyXFxuICBvdmVyZmxvdy15OiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtdGl0bGUge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcclxcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXHJcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcclxcblxcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbiAgY29udGVudDogJyonO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSBpbnB1dCxcXHJcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcclxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXHJcXG4gIHBhZGRpbmc6IDhweDtcXHJcXG4gIG1hcmdpbjogNnB4IDA7XFxyXFxuXFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuXFxyXFxuICBmb250LXNpemU6IDE2cHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcclxcbiAgaGVpZ2h0OiA2MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiA4cHg7XFxyXFxuXFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuXFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFtuYW1lPSduYW1lJ10sXFxyXFxuaW5wdXRbbmFtZT0nbGluayddIHtcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLndtMUxGU3RYSDFfWE5Tc1Q4TWpCIHtcXHJcXG4gIHdpZHRoOiAzNnB4O1xcclxcbiAgaGVpZ2h0OiAzNnB4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXNpYy9DYXRlZ29yeUljb24ubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNhdGVnb3J5SWNvbiB7XFxyXFxuICB3aWR0aDogMzZweDtcXHJcXG4gIGhlaWdodDogMzZweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY2F0ZWdvcnlJY29uXCI6IFwid20xTEZTdFhIMV9YTlNzVDhNakJcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXNpYy9GaWx0ZXJDb250YWluZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4Qjs7RUFFOUIsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuQmhyWnFVRG1wcGtEMGhMeDVrQ2cge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIHdpZHRoOiA2NHB4O1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcbiAgbWluLXdpZHRoOiA2NHB4O1xcclxcbiAgbWluLWhlaWdodDogNjRweDtcXHJcXG5cXHJcXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXHJcXG5cXHJcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0ZW4tY29sb3IpO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXNpYy9SZXN0YXVyYW50Q2F0ZWdvcnlJY29uLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixnQkFBZ0I7O0VBRWhCLGtCQUFrQjs7RUFFbEIsa0JBQWtCO0VBQ2xCLGdDQUFnQztBQUNsQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudF9fY2F0ZWdvcnkge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIHdpZHRoOiA2NHB4O1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcbiAgbWluLXdpZHRoOiA2NHB4O1xcclxcbiAgbWluLWhlaWdodDogNjRweDtcXHJcXG5cXHJcXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXHJcXG5cXHJcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0ZW4tY29sb3IpO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZXN0YXVyYW50X19jYXRlZ29yeVwiOiBcIkJoclpxVURtcHBrRDBoTHg1a0NnXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwic2VsZWN0IHtcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxyXFxuXFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxuICBmb250LXNpemU6IDE2cHg7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL1NlbGVjdEJveC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxZQUFZO0VBQ1osZ0JBQWdCOztFQUVoQix5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7RUFFdkIsZUFBZTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJzZWxlY3Qge1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgbWluLXdpZHRoOiAxMjVweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMGQ1ZGQ7XFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG5cXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmduYiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGhlaWdodDogNjRweDtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDAgMTZweDtcXHJcXG5cXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG5cXHJcXG4uZ25iX190aXRsZSB7XFxyXFxuICBjb2xvcjogI2ZjZmNmZDtcXHJcXG59XFxyXFxuXFxyXFxuLmduYl9fYnV0dG9uIHtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcclxcblxcclxcbiAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZ25iX19idXR0b24gaW1nIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgd2lkdGg6IDQwcHg7XFxyXFxuICBoZWlnaHQ6IDQwcHg7XFxyXFxuICBvYmplY3QtZml0OiBjb250YWluO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsbUJBQW1CO0VBQ25CLFlBQVk7O0VBRVosZUFBZTs7RUFFZixzQ0FBc0M7QUFDeEM7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7RUFFdkIsZUFBZTtFQUNmLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmduYiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGhlaWdodDogNjRweDtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDAgMTZweDtcXHJcXG5cXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG5cXHJcXG4uZ25iX190aXRsZSB7XFxyXFxuICBjb2xvcjogI2ZjZmNmZDtcXHJcXG59XFxyXFxuXFxyXFxuLmduYl9fYnV0dG9uIHtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcclxcblxcclxcbiAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZ25iX19idXR0b24gaW1nIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgd2lkdGg6IDQwcHg7XFxyXFxuICBoZWlnaHQ6IDQwcHg7XFxyXFxuICBvYmplY3QtZml0OiBjb250YWluO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubW9kYWwuYmFzaWMtbW9kYWwgLmRldGFpbC1tb2RhbF9fY29udGFpbmVyIHtcXHJcXG4gIG1pbi1oZWlnaHQ6IDU1NnB4O1xcclxcbiAgaGVpZ2h0OiA3MHZoICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL01haW5BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsaUJBQWlCO0VBQ2pCLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubW9kYWwuYmFzaWMtbW9kYWwgLmRldGFpbC1tb2RhbF9fY29udGFpbmVyIHtcXHJcXG4gIG1pbi1oZWlnaHQ6IDU1NnB4O1xcclxcbiAgaGVpZ2h0OiA3MHZoICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vQmFzaWMvQmFzaWNNb2RhbC5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5idXR0b24tY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL05ld1Jlc3RhdXJhbnRNb2RhbC9OZXdSZXN0YXVyYW50TW9kYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBO0VBQ0UsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKCcuLi9CYXNpYy9CYXNpY01vZGFsLmNzcycpO1xcclxcbi5idXR0b24tY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5mWEhMVmxpRUU4THNBMEd5eXNFbSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXHJcXG5cXHJcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcclxcblxcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4uSGRDbUd5Y3UzaHhEcUhsQ1V1cTIge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxufVxcclxcblxcclxcbi5aUDdfQW1vb1dsM2xRdER4NTRSNyB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbi50X29IV2JwZU8yRHd4cXFlZ0NObiB7XFxyXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5xUllicFloQnYyOUhQTGJ4amF1diB7XFxyXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXHJcXG5cXHJcXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxyXFxuXFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XFxyXFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50SXRlbS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1Qjs7RUFFdkIsaUJBQWlCOztFQUVqQixnQ0FBZ0M7O0VBRWhDLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0Usb0JBQW9COztFQUVwQixnQkFBZ0I7O0VBRWhCLGdCQUFnQjtFQUNoQix1QkFBdUI7RUFDdkIscUJBQXFCO0VBQ3JCLDRCQUE0QjtBQUM5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudCB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXHJcXG5cXHJcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcclxcblxcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudF9faW5mbyB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3RhdXJhbnRfX25hbWUge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudF9fZGlzdGFuY2Uge1xcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcclxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxyXFxuXFxyXFxuICBwYWRkaW5nLXRvcDogOHB4O1xcclxcblxcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xcclxcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicmVzdGF1cmFudFwiOiBcImZYSExWbGlFRThMc0EwR3l5c0VtXCIsXG5cdFwicmVzdGF1cmFudF9faW5mb1wiOiBcIkhkQ21HeWN1M2h4RHFIbENVdXEyXCIsXG5cdFwicmVzdGF1cmFudF9fbmFtZVwiOiBcIlpQN19BbW9vV2wzbFF0RHg1NFI3XCIsXG5cdFwicmVzdGF1cmFudF9fZGlzdGFuY2VcIjogXCJ0X29IV2JwZU8yRHd4cXFlZ0NOblwiLFxuXHRcInJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uXCI6IFwicVJZYnBZaEJ2MjlIUExieGphdXZcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuTDFnelA0TDZXdkNJRTRoMjBNR2Yge1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcclxcblxcclxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxyXFxuXFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcbi5mSm93X2xkVmVEejNnNFBkN1ByUSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIHJvdy1nYXA6IDEycHg7XFxyXFxufVxcclxcblxcclxcbi5vaHhGUWlsRndITWVtUG00WUZaeiB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbi5MMWd6UDRMNld2Q0lFNGgyME1HZiAubmdDaUhkcnRDTDZ6akFGNVljVmsge1xcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG5cXHJcXG4uSHp5U3RCT2wyQ1M1NmlVdXNscGcge1xcclxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxyXFxuXFxyXFxuICBwYWRkaW5nLXRvcDogOHB4O1xcclxcblxcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAxMDtcXHJcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxyXFxufVxcclxcblxcclxcbi5NbzlHbjJTRkc0WWp2MjJOaEpZTSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcbi5hNzFfVzVsTzdvV1pPUTJ5eVdJTiB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudEl0ZW1EZXRhaWwubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLDhCQUE4QjtFQUM5Qix1QkFBdUI7O0VBRXZCLGlCQUFpQjs7RUFFakIsZ0NBQWdDOztFQUVoQyxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0Usb0JBQW9COztFQUVwQixnQkFBZ0I7O0VBRWhCLGdCQUFnQjtFQUNoQix1QkFBdUI7RUFDdkIsc0JBQXNCO0VBQ3RCLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLGFBQWE7RUFDYixXQUFXO0FBQ2I7QUFDQTtFQUNFLDBCQUEwQjtBQUM1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudCB7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcclxcblxcclxcbiAgcGFkZGluZzogMTZweCA4cHg7XFxyXFxuXFxyXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZWFlZDtcXHJcXG5cXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuLnJlc3RhdXJhbnRDb250ZW50IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgcm93LWdhcDogMTJweDtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3RhdXJhbnRfX25hbWUge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudCAucmVzdGF1cmFudF9fZGlzdGFuY2Uge1xcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcclxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxyXFxuXFxyXFxuICBwYWRkaW5nLXRvcDogOHB4O1xcclxcblxcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAxMDtcXHJcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXVyYW50X19idXR0b25Db250YWluZXIge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG4ucmVzdGF1cmFudF9fbGluayB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicmVzdGF1cmFudFwiOiBcIkwxZ3pQNEw2V3ZDSUU0aDIwTUdmXCIsXG5cdFwicmVzdGF1cmFudENvbnRlbnRcIjogXCJmSm93X2xkVmVEejNnNFBkN1ByUVwiLFxuXHRcInJlc3RhdXJhbnRfX25hbWVcIjogXCJvaHhGUWlsRndITWVtUG00WUZaelwiLFxuXHRcInJlc3RhdXJhbnRfX2Rpc3RhbmNlXCI6IFwibmdDaUhkcnRDTDZ6akFGNVljVmtcIixcblx0XCJyZXN0YXVyYW50X19kZXNjcmlwdGlvblwiOiBcIkh6eVN0Qk9sMkNTNTZpVXVzbHBnXCIsXG5cdFwicmVzdGF1cmFudF9fYnV0dG9uQ29udGFpbmVyXCI6IFwiTW85R24yU0ZHNFlqdjIyTmhKWU1cIixcblx0XCJyZXN0YXVyYW50X19saW5rXCI6IFwiYTcxX1c1bE83b1daT1EyeXlXSU5cIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDAgMTZweDtcXHJcXG4gIG1hcmdpbjogMTZweCAwO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixlQUFlO0VBQ2YsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDAgMTZweDtcXHJcXG4gIG1hcmdpbjogMTZweCAwO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY3VzdG9tLXRhYiB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIHBhZGRpbmc6IDAgMTZweDtcXHJcXG59XFxyXFxuXFxyXFxuLmN1c3RvbS10YWIgPiAqIHtcXHJcXG4gIHBhZGRpbmc6IDlweCAwO1xcclxcblxcclxcbiAgZmxleDogMTtcXHJcXG5cXHJcXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxyXFxuICBmb250LXNpemU6IDE2cHg7XFxyXFxuICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBsZXR0ZXItc3BhY2luZzogMC41cHg7XFxyXFxuXFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uY3VzdG9tLXRhYiA+ICpbY2hlY2tlZD0nb24nXSB7XFxyXFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQ7XFxyXFxuICBib3JkZXItY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG4uY3VzdG9tLXRhYiA+ICoge1xcclxcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkO1xcclxcbiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9UYWIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztFQUNYLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsY0FBYzs7RUFFZCxPQUFPOztFQUVQLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixxQkFBcUI7O0VBRXJCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usd0JBQXdCO0VBQ3hCLGtDQUFrQztFQUNsQywyQkFBMkI7QUFDN0I7QUFDQTtFQUNFLHdCQUF3QjtFQUN4Qiw2QkFBNkI7RUFDN0Isc0JBQXNCO0FBQ3hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jdXN0b20tdGFiIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgcGFkZGluZzogMCAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uY3VzdG9tLXRhYiA+ICoge1xcclxcbiAgcGFkZGluZzogOXB4IDA7XFxyXFxuXFxyXFxuICBmbGV4OiAxO1xcclxcblxcclxcbiAgZm9udC1mYW1pbHk6IFJvYm90bztcXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxyXFxuICBsaW5lLWhlaWdodDogMjRweDtcXHJcXG4gIGxldHRlci1zcGFjaW5nOiAwLjVweDtcXHJcXG5cXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jdXN0b20tdGFiID4gKltjaGVja2VkPSdvbiddIHtcXHJcXG4gIGJvcmRlci1ib3R0b206IDNweCBzb2xpZDtcXHJcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcbi5jdXN0b20tdGFiID4gKiB7XFxyXFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQ7XFxyXFxuICBib3JkZXItY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXHJcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbnVsLFxcclxcbmxpIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCxcXHJcXG5ib2R5IHtcXHJcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxyXFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxyXFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcclxcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXHJcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxyXFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcclxcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnRleHQtdGl0bGUge1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNjAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1zdWJ0aXRsZSB7XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjhweDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxufVxcclxcblxcclxcbi50ZXh0LWJvZHkge1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1jYXB0aW9uIHtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG59XFxyXFxuXFxyXFxuLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZ2IoMjEzLCA5MywgMjMpO1xcclxcbiAgaGVpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcbi5pbnZpc2libGUge1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4uY2xpY2thYmxlIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9nbG9iYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxzQkFBc0I7QUFDeEI7O0FBRUE7O0VBRUUsa0JBQWtCO0FBQ3BCOztBQUVBOztFQUVFLHVCQUF1QjtFQUN2QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0Usd0JBQXdCO0VBQ3hCLHdCQUF3QjtFQUN4QixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbnVsLFxcclxcbmxpIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCxcXHJcXG5ib2R5IHtcXHJcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxyXFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxyXFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcclxcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXHJcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxyXFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcclxcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnRleHQtdGl0bGUge1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNjAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1zdWJ0aXRsZSB7XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjhweDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxufVxcclxcblxcclxcbi50ZXh0LWJvZHkge1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1jYXB0aW9uIHtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG59XFxyXFxuXFxyXFxuLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZ2IoMjEzLCA5MywgMjMpO1xcclxcbiAgaGVpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcbi5pbnZpc2libGUge1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4uY2xpY2thYmxlIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dsb2JhbC5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuYm9keTo6LXdlYmtpdC1zY3JvbGxiYXIge1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXQge1xcclxcbiAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbnRleHRhcmVhIHtcXHJcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxyXFxuICBvdXRsaW5lOiBub25lO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgcmVzaXplOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxyXFxufVxcclxcblxcclxcbmltZyxcXHJcXG5waWN0dXJlLFxcclxcbnZpZGVvLFxcclxcbnN2ZyB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICBib3JkZXI6IDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZSB7XFxyXFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbm9sLFxcclxcbnVsIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsWUFBWTtFQUNaLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7Ozs7RUFJRSxjQUFjO0VBQ2QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixTQUFTO0VBQ1QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixpQkFBaUI7QUFDbkI7O0FBRUE7O0VBRUUsZ0JBQWdCO0VBQ2hCLFNBQVM7RUFDVCxVQUFVO0FBQ1pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5Ojotd2Via2l0LXNjcm9sbGJhciB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dCB7XFxyXFxuICBib3gtc2hhZG93OiBub25lO1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxudGV4dGFyZWEge1xcclxcbiAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICByZXNpemU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbjpyb290IHtcXHJcXG4gIGN1cnNvcjogZGVmYXVsdDtcXHJcXG59XFxyXFxuXFxyXFxuaW1nLFxcclxcbnBpY3R1cmUsXFxyXFxudmlkZW8sXFxyXFxuc3ZnIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24ge1xcclxcbiAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG4gIGJvcmRlcjogMDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuYSB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxuICBib3JkZXItc3BhY2luZzogMDtcXHJcXG59XFxyXFxuXFxyXFxub2wsXFxyXFxudWwge1xcclxcbiAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWRkLWJ1dHRvbi5wbmdcIjsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSGVhZGVyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSGVhZGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBBZGRCdXR0b24gZnJvbSAnQGFzc2V0cy9hZGQtYnV0dG9uLnBuZyc7XG5pbXBvcnQgJy4vSGVhZGVyLmNzcyc7XG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucm9sZSA9ICdiYW5uZXInO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZ25iJyk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxyXG4gICAgICA8aDEgY2xhc3M9XCJnbmJfX3RpdGxlIHRleHQtdGl0bGVcIj7soJDsi6wg662QIOuoueyngDwvaDE+XHJcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZ25iX19idXR0b25cIiBhcmlhLWxhYmVsPVwi7J2M7Iud7KCQIOy2lOqwgFwiPlxyXG4gICAgICAgIDxpbWcgc3JjPSR7QWRkQnV0dG9ufSBhbHQ9XCLsnYzsi53soJAg7LaU6rCAXCIgLz5cclxuICAgICAgPC9idXR0b24+YDtcbiAgICAgICAgKF9hID0gdGhpcy5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgKF9hID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc0xpc3QuYWRkKCdtb2RhbC0tb3BlbicpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2hlYWRlci1iYXInLCBIZWFkZXIsIHsgZXh0ZW5kczogJ2RpdicgfSk7XG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJleHBvcnQgY29uc3QgQ09ORElUSU9OUyA9IE9iamVjdC5mcmVlemUoe1xuICAgIERJU1RBTkNFUzogWzUsIDEwLCAxNSwgMjAsIDMwXSxcbiAgICBTT1JUX0NSSVRFUklPTjoge1xuICAgICAgICDsnbTrpoTsiJw6ICduYW1lJyxcbiAgICAgICAg6rGw66as7IicOiAnZGlzdGFuY2UnLFxuICAgIH0sXG59KTtcbmV4cG9ydCBjb25zdCBDQVRFR09SSUVTID0ge1xuICAgIO2VnOyLnTogJ2tvcmVhbicsXG4gICAg7KSR7IudOiAnY2hpbmVzZScsXG4gICAg7J287IudOiAnamFwYW5lc2UnLFxuICAgIOyVhOyLnOyViDogJ2FzaWFuJyxcbiAgICDslpHsi506ICd3ZXN0ZXJuJyxcbiAgICDquLDtg4A6ICdldGMnLFxufTtcbmV4cG9ydCBjb25zdCBDQVRFR09SSUVTX1dJVEhfQUxMID0gT2JqZWN0LmFzc2lnbih7IOyghOyytDogJ2FsbCcgfSwgQ0FURUdPUklFUyk7XG5leHBvcnQgY29uc3QgQ0FURUdPUklFU19XSVRIX0FMTF9LRVlTID0gT2JqZWN0LmtleXMoQ0FURUdPUklFU19XSVRIX0FMTCk7XG5leHBvcnQgY29uc3QgQ0FURUdPUklFU19LRVlTID0gT2JqZWN0LmtleXMoQ0FURUdPUklFUyk7XG5leHBvcnQgY29uc3QgU09SVF9DUklURVJJT05fS0VZUyA9IE9iamVjdC5rZXlzKENPTkRJVElPTlMuU09SVF9DUklURVJJT04pO1xuIiwiY2xhc3MgQmFzZUNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5zZXRFdmVudCgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7IH1cbiAgICBzZXRFdmVudCgpIHsgfVxuICAgIG9uKHNlbGVjdG9yLCB0eXBlLCBldmVudExpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50TGlzdGVuZXIpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJhc2VDb21wb25lbnQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VsZWN0Qm94LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VsZWN0Qm94LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfU2VsZWN0Qm94X2luc3RhbmNlcywgX1NlbGVjdEJveF90ZXh0cywgX1NlbGVjdEJveF9uYW1lLCBfU2VsZWN0Qm94X21ha2VPcHRpb25UYWdzO1xuaW1wb3J0ICcuL1NlbGVjdEJveC5jc3MnO1xuY2xhc3MgU2VsZWN0Qm94IGV4dGVuZHMgSFRNTFNlbGVjdEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlcyA9IFtdLCB0ZXh0cyA9IFtdLCBuYW1lID0gJycpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1NlbGVjdEJveF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICBfU2VsZWN0Qm94X3RleHRzLnNldCh0aGlzLCBbXSk7XG4gICAgICAgIF9TZWxlY3RCb3hfbmFtZS5zZXQodGhpcywgJycpO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfU2VsZWN0Qm94X3RleHRzLCB0ZXh0cywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9TZWxlY3RCb3hfbmFtZSwgbmFtZSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICBzZXQodmFsdWVzLCB0ZXh0cywgbmFtZSkge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfU2VsZWN0Qm94X3RleHRzLCB0ZXh0cywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9TZWxlY3RCb3hfbmFtZSwgbmFtZSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZXM6IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgdGV4dHM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlbGVjdEJveF90ZXh0cywgXCJmXCIpLFxuICAgICAgICAgICAgbmFtZXM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlbGVjdEJveF9uYW1lLCBcImZcIiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAncmVzdGF1cmFudC1maWx0ZXInO1xuICAgICAgICB0aGlzLm5hbWUgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWxlY3RCb3hfbmFtZSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmlkID0gYCR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VsZWN0Qm94X25hbWUsIFwiZlwiKX0tZmlsdGVyYDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VsZWN0Qm94X2luc3RhbmNlcywgXCJtXCIsIF9TZWxlY3RCb3hfbWFrZU9wdGlvblRhZ3MpLmNhbGwodGhpcyk7XG4gICAgfVxufVxuX1NlbGVjdEJveF90ZXh0cyA9IG5ldyBXZWFrTWFwKCksIF9TZWxlY3RCb3hfbmFtZSA9IG5ldyBXZWFrTWFwKCksIF9TZWxlY3RCb3hfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1NlbGVjdEJveF9tYWtlT3B0aW9uVGFncyA9IGZ1bmN0aW9uIF9TZWxlY3RCb3hfbWFrZU9wdGlvblRhZ3MoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBvcHRpb25UYWcgPSBuZXcgT3B0aW9uKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlbGVjdEJveF90ZXh0cywgXCJmXCIpW2ldLCB0aGlzLnZhbHVlc1tpXSk7XG4gICAgICAgIHRoaXMuYWRkKG9wdGlvblRhZyk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEJveDtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc2VsZWN0LWJveCcsIFNlbGVjdEJveCwgeyBleHRlbmRzOiAnc2VsZWN0JyB9KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9GaWx0ZXJDb250YWluZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9GaWx0ZXJDb250YWluZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0Q2F0ZWdvcnlCb3gsIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveCwgX0ZpbHRlckNvbnRhaW5lcl9yZXN0YXVyYW50TGlzdDtcbmltcG9ydCB7IENBVEVHT1JJRVNfV0lUSF9BTExfS0VZUywgU09SVF9DUklURVJJT05fS0VZUyB9IGZyb20gJ0AvY29uc3RhbnRzL0NvbmRpdGlvbic7XG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuLi9CYXNlQ29tcG9uZW50JztcbmltcG9ydCBTZWxlY3RCb3ggZnJvbSAnLi9TZWxlY3RCb3gnO1xuaW1wb3J0ICcuL0ZpbHRlckNvbnRhaW5lci5jc3MnO1xuY2xhc3MgRmlsdGVyQ29udGFpbmVyIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0Q2F0ZWdvcnlCb3guc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0ZpbHRlckNvbnRhaW5lcl9yZXN0YXVyYW50TGlzdC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRmlsdGVyQ29udGFpbmVyX3NlbGVjdENhdGVnb3J5Qm94LCBuZXcgU2VsZWN0Qm94KENBVEVHT1JJRVNfV0lUSF9BTExfS0VZUywgQ0FURUdPUklFU19XSVRIX0FMTF9LRVlTLCAnY2F0ZWdvcnknKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveCwgbmV3IFNlbGVjdEJveChTT1JUX0NSSVRFUklPTl9LRVlTLCBTT1JUX0NSSVRFUklPTl9LRVlTLCAnc29ydGluZycpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0ZpbHRlckNvbnRhaW5lcl9yZXN0YXVyYW50TGlzdCwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnQtbGlzdCcpLCBcImZcIik7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsdGVyQ29udGFpbmVyX3NlbGVjdENhdGVnb3J5Qm94LCBcImZcIikpO1xuICAgICAgICB0aGlzLmFwcGVuZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveCwgXCJmXCIpKTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4geyBjYXRlZ29yeTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsdGVyQ29udGFpbmVyX3NlbGVjdENhdGVnb3J5Qm94LCBcImZcIikudmFsdWUsIHNvcnRDcml0ZXJpYTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsdGVyQ29udGFpbmVyX3NlbGVjdFNvcnRCb3gsIFwiZlwiKS52YWx1ZSB9O1xuICAgIH1cbiAgICBzZXRFdmVudCgpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQucGFpbnQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RDYXRlZ29yeUJveCA9IG5ldyBXZWFrTWFwKCksIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveCA9IG5ldyBXZWFrTWFwKCksIF9GaWx0ZXJDb250YWluZXJfcmVzdGF1cmFudExpc3QgPSBuZXcgV2Vha01hcCgpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdmaWx0ZXItY29udGFpbmVyJywgRmlsdGVyQ29udGFpbmVyKTtcbmV4cG9ydCBkZWZhdWx0IEZpbHRlckNvbnRhaW5lcjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9CYXNpY01vZGFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQmFzaWNNb2RhbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX0Jhc2ljTW9kYWxfaW5zdGFuY2VzLCBfQmFzaWNNb2RhbF9iYWNrZHJvcCwgX0Jhc2ljTW9kYWxfbW9kYWxDb250YWluZXIsIF9CYXNpY01vZGFsX21ha2VCYWNrZHJvcCwgX0Jhc2ljTW9kYWxfbWFrZU1vZGFsQ29udGFpbmVyO1xuaW1wb3J0ICcuL0Jhc2ljTW9kYWwuY3NzJztcbmNsYXNzIEJhc2ljTW9kYWwgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9CYXNpY01vZGFsX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9CYXNpY01vZGFsX2JhY2tkcm9wLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQmFzaWNNb2RhbF9tb2RhbENvbnRhaW5lci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdtb2RhbCcpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IEFycmF5LmZyb20odGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwgPiAqJykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9CYXNpY01vZGFsX2JhY2tkcm9wLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9CYXNpY01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9CYXNpY01vZGFsX21ha2VCYWNrZHJvcCkuY2FsbCh0aGlzKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFwcGVuZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9CYXNpY01vZGFsX2JhY2tkcm9wLCBcImZcIikpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9CYXNpY01vZGFsX21vZGFsQ29udGFpbmVyLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9CYXNpY01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9CYXNpY01vZGFsX21ha2VNb2RhbENvbnRhaW5lcikuY2FsbCh0aGlzKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFwcGVuZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9CYXNpY01vZGFsX21vZGFsQ29udGFpbmVyLCBcImZcIikpO1xuICAgICAgICB0aGlzLmFwcGVuZEFsbChjaGlsZHJlbik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jhc2ljTW9kYWxfYmFja2Ryb3AsIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbCcpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtLW9wZW4nKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGVuZEFsbChjaGlsZHJlbikge1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQmFzaWNNb2RhbF9tb2RhbENvbnRhaW5lciwgXCJmXCIpLmFwcGVuZChjaGlsZCkpO1xuICAgIH1cbiAgICByZW1vdmVBbGwoKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jhc2ljTW9kYWxfbW9kYWxDb250YWluZXIsIFwiZlwiKS5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICB9XG4gICAgcmVwbGFjZUNoaWxkTm9kZXMoY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGwoKTtcbiAgICAgICAgdGhpcy5hcHBlbmRBbGwoY2hpbGRyZW4pO1xuICAgIH1cbiAgICBjbG9zZU1vZGFsKCkge1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLS1vcGVuJyk7XG4gICAgfVxuICAgIG9wZW5Nb2RhbCgpIHtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdtb2RhbC0tb3BlbicpO1xuICAgIH1cbn1cbl9CYXNpY01vZGFsX2JhY2tkcm9wID0gbmV3IFdlYWtNYXAoKSwgX0Jhc2ljTW9kYWxfbW9kYWxDb250YWluZXIgPSBuZXcgV2Vha01hcCgpLCBfQmFzaWNNb2RhbF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfQmFzaWNNb2RhbF9tYWtlQmFja2Ryb3AgPSBmdW5jdGlvbiBfQmFzaWNNb2RhbF9tYWtlQmFja2Ryb3AoKSB7XG4gICAgY29uc3QgYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBiYWNrZHJvcC5jbGFzc0xpc3QuYWRkKCdtb2RhbC1iYWNrZHJvcCcpO1xuICAgIGJhY2tkcm9wLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZU1vZGFsLmJpbmQodGhpcykpO1xuICAgIHJldHVybiBiYWNrZHJvcDtcbn0sIF9CYXNpY01vZGFsX21ha2VNb2RhbENvbnRhaW5lciA9IGZ1bmN0aW9uIF9CYXNpY01vZGFsX21ha2VNb2RhbENvbnRhaW5lcigpIHtcbiAgICBjb25zdCBtb2RhbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnY2xhc3MtY29udGFpbmVyJykpIHtcbiAgICAgICAgbW9kYWxDb250YWluZXIuY2xhc3NOYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NsYXNzLWNvbnRhaW5lcicpO1xuICAgIH1cbiAgICBtb2RhbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtb2RhbC1jb250YWluZXInKTtcbiAgICByZXR1cm4gbW9kYWxDb250YWluZXI7XG59O1xuZXhwb3J0IGRlZmF1bHQgQmFzaWNNb2RhbDtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYmFzaWMtbW9kYWwnLCBCYXNpY01vZGFsLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Jhc2ljQnV0dG9uLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Jhc2ljQnV0dG9uLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0Jhc2ljQnV0dG9uX2lzUHJpbWFyeTtcbmltcG9ydCBzdHlsZSBmcm9tICcuL0Jhc2ljQnV0dG9uLm1vZHVsZS5jc3MnO1xuY2xhc3MgQmFzaWNCdXR0b24gZXh0ZW5kcyBIVE1MQnV0dG9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc3R5bGVWYXJpYW50LCBpbm5lclRleHQsIHR5cGUsIGNsaWNrRXZlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX0Jhc2ljQnV0dG9uX2lzUHJpbWFyeS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgc3R5bGVWYXJpYW50ID0gc3R5bGVWYXJpYW50ICE9PSBudWxsICYmIHN0eWxlVmFyaWFudCAhPT0gdm9pZCAwID8gc3R5bGVWYXJpYW50IDogdGhpcy5nZXRBdHRyaWJ1dGUoJ3N0eWxlLXZhcmlhbnQnKTtcbiAgICAgICAgaW5uZXJUZXh0ID0gaW5uZXJUZXh0ICE9PSBudWxsICYmIGlubmVyVGV4dCAhPT0gdm9pZCAwID8gaW5uZXJUZXh0IDogdGhpcy5pbm5lclRleHQ7XG4gICAgICAgIHR5cGUgPSB0eXBlICE9PSBudWxsICYmIHR5cGUgIT09IHZvaWQgMCA/IHR5cGUgOiB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9CYXNpY0J1dHRvbl9pc1ByaW1hcnksIHN0eWxlVmFyaWFudCwgXCJmXCIpO1xuICAgICAgICB0aGlzLmlubmVyVGV4dCA9IGlubmVyVGV4dDtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCB0eXBlKTtcbiAgICAgICAgY29uc3QgYnV0dG9uU3R5bGVDbGFzcyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jhc2ljQnV0dG9uX2lzUHJpbWFyeSwgXCJmXCIpID09PSAncHJpbWFyeSdcbiAgICAgICAgICAgID8gWydidXR0b24tLXByaW1hcnknLCBgJHtzdHlsZS5idXR0b25QcmltYXJ5fWBdXG4gICAgICAgICAgICA6IFsnYnV0dG9uLS1zZWNvbmRhcnknLCBgJHtzdHlsZS5idXR0b25TZWNvbmRhcnl9YF07XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYnV0dG9uJywgYCR7c3R5bGUuYnV0dG9ufWAsICd0ZXh0LWNhcHRpb24nKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKC4uLmJ1dHRvblN0eWxlQ2xhc3MpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY2xpY2tFdmVudCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVuZGVyKCkgeyB9XG59XG5fQmFzaWNCdXR0b25faXNQcmltYXJ5ID0gbmV3IFdlYWtNYXAoKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYmFzaWMtYnV0dG9uJywgQmFzaWNCdXR0b24sIHsgZXh0ZW5kczogJ2J1dHRvbicgfSk7XG5leHBvcnQgZGVmYXVsdCBCYXNpY0J1dHRvbjtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZvcml0ZS1pY29uLWZpbGxlZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2b3JpdGUtaWNvbi1saW5lZC5wbmdcIjsiLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRmF2b3JpdGVJY29uX2luc3RhbmNlcywgX0Zhdm9yaXRlSWNvbl9zZXRFdmVudDtcbmltcG9ydCBmYXZvcml0ZUljb25GaWxsZWQgZnJvbSAnQGFzc2V0cy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmcnO1xuaW1wb3J0IGZhdm9yaXRlSWNvbkxpbmVkIGZyb20gJ0Bhc3NldHMvZmF2b3JpdGUtaWNvbi1saW5lZC5wbmcnO1xuY2xhc3MgRmF2b3JpdGVJY29uIGV4dGVuZHMgSFRNTEltYWdlRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9GYXZvcml0ZUljb25faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdjbGlja2FibGUnKTtcbiAgICAgICAgdGhpcy5zcmMgPSBmYXZvcml0ZUljb25MaW5lZDtcbiAgICAgICAgdGhpcy5hbHQgPSAn7KaQ6rKo7LC+6riwIOyVhOydtOy9mCc7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgJ29mZicpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZUljb25faW5zdGFuY2VzLCBcIm1cIiwgX0Zhdm9yaXRlSWNvbl9zZXRFdmVudCkuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2NsaWNrZWQnKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09ICdvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IGZhdm9yaXRlSWNvbkZpbGxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID09PSAnb2ZmJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3JjID0gZmF2b3JpdGVJY29uTGluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNGYXZvcml0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCdjbGlja2VkJykgPT09ICdvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldChpc0Zhdm9yaXRlKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgaXNGYXZvcml0ZSA/ICdvbicgOiAnb2ZmJyk7XG4gICAgfVxuICAgIG9uKCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY2xpY2tlZCcsICdvbicpO1xuICAgIH1cbiAgICBvZmYoKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgJ29mZicpO1xuICAgIH1cbiAgICBpc09uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NsaWNrZWQnKSA9PT0gJ29uJztcbiAgICB9XG59XG5fRmF2b3JpdGVJY29uX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9GYXZvcml0ZUljb25fc2V0RXZlbnQgPSBmdW5jdGlvbiBfRmF2b3JpdGVJY29uX3NldEV2ZW50KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnY2xpY2tlZCcpID09PSAnb2ZmJykge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NsaWNrZWQnLCAnb24nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgJ29mZicpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuRmF2b3JpdGVJY29uLm9ic2VydmVkQXR0cmlidXRlcyA9IFsnY2xpY2tlZCddO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdmYXZvcml0ZS1pY29uJywgRmF2b3JpdGVJY29uLCB7IGV4dGVuZHM6ICdpbWcnIH0pO1xuZXhwb3J0IGRlZmF1bHQgRmF2b3JpdGVJY29uO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9WZXJ0aWNhbElucHV0Qm94X25hbWUsIF9WZXJ0aWNhbElucHV0Qm94X2lucHV0LCBfVmVydGljYWxJbnB1dEJveF9oZWxwLCBfVmVydGljYWxJbnB1dEJveF9lcnJvcjtcbmNsYXNzIFZlcnRpY2FsSW5wdXRCb3ggZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XG4gICAgICAgIHRoaXMuaWROYW1lID0gJyc7XG4gICAgICAgIHRoaXMuaGFzVmVyaWZpY2F0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZXF1aXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhlbHBUZXh0ID0gJyc7XG4gICAgICAgIF9WZXJ0aWNhbElucHV0Qm94X25hbWUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9WZXJ0aWNhbElucHV0Qm94X2lucHV0LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfVmVydGljYWxJbnB1dEJveF9oZWxwLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfVmVydGljYWxJbnB1dEJveF9lcnJvci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdpbnB1dC1ib3gnKTtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXHJcbiAgICA8bGFiZWwgY2xhc3M9XCJ0ZXh0LWNhcHRpb25cIj48L2xhYmVsPlxyXG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIlwiICBpZD1cIlwiIC8+XHJcbiAgICA8c3BhbiBjbGFzcz1cImhlbHAtdGV4dCB0ZXh0LWNhcHRpb25cIj48L3NwYW4+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZXJyb3IgaW52aXNpYmxlXCI+PC9zcGFuPmA7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1ZlcnRpY2FsSW5wdXRCb3hfbmFtZSwgdGhpcy5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiBsYWJlbCcpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1ZlcnRpY2FsSW5wdXRCb3hfaW5wdXQsIHRoaXMucXVlcnlTZWxlY3RvcignOnNjb3BlID4gaW5wdXQnKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9WZXJ0aWNhbElucHV0Qm94X2hlbHAsIHRoaXMucXVlcnlTZWxlY3RvcignOnNjb3BlID4gc3BhbicpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1ZlcnRpY2FsSW5wdXRCb3hfZXJyb3IsIHRoaXMucXVlcnlTZWxlY3RvcignOnNjb3BlID4gLmVycm9yJyksIFwiZlwiKTtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpbnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaW50KCk7XG4gICAgfVxuICAgIHNldFN0YXRlKHByb3BzKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgaWROYW1lLCBjbGFzc0xpc3QsIGhhc1ZlcmlmaWNhdGlvbiwgaXNSZXF1aXJlZCwgaGVscFRleHQgfSA9IHByb3BzO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHZvaWQgMCA/IG5hbWUgOiAnJztcbiAgICAgICAgdGhpcy5pZE5hbWUgPSBpZE5hbWUgIT09IG51bGwgJiYgaWROYW1lICE9PSB2b2lkIDAgPyBpZE5hbWUgOiAnJztcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKC4uLihjbGFzc0xpc3QgIT09IG51bGwgJiYgY2xhc3NMaXN0ICE9PSB2b2lkIDAgPyBjbGFzc0xpc3QgOiBbXSkpO1xuICAgICAgICB0aGlzLmhhc1ZlcmlmaWNhdGlvbiA9IGhhc1ZlcmlmaWNhdGlvbiAhPT0gbnVsbCAmJiBoYXNWZXJpZmljYXRpb24gIT09IHZvaWQgMCA/IGhhc1ZlcmlmaWNhdGlvbiA6IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUmVxdWlyZWQgPSBpc1JlcXVpcmVkICE9PSBudWxsICYmIGlzUmVxdWlyZWQgIT09IHZvaWQgMCA/IGlzUmVxdWlyZWQgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5oZWxwVGV4dCA9IGhlbHBUZXh0ICE9PSBudWxsICYmIGhlbHBUZXh0ICE9PSB2b2lkIDAgPyBoZWxwVGV4dCA6ICcnO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taXRlbScpO1xuICAgICAgICBpZiAodGhpcy5pc1JlcXVpcmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taXRlbS0tcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaW50KCk7XG4gICAgfVxuICAgIHByaW50KCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WZXJ0aWNhbElucHV0Qm94X25hbWUsIFwiZlwiKS5odG1sRm9yID0gYCR7dGhpcy5pZE5hbWV9IHRleHQtY2FwdGlvbmA7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1ZlcnRpY2FsSW5wdXRCb3hfbmFtZSwgXCJmXCIpLmlubmVyVGV4dCA9IHRoaXMubmFtZTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVmVydGljYWxJbnB1dEJveF9pbnB1dCwgXCJmXCIpLm5hbWUgPSB0aGlzLmlkTmFtZTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVmVydGljYWxJbnB1dEJveF9pbnB1dCwgXCJmXCIpLmlkID0gdGhpcy5pZE5hbWU7XG4gICAgICAgIGlmICh0aGlzLmhlbHBUZXh0KSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WZXJ0aWNhbElucHV0Qm94X2hlbHAsIFwiZlwiKS5pbm5lclRleHQgPSB0aGlzLmhlbHBUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1ZlcmlmaWNhdGlvbikge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVmVydGljYWxJbnB1dEJveF9lcnJvciwgXCJmXCIpLmlubmVyVGV4dCA9IGAke3RoaXMubmFtZX0g6rCS7J2AIO2VhOyImCDsnoXroKXsnoXri4jri6QuYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvY2N1ckVycm9yKCkgeyB9XG59XG5fVmVydGljYWxJbnB1dEJveF9uYW1lID0gbmV3IFdlYWtNYXAoKSwgX1ZlcnRpY2FsSW5wdXRCb3hfaW5wdXQgPSBuZXcgV2Vha01hcCgpLCBfVmVydGljYWxJbnB1dEJveF9oZWxwID0gbmV3IFdlYWtNYXAoKSwgX1ZlcnRpY2FsSW5wdXRCb3hfZXJyb3IgPSBuZXcgV2Vha01hcCgpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCd2ZXJ0aWNhbC1pbnB1dC1ib3gnLCBWZXJ0aWNhbElucHV0Qm94LCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgVmVydGljYWxJbnB1dEJveDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1rb3JlYW4ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWFzaWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1qYXBhbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktY2hpbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktd2VzdGVybi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktZXRjLnBuZ1wiOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DYXRlZ29yeUljb24ubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2F0ZWdvcnlJY29uLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQga29yZWFuSWNvbiBmcm9tICdAYXNzZXRzL2NhdGVnb3J5LWtvcmVhbi5wbmcnO1xuaW1wb3J0IGFzaWFuSWNvbiBmcm9tICdAYXNzZXRzL2NhdGVnb3J5LWFzaWFuLnBuZyc7XG5pbXBvcnQgamFwYW5lc2VJY29uIGZyb20gJ0Bhc3NldHMvY2F0ZWdvcnktamFwYW5lc2UucG5nJztcbmltcG9ydCBjaGluZXNlSWNvbiBmcm9tICdAYXNzZXRzL2NhdGVnb3J5LWNoaW5lc2UucG5nJztcbmltcG9ydCB3ZXN0ZXJuSWNvbiBmcm9tICdAYXNzZXRzL2NhdGVnb3J5LXdlc3Rlcm4ucG5nJztcbmltcG9ydCBldGNJY29uIGZyb20gJ0Bhc3NldHMvY2F0ZWdvcnktZXRjLnBuZyc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9DYXRlZ29yeUljb24ubW9kdWxlLmNzcyc7XG5leHBvcnQgY29uc3QgSWNvbnMgPSB7XG4gICAg7ZWc7IudOiBrb3JlYW5JY29uLFxuICAgIOyVhOyLnOyViDogYXNpYW5JY29uLFxuICAgIOydvOyLnTogamFwYW5lc2VJY29uLFxuICAgIOykkeyLnTogY2hpbmVzZUljb24sXG4gICAg7JaR7IudOiB3ZXN0ZXJuSWNvbixcbiAgICDquLDtg4A6IGV0Y0ljb24sXG59O1xuY2xhc3MgQ2F0ZWdvcnlJY29uIGV4dGVuZHMgSFRNTEltYWdlRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoY2F0ZWdvcnkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCFjYXRlZ29yeSkge1xuICAgICAgICAgICAgY2F0ZWdvcnkgPSB0aGlzLmdldEF0dHJpYnV0ZSgnY2F0ZWdvcnknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGBjYXRlZ29yeS1pY29uICR7c3R5bGUuY2F0ZWdvcnlJY29ufWA7XG4gICAgICAgIHRoaXMuc3JjID0gSWNvbnNbY2F0ZWdvcnldO1xuICAgICAgICB0aGlzLmFsdCA9IGNhdGVnb3J5O1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnY2F0ZWdvcnktaWNvbicsIENhdGVnb3J5SWNvbiwgeyBleHRlbmRzOiAnaW1nJyB9KTtcbmV4cG9ydCBkZWZhdWx0IENhdGVnb3J5SWNvbjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50Q2F0ZWdvcnlJY29uLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRDYXRlZ29yeUljb24ubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBzdHlsZSBmcm9tICcuL1Jlc3RhdXJhbnRDYXRlZ29yeUljb24ubW9kdWxlLmNzcyc7XG5pbXBvcnQgQ2F0ZWdvcnlJY29uIGZyb20gJy4vQ2F0ZWdvcnlJY29uJztcbmNsYXNzIFJlc3RhdXJhbnRDYXRlZ29yeUljb24gZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gYHJlc3RhdXJhbnRfX2NhdGVnb3J5ICR7c3R5bGUucmVzdGF1cmFudF9fY2F0ZWdvcnl9YDtcbiAgICB9XG4gICAgc2V0Q2F0ZWdvcnkoY2F0ZWdvcnkpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlQ2hpbGRyZW4obmV3IENhdGVnb3J5SWNvbihjYXRlZ29yeSkpO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncmVzdGF1cmFudC1jYXRlZ29yeS1pY29uJywgUmVzdGF1cmFudENhdGVnb3J5SWNvbiwgeyBleHRlbmRzOiAnZGl2JyB9KTtcbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRDYXRlZ29yeUljb247XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudF9pbnN0YW5jZXMsIF9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVEZXNjcmlwdGlvbjtcbmNsYXNzIFJlc3RhdXJhbnQge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnRBcmdzKSB7XG4gICAgICAgIF9SZXN0YXVyYW50X2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHJlc3RhdXJhbnRBcmdzLm5hbWU7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSByZXN0YXVyYW50QXJncy5kaXN0YW5jZTtcbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9IHJlc3RhdXJhbnRBcmdzLmNhdGVnb3J5O1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcmVzdGF1cmFudEFyZ3MuZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubGluayA9IHJlc3RhdXJhbnRBcmdzLmxpbms7XG4gICAgICAgIHRoaXMuaXNGYXZvcml0ZSA9IHJlc3RhdXJhbnRBcmdzLmlzRmF2b3JpdGU7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50X2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb24pLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZGlzdGFuY2U6IHRoaXMuZGlzdGFuY2UsXG4gICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdC5kZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGluaykge1xuICAgICAgICAgICAgcmVzdWx0LmxpbmsgPSB0aGlzLmxpbms7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNGYXZvcml0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQuaXNGYXZvcml0ZSA9IHRoaXMuaXNGYXZvcml0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpc0VxdWFsKGFub3RoZXIpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm5hbWUgPT09IGFub3RoZXIubmFtZSAmJlxuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZSA9PT0gYW5vdGhlci5kaXN0YW5jZSAmJlxuICAgICAgICAgICAgdGhpcy5jYXRlZ29yeSA9PT0gYW5vdGhlci5jYXRlZ29yeSk7XG4gICAgfVxufVxuX1Jlc3RhdXJhbnRfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lKCkge1xuICAgIGlmICghdGhpcy5uYW1lLmxlbmd0aCB8fCB0aGlzLm5hbWUubGVuZ3RoID4gMjApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRVJST1JdIOydtOumhOydmCDquLjsnbTripQgMX4yMOyekCDsl6zslbwg7ZWp64uI64ukLicpO1xuICAgIH1cbn0sIF9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBfUmVzdGF1cmFudF92YWxpZGF0ZURlc2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uICYmIHRoaXMuZGVzY3JpcHRpb24ubGVuZ3RoID4gNTAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW0VSUk9SXSDsnYzsi53soJAg7ISk66qFIOq4uOydtOuKlCA1MDDsnpDrpbwg7LSI6rO87ZWgIOyImCDsl4bsirXri4jri6QuJyk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnQ7XG4iLCJpbXBvcnQgUmVzdGF1cmFudCBmcm9tICcuL1Jlc3RhdXJhbnQnO1xuY2xhc3MgUmVzdGF1cmFudENvbGxlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIHRoaXMucmVzdGF1cmFudExpc3QgPSByZXN0YXVyYW50cy5tYXAoKHJlc3RhdXJhbnQpID0+IG5ldyBSZXN0YXVyYW50KHJlc3RhdXJhbnQpKTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50TGlzdC5tYXAoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuZ2V0KCkpO1xuICAgIH1cbiAgICBmaWx0ZXJCeUNhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgICAgIGlmIChjYXRlZ29yeSA9PT0gJ+yghOyytCcpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50TGlzdC5tYXAoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuZ2V0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50TGlzdFxuICAgICAgICAgICAgLm1hcCgocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5nZXQoKSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuY2F0ZWdvcnkgPT09IGNhdGVnb3J5KTtcbiAgICB9XG4gICAgc29ydChzb3J0Q3JpdGVyaWEpIHtcbiAgICAgICAgaWYgKHNvcnRDcml0ZXJpYSA9PT0gJ+ydtOumhOyInCcpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3J0QnlOYW1lKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRCeURpc3RhbmNlKCk7XG4gICAgfVxuICAgIHNvcnRCeU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RhdXJhbnRMaXN0XG4gICAgICAgICAgICAubWFwKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmdldCgpKVxuICAgICAgICAgICAgLnRvU29ydGVkKChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKTtcbiAgICB9XG4gICAgc29ydEJ5RGlzdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RhdXJhbnRMaXN0XG4gICAgICAgICAgICAubWFwKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmdldCgpKVxuICAgICAgICAgICAgLnRvU29ydGVkKChhLCBiKSA9PiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSk7XG4gICAgfVxuICAgIGFkZFJlc3RhdXJhbnQocmVzdGF1cmFudEFyZykge1xuICAgICAgICBpZiAodGhpcy5oYXMocmVzdGF1cmFudEFyZykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW0VSUk9SXSDsnbTrr7gg7KG07J6s7ZWY64qUIOydjOyLneygkOyeheuLiOuLpC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc3RhdXJhbnRMaXN0LnB1c2gobmV3IFJlc3RhdXJhbnQocmVzdGF1cmFudEFyZykpO1xuICAgIH1cbiAgICBoYXMobmV3UmVzdGF1cmFudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50TGlzdC5zb21lKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmlzRXF1YWwobmV3UmVzdGF1cmFudCkpO1xuICAgIH1cbiAgICByZW1vdmUobmV3UmVzdGF1cmFudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50TGlzdC5maWx0ZXIoKHJlc3RhdXJhbnQpID0+ICFyZXN0YXVyYW50LmlzRXF1YWwobmV3UmVzdGF1cmFudCkpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRDb2xsZWN0aW9uO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWSwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfcmVzdGF1cmFudENvbGxlY3Rpb247XG5pbXBvcnQgUmVzdGF1cmFudENvbGxlY3Rpb24gZnJvbSAnLi4vZW50aXRpZXMvUmVzdGF1cmFudENvbGxlY3Rpb24nO1xuY2xhc3MgUmVzdGF1cmFudERCU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIF9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWS5zZXQodGhpcywgJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAgIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLnNldCh0aGlzLCBuZXcgUmVzdGF1cmFudENvbGxlY3Rpb24oW10pKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERCU2VydmljZV9yZXN0YXVyYW50Q29sbGVjdGlvbiwgXCJmXCIpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBnZXRGcm9tUmVzdGF1cmFudExpc3QoY2F0ZWdvcnksIHNvcnRDcml0ZXJpYSkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBjb25zdCByZXN0YXVyYW50cyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfcmVzdGF1cmFudENvbGxlY3Rpb24sIFwiZlwiKS5maWx0ZXJCeUNhdGVnb3J5KGNhdGVnb3J5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN0YXVyYW50Q29sbGVjdGlvbihyZXN0YXVyYW50cykuc29ydChzb3J0Q3JpdGVyaWEpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUmVzdGF1cmFudHMgPSB0aGlzLmdldCgpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLCBuZXcgUmVzdGF1cmFudENvbGxlY3Rpb24oZXhpc3RpbmdSZXN0YXVyYW50cyksIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKChfYSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfUkVTVEFVUkFOVFNfREJfS0VZLCBcImZcIikpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnW10nKTtcbiAgICB9XG4gICAgc2V0KGRhdGEpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERCU2VydmljZV9SRVNUQVVSQU5UU19EQl9LRVksIFwiZlwiKSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cbiAgICBhZGQocmVzdGF1cmFudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLCBcImZcIikuYWRkUmVzdGF1cmFudChyZXN0YXVyYW50KTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERCU2VydmljZV9SRVNUQVVSQU5UU19EQl9LRVksIFwiZlwiKSwgSlNPTi5zdHJpbmdpZnkoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERCU2VydmljZV9yZXN0YXVyYW50Q29sbGVjdGlvbiwgXCJmXCIpLmdldCgpKSk7XG4gICAgfVxuICAgIHJlbW92ZShyZXN0YXVyYW50KSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfUkVTVEFVUkFOVFNfREJfS0VZLCBcImZcIiksIEpTT04uc3RyaW5naWZ5KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfcmVzdGF1cmFudENvbGxlY3Rpb24sIFwiZlwiKS5yZW1vdmUocmVzdGF1cmFudCkpKTtcbiAgICB9XG59XG5fUmVzdGF1cmFudERCU2VydmljZV9SRVNUQVVSQU5UU19EQl9LRVkgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudERCU2VydmljZV9yZXN0YXVyYW50Q29sbGVjdGlvbiA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50REJTZXJ2aWNlO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5LCBfUmVzdGF1cmFudEl0ZW1fZGlzdGFuY2UsIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiwgX1Jlc3RhdXJhbnRJdGVtX25hbWUsIF9SZXN0YXVyYW50SXRlbV9saW5rLCBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSwgX1Jlc3RhdXJhbnRJdGVtX2Zhdm9yaXRlSWNvbiwgX1Jlc3RhdXJhbnRJdGVtX3Nob3dEZXRhaWxMaXN0ZW5lcjtcbmltcG9ydCBzdHlsZSBmcm9tICcuL1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3MnO1xuY2xhc3MgUmVzdGF1cmFudEl0ZW0gZXh0ZW5kcyBIVE1MTElFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3J5LCBuYW1lLCBkaXN0YW5jZSwgZGVzY3JpcHRpb24sIGxpbmssIGlzRmF2b3JpdGUgfSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fZGlzdGFuY2Uuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX25hbWUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9saW5rLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2Zhdm9yaXRlSWNvbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fY2F0ZWdvcnksIGNhdGVnb3J5LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX25hbWUsIG5hbWUsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fZGlzdGFuY2UsIGRpc3RhbmNlLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2Rlc2NyaXB0aW9uLCBkZXNjcmlwdGlvbiAhPT0gbnVsbCAmJiBkZXNjcmlwdGlvbiAhPT0gdm9pZCAwID8gZGVzY3JpcHRpb24gOiAnJywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9saW5rLCBsaW5rICE9PSBudWxsICYmIGxpbmsgIT09IHZvaWQgMCA/IGxpbmsgOiAnJywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pc0Zhdm9yaXRlLCBpc0Zhdm9yaXRlICE9PSBudWxsICYmIGlzRmF2b3JpdGUgIT09IHZvaWQgMCA/IGlzRmF2b3JpdGUgOiBmYWxzZSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChgcmVzdGF1cmFudGAsIGAke3N0eWxlLnJlc3RhdXJhbnR9YCk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxyXG4gICAgPGRpdiBpcz1cInJlc3RhdXJhbnQtY2F0ZWdvcnktaWNvblwiPiA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50X19pbmZvICR7c3R5bGUucmVzdGF1cmFudF9faW5mb31cIj5cclxuICAgIDxoMyBjbGFzcz1cInJlc3RhdXJhbnRfX25hbWUgdGV4dC1zdWJ0aXRsZSAke3N0eWxlLnJlc3RhdXJhbnRfX25hbWV9XCI+PC9oMz5cclxuICAgIDxzcGFuIGNsYXNzPVwicmVzdGF1cmFudF9fZGlzdGFuY2UgdGV4dC1ib2R5ICAke3N0eWxlLnJlc3RhdXJhbnRfX2Rpc3RhbmNlfVwiPjwvc3Bhbj5cclxuICAgIDxwIGNsYXNzPVwicmVzdGF1cmFudF9fZGVzY3JpcHRpb24gdGV4dC1ib2R5ICR7c3R5bGUucmVzdGF1cmFudF9fZGVzY3JpcHRpb259XCI+XHJcbiAgICA8L3A+XHJcbiAgICA8aW1nIGlzPVwiZmF2b3JpdGUtaWNvblwiIGNsYXNzPVwiZmF2b3JpdGUtaWNvblwiIHN0eWxlPVwid2lkdGg6MjZweDsgcG9zaXRpb246YWJzb2x1dGU7IHJpZ2h0OjEwcHg7IHRvcDoxMHB4O1wiLz5cclxuICAgIDwvZGl2PlxyXG4gICBgO1xuICAgIH1cbiAgICBwYWludCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2Rpdltpcz1cInJlc3RhdXJhbnQtY2F0ZWdvcnktaWNvblwiXScpLnNldENhdGVnb3J5KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5LCBcImZcIikpO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19uYW1lJykudGV4dENvbnRlbnQgPSBgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9uYW1lLCBcImZcIil9YDtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fZGlzdGFuY2UnKS50ZXh0Q29udGVudCA9IGDsuqDtjbzsiqTrtoDthLAgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9kaXN0YW5jZSwgXCJmXCIpfeu2hCDrgrRgO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19kZXNjcmlwdGlvbicpLnRleHRDb250ZW50ID0gYCR7KF9hID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fZGVzY3JpcHRpb24sIFwiZlwiKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyd9YDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fZmF2b3JpdGVJY29uLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2ltZ1tpcz1cImZhdm9yaXRlLWljb25cIl0nKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9mYXZvcml0ZUljb24sIFwiZlwiKS5zZXQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSwgXCJmXCIpKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9zaG93RGV0YWlsTGlzdGVuZXIpLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeSwgXCJmXCIpLFxuICAgICAgICAgICAgbmFtZTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fbmFtZSwgXCJmXCIpLFxuICAgICAgICAgICAgZGlzdGFuY2U6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2Rpc3RhbmNlLCBcImZcIiksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fZGVzY3JpcHRpb24sIFwiZlwiKSxcbiAgICAgICAgICAgIGxpbms6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2xpbmssIFwiZlwiKSxcbiAgICAgICAgICAgIGlzRmF2b3JpdGU6IChfYSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2Zhdm9yaXRlSWNvbiwgXCJmXCIpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNGYXZvcml0ZSgpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbl9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9kaXN0YW5jZSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9uYW1lID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtX2xpbmsgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9mYXZvcml0ZUljb24gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRJdGVtX3Nob3dEZXRhaWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9zaG93RGV0YWlsTGlzdGVuZXIoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Zhdm9yaXRlLWljb24nKSkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1hcHAtbmV3JykucGFpbnREZXRhaWxNb2RhbCh0aGlzLmdldCgpKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudEl0ZW07XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Jlc3RhdXJhbnQtaXRlbScsIFJlc3RhdXJhbnRJdGVtLCB7IGV4dGVuZHM6ICdsaScgfSk7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudExpc3QuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50TGlzdC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcywgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCBfUmVzdGF1cmFudExpc3RfcmVtb3ZlQ2hpbGRyZW47XG5pbXBvcnQgUmVzdGF1cmFudERCU2VydmljZSBmcm9tICdAL2RvbWFpbnMvc2VydmljZXMvUmVzdGF1cmFudERCU2VydmljZSc7XG5pbXBvcnQgUmVzdGF1cmFudEl0ZW0gZnJvbSAnLi9SZXN0YXVyYW50SXRlbSc7XG5pbXBvcnQgJy4vUmVzdGF1cmFudExpc3QuY3NzJztcbmltcG9ydCBGYXZvcml0ZUljb24gZnJvbSAnLi4vQmFzaWMvRmF2b3JpdGVJY29uJztcbmltcG9ydCBSZXN0YXVyYW50IGZyb20gJ0AvZG9tYWlucy9lbnRpdGllcy9SZXN0YXVyYW50JztcbmNsYXNzIFJlc3RhdXJhbnRMaXN0IGV4dGVuZHMgSFRNTFVMaXN0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgncmVzdGF1cmFudC1saXN0Jyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCBbXSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEZhdm9yaXRlSWNvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3RhdXJhbnRzID0gbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKS5nZXQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gKChfYSA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFyZW50RWxlbWVudCkuZ2V0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3UmVzdGF1cmFudHMgPSByZXN0YXVyYW50cy5tYXAoKHJlc3RhdXJhbnQpID0+IG5ldyBSZXN0YXVyYW50KGNoYW5nZWQpLmlzRXF1YWwocmVzdGF1cmFudCkgPyBjaGFuZ2VkIDogcmVzdGF1cmFudCk7XG4gICAgICAgICAgICAgICAgbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKS5zZXQobmV3UmVzdGF1cmFudHMpO1xuICAgICAgICAgICAgICAgICgoX2IgPSB0aGlzLnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wYXJlbnRFbGVtZW50KS5wYWludCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcGFpbnQocmVzdGF1cmFudHMpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIHJlc3RhdXJhbnRzLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50TGlzdF9yZW1vdmVDaGlsZHJlbikuY2FsbCh0aGlzKTtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudExpc3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cywgXCJmXCIpLm1hcCgocmVzdGF1cmFudCkgPT4gbmV3IFJlc3RhdXJhbnRJdGVtKHJlc3RhdXJhbnQpKTtcbiAgICAgICAgcmVzdGF1cmFudExpc3QuZm9yRWFjaCgocmVzdGF1cmFudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQocmVzdGF1cmFudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pLm1hcCgocmVzdGF1cmFudEl0ZW0pID0+IHJlc3RhdXJhbnRJdGVtLmdldCgpKTtcbiAgICB9XG59XG5fUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRMaXN0X3JlbW92ZUNoaWxkcmVuID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRMaXN0X3JlbW92ZUNoaWxkcmVuKCkge1xuICAgIHdoaWxlICh0aGlzLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCh0aGlzLmZpcnN0Q2hpbGQpO1xuICAgIH1cbn07XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Jlc3RhdXJhbnQtbGlzdCcsIFJlc3RhdXJhbnRMaXN0LCB7IGV4dGVuZHM6ICd1bCcgfSk7XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50TGlzdDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50SXRlbURldGFpbC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50SXRlbURldGFpbC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9SZXN0YXVyYW50SXRlbURldGFpbF9pbnN0YW5jZXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9jYXRlZ29yeSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX25hbWUsIF9SZXN0YXVyYW50SXRlbURldGFpbF9kaXN0YW5jZSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rlc2NyaXB0aW9uLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbGluaywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2lzRmF2b3JpdGUsIF9SZXN0YXVyYW50SXRlbURldGFpbF9mYXZvcml0ZUljb25EQkxpc3RlbmVyO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vUmVzdGF1cmFudEl0ZW1EZXRhaWwubW9kdWxlLmNzcyc7XG5pbXBvcnQgUmVzdGF1cmFudERCU2VydmljZSBmcm9tICdAL2RvbWFpbnMvc2VydmljZXMvUmVzdGF1cmFudERCU2VydmljZSc7XG5pbXBvcnQgUmVzdGF1cmFudCBmcm9tICdAL2RvbWFpbnMvZW50aXRpZXMvUmVzdGF1cmFudCc7XG5pbXBvcnQgQmFzaWNCdXR0b24gZnJvbSAnLi4vQmFzaWMvQmFzaWNCdXR0b24nO1xuY2xhc3MgUmVzdGF1cmFudEl0ZW1EZXRhaWwgZXh0ZW5kcyBIVE1MTElFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2NhdGVnb3J5LnNldCh0aGlzLCAn6riw7YOAJyk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbURldGFpbF9uYW1lLnNldCh0aGlzLCAn67mIIOydtOumhCcpO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGlzdGFuY2Uuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbURldGFpbF9kZXNjcmlwdGlvbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2xpbmsuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbURldGFpbF9pc0Zhdm9yaXRlLnNldCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudGVtcGxhdGUoKTtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRTdGF0ZSh7IGNhdGVnb3J5LCBuYW1lLCBkaXN0YW5jZSwgZGVzY3JpcHRpb24sIGxpbmssIGlzRmF2b3JpdGUgfSkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9jYXRlZ29yeSwgY2F0ZWdvcnksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbmFtZSwgbmFtZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9kaXN0YW5jZSwgZGlzdGFuY2UsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGVzY3JpcHRpb24sIGRlc2NyaXB0aW9uICE9PSBudWxsICYmIGRlc2NyaXB0aW9uICE9PSB2b2lkIDAgPyBkZXNjcmlwdGlvbiA6ICcnLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2xpbmssIGxpbmsgIT09IG51bGwgJiYgbGluayAhPT0gdm9pZCAwID8gbGluayA6ICcnLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2lzRmF2b3JpdGUsIGlzRmF2b3JpdGUgIT09IG51bGwgJiYgaXNGYXZvcml0ZSAhPT0gdm9pZCAwID8gaXNGYXZvcml0ZSA6IGZhbHNlLCBcImZcIik7XG4gICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChgcmVzdGF1cmFudC1pdGVtLWRldGFpbGAsIGAke3N0eWxlLnJlc3RhdXJhbnR9YCk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxyXG4gICAgPGRpdiBjbGFzcz1cInJlc3RhdXJhbnQtY29udGVudCAke3N0eWxlLnJlc3RhdXJhbnRDb250ZW50fVwiPlxyXG4gICAgICA8ZGl2IGlzPVwicmVzdGF1cmFudC1jYXRlZ29yeS1pY29uXCI+IDwvZGl2PlxyXG4gICAgICA8aDMgY2xhc3M9XCJyZXN0YXVyYW50X19uYW1lIHRleHQtc3VidGl0bGUgJHtzdHlsZS5yZXN0YXVyYW50X19uYW1lfVwiPjwvaDM+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwicmVzdGF1cmFudF9fZGlzdGFuY2UgdGV4dC1ib2R5ICR7c3R5bGUucmVzdGF1cmFudF9fZGlzdGFuY2V9XCI+PC9zcGFuPlxyXG4gICAgICA8cCBjbGFzcz1cInJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHRleHQtYm9keSAke3N0eWxlLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9ufVwiPjwvcD5cclxuICAgICAgPGEgY2xhc3M9XCJyZXN0YXVyYW50X19saW5rIHRleHQtYm9keSAke3N0eWxlLnJlc3RhdXJhbnRfX2xpbmt9XCI+PC9hPlxyXG4gICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50X19idXR0b24tY29udGFpbmVyICR7c3R5bGUucmVzdGF1cmFudF9fYnV0dG9uQ29udGFpbmVyfVwiID4gPC9kaXY+XHJcbiAgICAgIDxpbWcgaXM9XCJmYXZvcml0ZS1pY29uXCIgY2xhc3M9XCJyZXN0YXVyYW50X19mYXZvcml0ZS1pY29uXCIgc3R5bGU9XCJ3aWR0aDoyNXB4OyBwb3NpdGlvbjphYnNvbHV0ZTsgcmlnaHQ6MTBweDsgdG9wOjEwcHg7XCIvPlxyXG5cclxuICAgICBgO1xuICAgICAgICBjb25zdCAkYnV0dG9uQm94ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fYnV0dG9uLWNvbnRhaW5lcicpO1xuICAgICAgICAkYnV0dG9uQm94LmFwcGVuZChuZXcgQmFzaWNCdXR0b24oJ3NlY29uZGFyeScsICfsgq3soJztlZjquLAnLCAncmVzZXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBuZXcgUmVzdGF1cmFudERCU2VydmljZSgpLnJlbW92ZSh0aGlzLmdldCgpKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWFwcCcpLnBhaW50KCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgJGJ1dHRvbkJveC5hcHBlbmQobmV3IEJhc2ljQnV0dG9uKCdwcmltYXJ5JywgJ+uLq+q4sCcsICdzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbG9zZU1vZGFsKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbURldGFpbF9mYXZvcml0ZUljb25EQkxpc3RlbmVyKS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgcGFpbnQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCdkaXZbaXM9XCJyZXN0YXVyYW50LWNhdGVnb3J5LWljb25cIl0nKS5zZXRDYXRlZ29yeShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9jYXRlZ29yeSwgXCJmXCIpKTtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fbmFtZScpLnRleHRDb250ZW50ID0gYCR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbmFtZSwgXCJmXCIpfWA7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2Rpc3RhbmNlJykudGV4dENvbnRlbnQgPSBg7Lqg7Y287Iqk67aA7YSwICR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGlzdGFuY2UsIFwiZlwiKX3rtoQg64K0YDtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fZGVzY3JpcHRpb24nKS50ZXh0Q29udGVudCA9IGAkeyhfYSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rlc2NyaXB0aW9uLCBcImZcIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnfWA7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2Zhdm9yaXRlLWljb24nKS5zZXQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSwgXCJmXCIpKTtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2xpbmsnKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9saW5rLCBcImZcIikpO1xuICAgICAgICBsaW5rLnRleHRDb250ZW50ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbGluaywgXCJmXCIpO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYXRlZ29yeTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfY2F0ZWdvcnksIFwiZlwiKSxcbiAgICAgICAgICAgIG5hbWU6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX25hbWUsIFwiZlwiKSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9kaXN0YW5jZSwgXCJmXCIpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rlc2NyaXB0aW9uLCBcImZcIiksXG4gICAgICAgICAgICBsaW5rOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9saW5rLCBcImZcIiksXG4gICAgICAgICAgICBpc0Zhdm9yaXRlOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9pc0Zhdm9yaXRlLCBcImZcIiksXG4gICAgICAgIH07XG4gICAgfVxufVxuX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2NhdGVnb3J5ID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX25hbWUgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGlzdGFuY2UgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGVzY3JpcHRpb24gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbGluayA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbURldGFpbF9pc0Zhdm9yaXRlID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50SXRlbURldGFpbF9mYXZvcml0ZUljb25EQkxpc3RlbmVyID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Zhdm9yaXRlSWNvbkRCTGlzdGVuZXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncmVzdGF1cmFudF9fZmF2b3JpdGUtaWNvbicpKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2lzRmF2b3JpdGUsIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2Zhdm9yaXRlLWljb24nKS5nZXRBdHRyaWJ1dGUoJ2NsaWNrZWQnKSA9PT0gJ29uJywgXCJmXCIpO1xuICAgICAgICBjb25zdCBuZXdSZXN0YXVyYW50cyA9IG5ldyBSZXN0YXVyYW50REJTZXJ2aWNlKClcbiAgICAgICAgICAgIC5nZXQoKVxuICAgICAgICAgICAgLmZpbHRlcigocmVzdGF1cmFudCkgPT4gIW5ldyBSZXN0YXVyYW50KHRoaXMuZ2V0KCkpLmlzRXF1YWwocmVzdGF1cmFudCkpO1xuICAgICAgICBjb25zb2xlLmxvZyhuZXdSZXN0YXVyYW50cyk7XG4gICAgICAgIG5ldyBSZXN0YXVyYW50REJTZXJ2aWNlKCkuc2V0KFsuLi5uZXdSZXN0YXVyYW50cywgdGhpcy5nZXQoKV0pO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1hcHAtbmV3JykucGFpbnQoKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudEl0ZW1EZXRhaWw7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Jlc3RhdXJhbnQtaXRlbS1kZXRhaWwnLCBSZXN0YXVyYW50SXRlbURldGFpbCwgeyBleHRlbmRzOiAnbGknIH0pO1xuIiwiaW1wb3J0IHsgQ0FURUdPUklFU19LRVlTLCBDT05ESVRJT05TIH0gZnJvbSAnQC9jb25zdGFudHMvQ29uZGl0aW9uJztcbmltcG9ydCBCYXNpY0J1dHRvbiBmcm9tICcuLi9CYXNpYy9CYXNpY0J1dHRvbic7XG5jbGFzcyBOZXdSZXN0YXVyYW50Rm9ybSBleHRlbmRzIEhUTUxGb3JtRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxyXG4gICAgPGRpdiBjbGFzcz1cImZvcm0taXRlbSBmb3JtLWl0ZW0tLXJlcXVpcmVkIGNhdGVnb3J5LXNlbGVjdFwiPlxyXG4gICAgICA8bGFiZWwgZm9yPVwiY2F0ZWdvcnkgdGV4dC1jYXB0aW9uXCI+7Lm07YWM6rOg66asPC9sYWJlbD5cclxuICAgICAgPHNlbGVjdCBpcz1cInNlbGVjdC1ib3hcIj48L3NlbGVjdD5cclxuICAgICAgPGRpdiBjbGFzcz1cImVycm9yIGludmlzaWJsZVwiPuy5tO2FjOqzoOumrOuKlCDtlYTsiJgg7J6F66Cl7J6F64uI64ukLjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICBcclxuICAgIDxkaXYgaXM9XCJ2ZXJ0aWNhbC1pbnB1dC1ib3hcIj48L2Rpdj5cclxuXHJcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pdGVtIGZvcm0taXRlbS0tcmVxdWlyZWQgZGlzdGFuY2Utc2VsZWN0XCI+XHJcbiAgICAgIDxsYWJlbCBmb3I9XCJkaXN0YW5jZSB0ZXh0LWNhcHRpb25cIj7qsbDrpqwo64+E67O0IOydtOuPmSDsi5zqsIQpPC9sYWJlbD5cclxuICAgICAgPHNlbGVjdCBpcz1cInNlbGVjdC1ib3hcIj48L3NlbGVjdD5cclxuICAgICAgPGRpdiBjbGFzcz1cImVycm9yIGludmlzaWJsZVwiPuqxsOumrCDqsJLsnYAg7ZWE7IiYIOyeheugpeyeheuLiOuLpC48L2Rpdj5cclxuICAgIDwvZGl2PlxyXG5cclxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW1cIj5cclxuICAgICAgPGxhYmVsIGZvcj1cImRlc2NyaXB0aW9uIHRleHQtY2FwdGlvblwiPuyEpOuqhTwvbGFiZWw+XHJcbiAgICAgIDx0ZXh0YXJlYSBuYW1lPVwiZGVzY3JpcHRpb25cIiBpZD1cImRlc2NyaXB0aW9uXCIgY29scz1cIjMwXCIgcm93cz1cIjVcIj48L3RleHRhcmVhPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cImhlbHAtdGV4dCB0ZXh0LWNhcHRpb25cIj7rqZTribQg65OxIOy2lOqwgCDsoJXrs7Trpbwg7J6F66Cl7ZW0IOyjvOyEuOyalC48L3NwYW4+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICA8ZGl2IGlzPVwidmVydGljYWwtaW5wdXQtYm94XCIgY2xhc3M9XCJsaW5rLWlucHV0LWJveFwiPjwvZGl2PlxyXG5cclxuICAgIDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyXCI+PC9kaXY+XHJcbiAgICBgO1xuICAgICAgICBjb25zdCBjYXRlZ29yeVNlbGVjdEJveCA9IHRoaXMucXVlcnlTZWxlY3RvcignLmNhdGVnb3J5LXNlbGVjdCBzZWxlY3RbaXM9XCJzZWxlY3QtYm94XCJdJyk7XG4gICAgICAgIGNhdGVnb3J5U2VsZWN0Qm94LnNldChbJ+yEoO2Dne2VtOyjvOyEuOyalCcsIC4uLkNBVEVHT1JJRVNfS0VZU10sIFsn7ISg7YOd7ZW07KO87IS47JqUJywgLi4uQ0FURUdPUklFU19LRVlTXSwgJ2NhdGVnb3J5Jyk7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignZGl2W2lzPVwidmVydGljYWwtaW5wdXQtYm94XCJdJykuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbmFtZTogJ+ydtOumhCcsXG4gICAgICAgICAgICBpZE5hbWU6ICduYW1lJyxcbiAgICAgICAgICAgIGNsYXNzTGlzdDogWyduYW1lLWlucHV0LWJveCddLFxuICAgICAgICAgICAgaGFzVmVyaWZpY2F0aW9uOiB0cnVlLFxuICAgICAgICAgICAgaXNSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IERJU1RBTkNFU19SRVFVUklFRCA9IFtcbiAgICAgICAgICAgICfshKDtg53tlbTso7zshLjsmpQnLFxuICAgICAgICAgICAgLi4uQ09ORElUSU9OUy5ESVNUQU5DRVMubWFwKChudW0pID0+IGAke251bX1gKSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgRElTVEFOQ0VTX1RFWFRTID0gW1xuICAgICAgICAgICAgJ+yEoO2Dne2VtOyjvOyEuOyalCcsXG4gICAgICAgICAgICAuLi5DT05ESVRJT05TLkRJU1RBTkNFUy5tYXAoKG51bSkgPT4gYCR7U3RyaW5nKG51bSl967aEIOuCtGApLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBkaXN0YW5jZVNlbGVjdEJveCA9IHRoaXMucXVlcnlTZWxlY3RvcignLmRpc3RhbmNlLXNlbGVjdCBzZWxlY3RbaXM9XCJzZWxlY3QtYm94XCJdJyk7XG4gICAgICAgIGRpc3RhbmNlU2VsZWN0Qm94LnNldChESVNUQU5DRVNfUkVRVVJJRUQsIERJU1RBTkNFU19URVhUUywgJ2Rpc3RhbmNlJyk7XG4gICAgICAgIGNvbnN0IGxpbmtJbnB1dEJveCA9IHRoaXMucXVlcnlTZWxlY3RvcignLmxpbmstaW5wdXQtYm94Jyk7XG4gICAgICAgIGxpbmtJbnB1dEJveC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBuYW1lOiAn66eB7YGsJyxcbiAgICAgICAgICAgIGlkTmFtZTogJ2xpbmsnLFxuICAgICAgICAgICAgaGVscFRleHQ6ICfrp6TsnqUg7KCV67O066W8IO2ZleyduO2VoCDsiJgg7J6I64qUIOunge2BrOulvCDsnoXroKXtlbQg7KO87IS47JqULicsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCAkYnV0dG9uQm94ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLWNvbnRhaW5lcicpO1xuICAgICAgICAkYnV0dG9uQm94LmFwcGVuZChuZXcgQmFzaWNCdXR0b24oJ3NlY29uZGFyeScsICfst6jshoztlZjquLAnLCAncmVzZXQnLCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoKF9hID0gdGhpcy5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFyZW50RWxlbWVudCkuY2xvc2VNb2RhbCgpO1xuICAgICAgICB9KSk7XG4gICAgICAgICRidXR0b25Cb3guYXBwZW5kKG5ldyBCYXNpY0J1dHRvbigncHJpbWFyeScsICfstpTqsIDtlZjquLAnLCAnc3VibWl0JywgKCkgPT4geyB9KSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTmV3UmVzdGF1cmFudEZvcm07XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ25ldy1yZXN0YXVyYW50LWZvcm0nLCBOZXdSZXN0YXVyYW50Rm9ybSwgeyBleHRlbmRzOiAnZm9ybScgfSk7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTmV3UmVzdGF1cmFudE1vZGFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTmV3UmVzdGF1cmFudE1vZGFsLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTmV3UmVzdGF1cmFudE1vZGFsX2luc3RhbmNlcywgX05ld1Jlc3RhdXJhbnRNb2RhbF90aXRsZSwgX05ld1Jlc3RhdXJhbnRNb2RhbF9mb3JtLCBfTmV3UmVzdGF1cmFudE1vZGFsX3ZhbGlkYXRlUmVxdWlyZWRWYWx1ZXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfaW52aXNpYmxlRXJyb3JNZXNzYWdlLCBfTmV3UmVzdGF1cmFudE1vZGFsX3NldFN1Ym1pdEV2ZW50LCBfTmV3UmVzdGF1cmFudE1vZGFsX2dldFZhbHVlcywgX05ld1Jlc3RhdXJhbnRNb2RhbF9yZXJlbmRlckFwcDtcbmltcG9ydCBCYXNpY01vZGFsIGZyb20gJy4uL0Jhc2ljL0Jhc2ljTW9kYWwnO1xuaW1wb3J0IFJlc3RhdXJhbnREQlNlcnZpY2UgZnJvbSAnQC9kb21haW5zL3NlcnZpY2VzL1Jlc3RhdXJhbnREQlNlcnZpY2UnO1xuaW1wb3J0ICcuL05ld1Jlc3RhdXJhbnRNb2RhbC5jc3MnO1xuY2xhc3MgTmV3UmVzdGF1cmFudE1vZGFsIGV4dGVuZHMgQmFzaWNNb2RhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9OZXdSZXN0YXVyYW50TW9kYWxfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX05ld1Jlc3RhdXJhbnRNb2RhbF90aXRsZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX05ld1Jlc3RhdXJhbnRNb2RhbF9mb3JtLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBgXHJcbiAgICA8aDIgY2xhc3M9XCJtb2RhbC10aXRsZSB0ZXh0LXRpdGxlXCI+7IOI66Gc7Jq0IOydjOyLneygkDwvaDI+XHJcbiAgICA8Zm9ybSBpcz1cIm5ldy1yZXN0YXVyYW50LWZvcm1cIiBjbGFzcz1cIm5ldy1yZXN0YXVyYW50LWZvcm1cIj48L2Zvcm0+XHJcbiAgICBgO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfdGl0bGUsIHRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC10aXRsZScpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX05ld1Jlc3RhdXJhbnRNb2RhbF9mb3JtLCB0ZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKCcubmV3LXJlc3RhdXJhbnQtZm9ybScpLCBcImZcIik7XG4gICAgICAgIHRoaXMuYXBwZW5kQWxsKFtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfdGl0bGUsIFwiZlwiKSwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2Zvcm0sIFwiZlwiKV0pO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRNb2RhbF9zZXRTdWJtaXRFdmVudCkuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9OZXdSZXN0YXVyYW50TW9kYWxfaW52aXNpYmxlRXJyb3JNZXNzYWdlKS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLS1vcGVuJyk7XG4gICAgfVxuICAgIGdldEZvcm0oKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfZm9ybSwgXCJmXCIpO1xuICAgIH1cbn1cbl9OZXdSZXN0YXVyYW50TW9kYWxfdGl0bGUgPSBuZXcgV2Vha01hcCgpLCBfTmV3UmVzdGF1cmFudE1vZGFsX2Zvcm0gPSBuZXcgV2Vha01hcCgpLCBfTmV3UmVzdGF1cmFudE1vZGFsX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9OZXdSZXN0YXVyYW50TW9kYWxfdmFsaWRhdGVSZXF1aXJlZFZhbHVlcyA9IGZ1bmN0aW9uIF9OZXdSZXN0YXVyYW50TW9kYWxfdmFsaWRhdGVSZXF1aXJlZFZhbHVlcyhjYXRlZ29yeSwgZGlzdGFuY2UsIG5hbWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBpc05vdFZhbGlkQ2F0ZWdvcnkgPSBjYXRlZ29yeSA9PT0gJ+yEoO2Dne2VtOyjvOyEuOyalCc7XG4gICAgY29uc3QgaXNOb3RWYWxpZERpc3RhbmNlID0gTnVtYmVyLmlzTmFOKGRpc3RhbmNlKTtcbiAgICBjb25zdCBpc05vdFZhbGlkTmFtZSA9ICFuYW1lO1xuICAgIGlmIChpc05vdFZhbGlkQ2F0ZWdvcnkpIHtcbiAgICAgICAgKF9hID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuY2F0ZWdvcnktc2VsZWN0ID4gLmVycm9yJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc0xpc3QucmVtb3ZlKCdpbnZpc2libGUnKTtcbiAgICB9XG4gICAgaWYgKGlzTm90VmFsaWREaXN0YW5jZSkge1xuICAgICAgICAoX2IgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5kaXN0YW5jZS1zZWxlY3QgPiAuZXJyb3InKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpO1xuICAgIH1cbiAgICBpZiAoaXNOb3RWYWxpZE5hbWUpIHtcbiAgICAgICAgKF9jID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcubmFtZS1pbnB1dC1ib3ggPiAuZXJyb3InKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpO1xuICAgIH1cbiAgICByZXR1cm4gaXNOb3RWYWxpZENhdGVnb3J5IHx8IGlzTm90VmFsaWREaXN0YW5jZSB8fCBpc05vdFZhbGlkTmFtZTtcbn0sIF9OZXdSZXN0YXVyYW50TW9kYWxfaW52aXNpYmxlRXJyb3JNZXNzYWdlID0gZnVuY3Rpb24gX05ld1Jlc3RhdXJhbnRNb2RhbF9pbnZpc2libGVFcnJvck1lc3NhZ2UoKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgKF9hID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuY2F0ZWdvcnktc2VsZWN0ID4gLmVycm9yJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUnKTtcbiAgICAoX2IgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5kaXN0YW5jZS1zZWxlY3QgPiAuZXJyb3InKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsYXNzTGlzdC5hZGQoJ2ludmlzaWJsZScpO1xuICAgIChfYyA9IHRoaXMucXVlcnlTZWxlY3RvcignLm5hbWUtaW5wdXQtYm94ID4gLmVycm9yJykpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUnKTtcbn0sIF9OZXdSZXN0YXVyYW50TW9kYWxfc2V0U3VibWl0RXZlbnQgPSBmdW5jdGlvbiBfTmV3UmVzdGF1cmFudE1vZGFsX3NldFN1Ym1pdEV2ZW50KCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX05ld1Jlc3RhdXJhbnRNb2RhbF9mb3JtLCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRNb2RhbF9pbnZpc2libGVFcnJvck1lc3NhZ2UpLmNhbGwodGhpcyk7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZGlzdGFuY2UsIGNhdGVnb3J5LCBkZXNjcmlwdGlvbiwgbGluayB9ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9OZXdSZXN0YXVyYW50TW9kYWxfZ2V0VmFsdWVzKS5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9OZXdSZXN0YXVyYW50TW9kYWxfdmFsaWRhdGVSZXF1aXJlZFZhbHVlcykuY2FsbCh0aGlzLCBjYXRlZ29yeSwgZGlzdGFuY2UsIG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBkaXN0YW5jZU51bWVyaWMgPSBkaXN0YW5jZTtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlPbmx5ID0gY2F0ZWdvcnk7XG4gICAgICAgIGNvbnN0IG5ld1Jlc3RhdXJhbnQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBuYW1lLCBkaXN0YW5jZTogZGlzdGFuY2VOdW1lcmljLCBjYXRlZ29yeTogY2F0ZWdvcnlPbmx5IH0sIChkZXNjcmlwdGlvbiAmJiB7IGRlc2NyaXB0aW9uIH0pKSwgKGxpbmsgJiYgeyBsaW5rIH0pKTtcbiAgICAgICAgY29uc3QgREJTZXJ2aWNlID0gbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKTtcbiAgICAgICAgREJTZXJ2aWNlLmFkZChuZXdSZXN0YXVyYW50KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9OZXdSZXN0YXVyYW50TW9kYWxfcmVyZW5kZXJBcHApLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgIH0pO1xufSwgX05ld1Jlc3RhdXJhbnRNb2RhbF9nZXRWYWx1ZXMgPSBmdW5jdGlvbiBfTmV3UmVzdGF1cmFudE1vZGFsX2dldFZhbHVlcygpIHtcbiAgICBjb25zdCBuYW1lID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2Zvcm0sIFwiZlwiKS5lbGVtZW50cy5uYW1lZEl0ZW0oJ25hbWUnKS52YWx1ZTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE51bWJlcihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfZm9ybSwgXCJmXCIpLmVsZW1lbnRzLm5hbWVkSXRlbSgnZGlzdGFuY2UnKVxuICAgICAgICAudmFsdWUpO1xuICAgIGNvbnN0IGNhdGVnb3J5ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2Zvcm0sIFwiZlwiKS5lbGVtZW50cy5uYW1lZEl0ZW0oJ2NhdGVnb3J5JykudmFsdWU7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50TW9kYWxfZm9ybSwgXCJmXCIpLmVsZW1lbnRzLm5hbWVkSXRlbSgnZGVzY3JpcHRpb24nKS52YWx1ZTtcbiAgICBjb25zdCBsaW5rID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudE1vZGFsX2Zvcm0sIFwiZlwiKS5lbGVtZW50cy5uYW1lZEl0ZW0oJ2xpbmsnKS52YWx1ZTtcbiAgICByZXR1cm4geyBuYW1lLCBkaXN0YW5jZSwgY2F0ZWdvcnksIGRlc2NyaXB0aW9uLCBsaW5rIH07XG59LCBfTmV3UmVzdGF1cmFudE1vZGFsX3JlcmVuZGVyQXBwID0gZnVuY3Rpb24gX05ld1Jlc3RhdXJhbnRNb2RhbF9yZXJlbmRlckFwcCgpIHtcbiAgICB0aGlzLnBhcmVudEVsZW1lbnQucGFpbnQoKTtcbn07XG5leHBvcnQgZGVmYXVsdCBOZXdSZXN0YXVyYW50TW9kYWw7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ25ldy1yZXN0YXVyYW50LW1vZGFsJywgTmV3UmVzdGF1cmFudE1vZGFsLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuIiwiY2xhc3MgT25PZmZCdXR0b24gZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCAoX2EgPSB0aGlzLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnb2ZmJyk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc09uKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaXNPbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykgPT09ICdvbic7XG4gICAgfVxuICAgIG9uKCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICdvbicpO1xuICAgIH1cbiAgICBvZmYoKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgJ29mZicpO1xuICAgIH1cbn1cbk9uT2ZmQnV0dG9uLm9ic2VydmVkQXR0cmlidXRlcyA9IFsnY2hlY2tlZCddO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdvbi1vZmYtYnV0dG9uJywgT25PZmZCdXR0b24sIHsgZXh0ZW5kczogJ2RpdicgfSk7XG5leHBvcnQgZGVmYXVsdCBPbk9mZkJ1dHRvbjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9UYWIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9UYWIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9UYWJfc2VsZWN0ZWQ7XG5pbXBvcnQgJy4vVGFiLmNzcyc7XG5jb25zdCBFTEVNRU5UX05BTUUgPSAnbXktdGFiJztcbmNsYXNzIFRhYiBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1RhYl9zZWxlY3RlZC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdjdXN0b20tdGFiJywgRUxFTUVOVF9OQU1FKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVGFiX3NlbGVjdGVkLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoYDpzY29wZSA+ICpgKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKS5mb3JFYWNoKChjaGlsZCkgPT4gY2hpbGQub2ZmKCkpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5vbigpO1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1RhYl9zZWxlY3RlZCwgZXZlbnQudGFyZ2V0LCBcImZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRTZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RhYl9zZWxlY3RlZCwgXCJmXCIpO1xuICAgIH1cbn1cbl9UYWJfc2VsZWN0ZWQgPSBuZXcgV2Vha01hcCgpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKEVMRU1FTlRfTkFNRSwgVGFiLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgVGFiO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3QgcmVzdGF1cmFudExpc3RNb2NrID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ+2UvOyWkey9qe2VoOuouOuLiCcsXG4gICAgICAgIGNhdGVnb3J5OiAn7ZWc7IudJyxcbiAgICAgICAgZGlzdGFuY2U6IDEwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYO2PieyWkSDstpzsi6DsnZgg7ZWg66i464uI6rCAIOyImOyLrSDrhYTqsIQg7Jq07JiB7ZW07JioIOu5hOyngCDsoITrrLjsoJAg7ZS87JaR7L2pIO2VoOuniOuLiC4g65GQ67aA66W8IOu5vOyngCDslYrsnYBcclxu65CY67mE7KeA66W8IOunm+uzvCDsiJgg7J6I64qUIOqzs+ycvOuhnCwg4oCY7ZS87JaR4oCZ7J2AIO2PieyViOuPhCDsgqztiKzrpqzroZwg4oCY7Y+J7JaR4oCZ7J2EIOydmOuvuO2VnOuLpC4g65S46rO8IO2VqOq7mFxyXG7smrTsmIHtlZjripQg7J206rOz7JeQ7ISgIOunt+uPjOuhnCDsp4HsoJEg6rCEIOy9qeunjOydhCDsgqzsmqntlZjrqbAsIOydvOyytOydmCDsobDrr7jro4zrpbwg64Sj7KeAIOyViuydgCDqsbTqsJXsi53snYRcclxu7ISg67O07J2464ukLiDsvanruYTsp4DsmYAg7ZS87JaRIOunjOuRkOqwgCDsnbTqs7PsnZgg64yA7ZGcIOuplOuJtOyngOunjCwg7ZWg66i464uI6rCAIOyYm+uCoCDrsKnsi53snYQg6rOg7IiY7ZWY66mwXHJcbuunjOuTpOyWtOuCtOuKlCDruYTsp4DsoITqs6gg65iQ7ZWcIOydtCDsp5HsnZgg7Jet7IKs66W8IOuKkOuChCDsiJgg7J6I64qUIO2KueuzhO2VnCDrqZTribTri6QuIOuwmOywrOydgCDshpDri5jrk6TsnbRcclxu66i56rOgIOyLtuydgCDrp4ztgbwg642c7Ja0IOuoueydhCDsiJgg7J6I6rKMIOykgOu5hOuPvCDsnojri6QuYCxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3Lm5hdmVyLmNvbScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICfsuZzsuZwnLFxuICAgICAgICBjYXRlZ29yeTogJ+ykkeyLnScsXG4gICAgICAgIGRpc3RhbmNlOiA1LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNpbmNlIDIwMDQg7Y6466as7ZWcIOq1kO2GteqzvCDso7zssKgsIOq3uOumrOqzoCDqtIDroZ3rp4ztgbwg6rmK7J2AIOunm+qzvCDsoJXshLHsnLzroZwg7KCV7Ya1IOykkeyLneydmCDshLjqs4TrpbxcclxuICAgIO2OvOyzkOqwkeuLiOuLpC5gLFxuICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cubmF2ZXIuY29tJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ+yeh+yHvOyasCcsXG4gICAgICAgIGNhdGVnb3J5OiAn7J287IudJyxcbiAgICAgICAgZGlzdGFuY2U6IDEwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYOyeh+yHvOyasOuKlCDsoJXthrUg7J6Q6rCA7KCc66m0IOyCrOuIhOuBvCDsmrDrj5nsnbQg64yA7ZGc66mU64m07J6F64uI64ukLiDquLDsiKDsnYAg7KCV7ISx7J2EIOydtOq4uCDsiJgg7JeG64uk64qUXHJcbiAgICDsi6DrhZDsnLzroZwg66qo65OgIOydjOyLneyXkCDstZzshKDsnYQg64uk7ZWY64qUIOyeh+yHvOyasOuKlCDqs6DqsJ0g7ZWc67aEIO2VnOu2hOq7mCDstZzshKDsnYQg64uk7ZWY6rKg7Iq164uI64ukYCxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3Lm5hdmVyLmNvbScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICfsnbTtg5zrpqztgqTsuZwnLFxuICAgICAgICBjYXRlZ29yeTogJ+yWkeyLnScsXG4gICAgICAgIGRpc3RhbmNlOiAyMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGDripgg67OA7ZmU66W8IOy2lOq1rO2VmOuKlCDsnbTtg5zrpqztgqTsuZzsnoXri4jri6QuYCxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3Lm5hdmVyLmNvbScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICftmLjslbzruYgg7IK87ISx7KCQJyxcbiAgICAgICAgY2F0ZWdvcnk6ICfslYTsi5zslYgnLFxuICAgICAgICBkaXN0YW5jZTogMTUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBg7ZG47KeQ7ZWcIOyWkeyXkCDqta3rrLzsnbQg7J287ZKI7J24IOyMgOq1reyImGAsXG4gICAgICAgIGxpbms6ICdodHRwczovL3d3dy5uYXZlci5jb20nLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn64+E7Iqk7YOA7L2U7IqkIOyEoOumieygkCcsXG4gICAgICAgIGNhdGVnb3J5OiAn6riw7YOAJyxcbiAgICAgICAgZGlzdGFuY2U6IDUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBg66mV7Iuc7Lm4IOy6kOyjvOyWvCDqt7jrprRgLFxuICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cubmF2ZXIuY29tJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ+yWjOyDmOq5gOuwpScsXG4gICAgICAgIGNhdGVnb3J5OiAn7ZWc7IudJyxcbiAgICAgICAgZGlzdGFuY2U6IDUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBg66mV7Iuc7Lm4IOy6kOyjvOyWvCDqt7jrprRgLFxuICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cubmF2ZXIuY29tJyxcbiAgICB9LFxuXTtcbmV4cG9ydCBkZWZhdWx0IHJlc3RhdXJhbnRMaXN0TW9jaztcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQWxsUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIF9BbGxSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciwgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QsIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UsIF9BbGxSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0LCBfQWxsUmVzdGF1cmFudEFwcF9zZXRNb2NrLCBfQWxsUmVzdGF1cmFudEFwcF9nZXREQjtcbmltcG9ydCAnQC9jc3MvaW5kZXguY3NzJztcbmltcG9ydCBSZXN0YXVyYW50REJTZXJ2aWNlIGZyb20gJ0AvZG9tYWlucy9zZXJ2aWNlcy9SZXN0YXVyYW50REJTZXJ2aWNlJztcbmltcG9ydCByZXN0YXVyYW50TGlzdE1vY2sgZnJvbSAnQC9tb2NrL3Jlc3RhdXJhbnRMaXN0Lm1vY2snO1xuY2xhc3MgQWxsUmVzdGF1cmFudEFwcCBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX0FsbFJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX0FsbFJlc3RhdXJhbnRBcHBfZmlsdGVyQ29udGFpbmVyLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQWxsUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50TGlzdC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhbGwtcmVzdGF1cmFudC1hcHAnKTtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXHJcbiAgICA8ZmlsdGVyLWNvbnRhaW5lciBjbGFzcz1cInJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lclwiPjwvZmlsdGVyLWNvbnRhaW5lcj5cclxuICAgIDx1bCBpcz1cInJlc3RhdXJhbnQtbGlzdFwiIGNsYXNzPVwicmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciByZXN0YXVyYW50LWxpc3RcIj48L3VsPlxyXG4gICAgYDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9maWx0ZXJDb250YWluZXIsIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lcicpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QsIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnQtbGlzdCcpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnBhaW50KCk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnBhaW50KCk7XG4gICAgfVxuICAgIHBhaW50KCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnRMaXN0LCBcImZcIikucGFpbnQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfQWxsUmVzdGF1cmFudEFwcF9nZXROZXdSZXN0YXVyYW50TGlzdCkuY2FsbCh0aGlzKSk7XG4gICAgfVxufVxuX0FsbFJlc3RhdXJhbnRBcHBfZmlsdGVyQ29udGFpbmVyID0gbmV3IFdlYWtNYXAoKSwgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QgPSBuZXcgV2Vha01hcCgpLCBfQWxsUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50REJTZXJ2aWNlID0gbmV3IFdlYWtNYXAoKSwgX0FsbFJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0FsbFJlc3RhdXJhbnRBcHBfZ2V0TmV3UmVzdGF1cmFudExpc3QgPSBmdW5jdGlvbiBfQWxsUmVzdGF1cmFudEFwcF9nZXROZXdSZXN0YXVyYW50TGlzdCgpIHtcbiAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEgfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfZmlsdGVyQ29udGFpbmVyLCBcImZcIikuZ2V0KCk7XG4gICAgbGV0IG5ld1Jlc3RhdXJhbnRMaXN0ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfQWxsUmVzdGF1cmFudEFwcF9nZXREQikuY2FsbCh0aGlzLCBjYXRlZ29yeSwgc29ydENyaXRlcmlhKTtcbiAgICBpZiAoIW5ld1Jlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FsbFJlc3RhdXJhbnRBcHBfc2V0TW9jaykuY2FsbCh0aGlzKTtcbiAgICAgICAgbmV3UmVzdGF1cmFudExpc3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BbGxSZXN0YXVyYW50QXBwX2luc3RhbmNlcywgXCJtXCIsIF9BbGxSZXN0YXVyYW50QXBwX2dldERCKS5jYWxsKHRoaXMsIGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3UmVzdGF1cmFudExpc3Q7XG59LCBfQWxsUmVzdGF1cmFudEFwcF9zZXRNb2NrID0gZnVuY3Rpb24gX0FsbFJlc3RhdXJhbnRBcHBfc2V0TW9jaygpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UsIFwiZlwiKS5zZXQocmVzdGF1cmFudExpc3RNb2NrKTtcbn0sIF9BbGxSZXN0YXVyYW50QXBwX2dldERCID0gZnVuY3Rpb24gX0FsbFJlc3RhdXJhbnRBcHBfZ2V0REIoY2F0ZWdvcnksIHNvcnRDcml0ZXJpYSkge1xuICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UsIFwiZlwiKS5nZXRGcm9tUmVzdGF1cmFudExpc3QoY2F0ZWdvcnksIHNvcnRDcml0ZXJpYSk7XG59O1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhbGwtcmVzdGF1cmFudC1hcHAnLCBBbGxSZXN0YXVyYW50QXBwLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgQWxsUmVzdGF1cmFudEFwcDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2luc3RhbmNlcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9maWx0ZXJDb250YWluZXIsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9nZXROZXdSZXN0YXVyYW50TGlzdCwgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9zZXRNb2NrLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldERCLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldERCUmF3O1xuaW1wb3J0ICdAL2Nzcy9pbmRleC5jc3MnO1xuaW1wb3J0IFJlc3RhdXJhbnREQlNlcnZpY2UgZnJvbSAnQC9kb21haW5zL3NlcnZpY2VzL1Jlc3RhdXJhbnREQlNlcnZpY2UnO1xuaW1wb3J0IHJlc3RhdXJhbnRMaXN0TW9jayBmcm9tICdAL21vY2svcmVzdGF1cmFudExpc3QubW9jayc7XG5pbXBvcnQgRmF2b3JpdGVJY29uIGZyb20gJy4vQmFzaWMvRmF2b3JpdGVJY29uJztcbmltcG9ydCBSZXN0YXVyYW50IGZyb20gJ0AvZG9tYWlucy9lbnRpdGllcy9SZXN0YXVyYW50JztcbmNsYXNzIEZhdm9yaXRlUmVzdGF1cmFudEFwcCBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50TGlzdC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50REJTZXJ2aWNlLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICB0aGlzLm9ic2VydmVkQXR0cmlidXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2Zhdm9yaXRlLXJlc3RhdXJhbnQtYXBwJyk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxyXG4gICAgPGZpbHRlci1jb250YWluZXIgY2xhc3M9XCJyZXN0YXVyYW50LWZpbHRlci1jb250YWluZXJcIj48L2ZpbHRlci1jb250YWluZXI+XHJcbiAgICA8dWwgaXM9XCJyZXN0YXVyYW50LWxpc3RcIiBjbGFzcz1cInJlc3RhdXJhbnQtbGlzdC1jb250YWluZXIgcmVzdGF1cmFudC1saXN0XCI+PC91bD5cclxuICAgIGA7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9maWx0ZXJDb250YWluZXIsIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lcicpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50TGlzdCwgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudC1saXN0JyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UsIG5ldyBSZXN0YXVyYW50REJTZXJ2aWNlKCksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5wYWludCgpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgRmF2b3JpdGVJY29uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdGF1cmFudHMgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9nZXREQlJhdykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRSZXN0YXVyYW50ID0gKF9hID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3RhdXJhbnRzID0gcmVzdGF1cmFudHMuZmlsdGVyKChyZXN0YXVyYW50KSA9PiAhbmV3IFJlc3RhdXJhbnQocmVzdGF1cmFudCkuaXNFcXVhbCh0YXJnZXRSZXN0YXVyYW50LmdldCgpKSk7XG4gICAgICAgICAgICAgICAgbmV3UmVzdGF1cmFudHMucHVzaCh0YXJnZXRSZXN0YXVyYW50LmdldCgpKTtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLnNldChuZXdSZXN0YXVyYW50cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWludCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICB9XG4gICAgcGFpbnQoKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50TGlzdCwgXCJmXCIpLnBhaW50KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0KS5jYWxsKHRoaXMpKTtcbiAgICB9XG59XG5fRmF2b3JpdGVSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciA9IG5ldyBXZWFrTWFwKCksIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QgPSBuZXcgV2Vha01hcCgpLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UgPSBuZXcgV2Vha01hcCgpLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0TmV3UmVzdGF1cmFudExpc3QgPSBmdW5jdGlvbiBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0KCkge1xuICAgIGNvbnN0IHsgY2F0ZWdvcnksIHNvcnRDcml0ZXJpYSB9ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciwgXCJmXCIpLmdldCgpO1xuICAgIGxldCBuZXdSZXN0YXVyYW50TGlzdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldERCKS5jYWxsKHRoaXMsIGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEpO1xuICAgIGlmIChuZXdSZXN0YXVyYW50TGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2luc3RhbmNlcywgXCJtXCIsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfc2V0TW9jaykuY2FsbCh0aGlzKTtcbiAgICAgICAgbmV3UmVzdGF1cmFudExpc3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9nZXREQikuY2FsbCh0aGlzLCBjYXRlZ29yeSwgc29ydENyaXRlcmlhKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1Jlc3RhdXJhbnRMaXN0LmZpbHRlcigocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5pc0Zhdm9yaXRlKTtcbn0sIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfc2V0TW9jayA9IGZ1bmN0aW9uIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfc2V0TW9jaygpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLnNldChyZXN0YXVyYW50TGlzdE1vY2spO1xufSwgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9nZXREQiA9IGZ1bmN0aW9uIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0REIoY2F0ZWdvcnksIHNvcnRDcml0ZXJpYSkge1xuICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLmdldEZyb21SZXN0YXVyYW50TGlzdChjYXRlZ29yeSwgc29ydENyaXRlcmlhKTtcbn0sIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0REJSYXcgPSBmdW5jdGlvbiBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldERCUmF3KCkge1xuICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLmdldCgpO1xufTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZmF2b3JpdGUtcmVzdGF1cmFudC1hcHAnLCBGYXZvcml0ZVJlc3RhdXJhbnRBcHAsIHsgZXh0ZW5kczogJ2RpdicgfSk7XG5leHBvcnQgZGVmYXVsdCBGYXZvcml0ZVJlc3RhdXJhbnRBcHA7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWFpbkFwcC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01haW5BcHAuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9NYWluQXBwX25hdlRhYiwgX01haW5BcHBfYWxsUmVzdGF1cmFudEFwcCwgX01haW5BcHBfZmF2b3JpdGVSZXN0YXVyYW50QXBwLCBfTWFpbkFwcF9uZXdSZXN0YXVyYW50TW9kYWwsIF9NYWluQXBwX3Jlc3RhdXJhbnREZXRhaWxNb2RhbDtcbmltcG9ydCBSZXN0YXVyYW50SXRlbURldGFpbCBmcm9tICcuL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtRGV0YWlsJztcbmltcG9ydCAnQC9jc3MvaW5kZXguY3NzJztcbmltcG9ydCAnLi9NYWluQXBwLmNzcyc7XG5jbGFzcyBNYWluQXBwIGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfTWFpbkFwcF9uYXZUYWIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9NYWluQXBwX2FsbFJlc3RhdXJhbnRBcHAuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9NYWluQXBwX2Zhdm9yaXRlUmVzdGF1cmFudEFwcC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX01haW5BcHBfbmV3UmVzdGF1cmFudE1vZGFsLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfTWFpbkFwcF9yZXN0YXVyYW50RGV0YWlsTW9kYWwuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzID0gW107XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ21haW4tYXBwLW5ldyc7XG4gICAgICAgIHRoaXMuaWQgPSAnbWFpbi1hcHAnO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcclxuICAgIDxkaXYgaXM9XCJteS10YWJcIiBjbGFzcz1cInJlc3RhdXJhbnQtbmF2LXRhYlwiIHN0eWxlPVwibWFyZ2luLXRvcDoyMnB4O1wiPiBcclxuICAgICAgPGRpdiBpcz1cIm9uLW9mZi1idXR0b25cIiBjbGFzcz1cInRleHQtc3VidGl0bGVcIiBjaGVja2VkPVwib25cIiBkYXRhLWlkPVwiYWxsXCI+66qo65OgIOydjOyLneygkDwvZGl2PlxyXG4gICAgICA8ZGl2IGlzPVwib24tb2ZmLWJ1dHRvblwiIGNsYXNzPVwidGV4dC1zdWJ0aXRsZVwiIGRhdGEtaWQ9XCJmYXZvcml0ZVwiPuyekOyjvCDqsIDripQg7J2M7Iud7KCQPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICA8ZGl2IGlzPVwiYWxsLXJlc3RhdXJhbnQtYXBwXCIgY2xhc3M9XCJoaWRkZW5cIiBkYXRhLWlkPVwiYWxsXCI+PC9kaXY+XHJcbiAgICA8ZGl2IGlzPVwiZmF2b3JpdGUtcmVzdGF1cmFudC1hcHBcIiBjbGFzcz1cIlwiIGRhdGEtaWQ9XCJmYXZvcml0ZVwiPjwvZGl2PlxyXG4gIFxyXG4gICAgPGRpdiBpcz1cIm5ldy1yZXN0YXVyYW50LW1vZGFsXCIgY2xhc3M9XCJtb2RhbCBuZXctcmVzdGF1cmFudC1tb2RhbFwiPjwvZGl2PlxyXG5cclxuICAgIDxkaXYgaXM9XCJiYXNpYy1tb2RhbFwiIGNsYXNzPVwibW9kYWwgYmFzaWMtbW9kYWwgZGV0YWlsLW1vZGFsXCIgY2xhc3MtY29udGFpbmVyPVwiZGV0YWlsLW1vZGFsX19jb250YWluZXJcIiA+XHJcbiAgICAgIDxsaSBpcz1cInJlc3RhdXJhbnQtaXRlbS1kZXRhaWxcIiBjbGFzcz1cInJlc3RhdXJhbnQtaXRlbS1kZXRhaWxcIiBzdHlsZT1cIlwiPjwvbGk+XHJcbiAgICA8L2Rpdj5cclxuICAgIGA7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01haW5BcHBfbmF2VGFiLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2Rpdltpcz1cIm15LXRhYlwiXScpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01haW5BcHBfbmV3UmVzdGF1cmFudE1vZGFsLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5uZXctcmVzdGF1cmFudC1tb2RhbCcpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01haW5BcHBfYWxsUmVzdGF1cmFudEFwcCwgdGhpcy5xdWVyeVNlbGVjdG9yKCdkaXZbaXM9XCJhbGwtcmVzdGF1cmFudC1hcHBcIl0nKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9NYWluQXBwX2Zhdm9yaXRlUmVzdGF1cmFudEFwcCwgdGhpcy5xdWVyeVNlbGVjdG9yKCdkaXZbaXM9XCJmYXZvcml0ZS1yZXN0YXVyYW50LWFwcFwiXScpLCBcImZcIik7XG4gICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFpbkFwcF9uYXZUYWIsIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01haW5BcHBfcmVzdGF1cmFudERldGFpbE1vZGFsLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5kZXRhaWwtbW9kYWwnKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYWluQXBwX3Jlc3RhdXJhbnREZXRhaWxNb2RhbCwgXCJmXCIpLmFwcGVuZEFsbChbXSk7XG4gICAgfVxuICAgIHBhaW50KCkge1xuICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFpbkFwcF9hbGxSZXN0YXVyYW50QXBwLCBcImZcIikgPT09XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoYC5tYWluLWFwcC1uZXcgPiBkaXZbZGF0YS1pZD1cIiR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFpbkFwcF9uYXZUYWIsIFwiZlwiKS5nZXRTZWxlY3RlZCgpLmRhdGFzZXQuaWR9XCJdYCkpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01haW5BcHBfZmF2b3JpdGVSZXN0YXVyYW50QXBwLCBcImZcIikuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYWluQXBwX2FsbFJlc3RhdXJhbnRBcHAsIFwiZlwiKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01haW5BcHBfYWxsUmVzdGF1cmFudEFwcCwgXCJmXCIpLnBhaW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYWluQXBwX2FsbFJlc3RhdXJhbnRBcHAsIFwiZlwiKS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01haW5BcHBfZmF2b3JpdGVSZXN0YXVyYW50QXBwLCBcImZcIikuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYWluQXBwX2Zhdm9yaXRlUmVzdGF1cmFudEFwcCwgXCJmXCIpLnBhaW50KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFpbnREZXRhaWxNb2RhbChyZXN0YXVyYW50KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01haW5BcHBfcmVzdGF1cmFudERldGFpbE1vZGFsLCBcImZcIikub3Blbk1vZGFsKCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01haW5BcHBfcmVzdGF1cmFudERldGFpbE1vZGFsLCBcImZcIikucmVwbGFjZUNoaWxkTm9kZXMoW25ldyBSZXN0YXVyYW50SXRlbURldGFpbChyZXN0YXVyYW50KV0pO1xuICAgIH1cbn1cbl9NYWluQXBwX25hdlRhYiA9IG5ldyBXZWFrTWFwKCksIF9NYWluQXBwX2FsbFJlc3RhdXJhbnRBcHAgPSBuZXcgV2Vha01hcCgpLCBfTWFpbkFwcF9mYXZvcml0ZVJlc3RhdXJhbnRBcHAgPSBuZXcgV2Vha01hcCgpLCBfTWFpbkFwcF9uZXdSZXN0YXVyYW50TW9kYWwgPSBuZXcgV2Vha01hcCgpLCBfTWFpbkFwcF9yZXN0YXVyYW50RGV0YWlsTW9kYWwgPSBuZXcgV2Vha01hcCgpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtYWluLWFwcCcsIE1haW5BcHAsIHsgZXh0ZW5kczogJ2RpdicgfSk7XG5leHBvcnQgZGVmYXVsdCBNYWluQXBwO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwibG9jYWxzIiwiaSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRlc3QiLCJyZXBsYWNlIiwicCIsIm5jIiwiSFRNTERpdkVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwicm9sZSIsImNvbm5lY3RlZENhbGxiYWNrIiwicmVuZGVyIiwiX2EiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJleHRlbmRzIiwiQ09ORElUSU9OUyIsImZyZWV6ZSIsIkRJU1RBTkNFUyIsIlNPUlRfQ1JJVEVSSU9OIiwiQ0FURUdPUklFUyIsIkNBVEVHT1JJRVNfV0lUSF9BTEwiLCJhc3NpZ24iLCJDQVRFR09SSUVTX1dJVEhfQUxMX0tFWVMiLCJrZXlzIiwiQ0FURUdPUklFU19LRVlTIiwiU09SVF9DUklURVJJT05fS0VZUyIsIkJhc2VDb21wb25lbnQiLCJIVE1MRWxlbWVudCIsInNldEV2ZW50Iiwib24iLCJzZWxlY3RvciIsInR5cGUiLCJldmVudExpc3RlbmVyIiwiX1NlbGVjdEJveF9pbnN0YW5jZXMiLCJfU2VsZWN0Qm94X3RleHRzIiwiX1NlbGVjdEJveF9uYW1lIiwiX1NlbGVjdEJveF9tYWtlT3B0aW9uVGFncyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyZWNlaXZlciIsInN0YXRlIiwidmFsdWUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJIVE1MU2VsZWN0RWxlbWVudCIsInZhbHVlcyIsInRleHRzIiwibmFtZSIsIm5hbWVzIiwiY2xhc3NOYW1lIiwiV2Vha01hcCIsIldlYWtTZXQiLCJvcHRpb25UYWciLCJPcHRpb24iLCJfRmlsdGVyQ29udGFpbmVyX3NlbGVjdENhdGVnb3J5Qm94IiwiX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RTb3J0Qm94IiwiX0ZpbHRlckNvbnRhaW5lcl9yZXN0YXVyYW50TGlzdCIsImFwcGVuZCIsImNhdGVnb3J5Iiwic29ydENyaXRlcmlhIiwicGFyZW50RWxlbWVudCIsInBhaW50IiwiX0Jhc2ljTW9kYWxfaW5zdGFuY2VzIiwiX0Jhc2ljTW9kYWxfYmFja2Ryb3AiLCJfQmFzaWNNb2RhbF9tb2RhbENvbnRhaW5lciIsIl9CYXNpY01vZGFsX21ha2VCYWNrZHJvcCIsIl9CYXNpY01vZGFsX21ha2VNb2RhbENvbnRhaW5lciIsImNoaWxkcmVuIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImFwcGVuZEFsbCIsImZvckVhY2giLCJjaGlsZCIsInJlbW92ZUFsbCIsInJlcGxhY2VDaGlsZHJlbiIsInJlcGxhY2VDaGlsZE5vZGVzIiwiY2xvc2VNb2RhbCIsIm9wZW5Nb2RhbCIsImJhY2tkcm9wIiwiYmluZCIsIm1vZGFsQ29udGFpbmVyIiwiZ2V0QXR0cmlidXRlIiwiX0Jhc2ljQnV0dG9uX2lzUHJpbWFyeSIsIkJhc2ljQnV0dG9uIiwiSFRNTEJ1dHRvbkVsZW1lbnQiLCJzdHlsZVZhcmlhbnQiLCJpbm5lclRleHQiLCJjbGlja0V2ZW50IiwiYnV0dG9uU3R5bGVDbGFzcyIsImJ1dHRvblByaW1hcnkiLCJidXR0b25TZWNvbmRhcnkiLCJidXR0b24iLCJfRmF2b3JpdGVJY29uX2luc3RhbmNlcyIsIl9GYXZvcml0ZUljb25fc2V0RXZlbnQiLCJGYXZvcml0ZUljb24iLCJIVE1MSW1hZ2VFbGVtZW50IiwiYWx0IiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImlzRmF2b3JpdGUiLCJvZmYiLCJpc09uIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiX1ZlcnRpY2FsSW5wdXRCb3hfbmFtZSIsIl9WZXJ0aWNhbElucHV0Qm94X2lucHV0IiwiX1ZlcnRpY2FsSW5wdXRCb3hfaGVscCIsIl9WZXJ0aWNhbElucHV0Qm94X2Vycm9yIiwiVmVydGljYWxJbnB1dEJveCIsInByb3BzIiwiaWROYW1lIiwiaGFzVmVyaWZpY2F0aW9uIiwiaXNSZXF1aXJlZCIsImhlbHBUZXh0Iiwic2V0U3RhdGUiLCJwcmludCIsImh0bWxGb3IiLCJvY2N1ckVycm9yIiwiSWNvbnMiLCJDYXRlZ29yeUljb24iLCJjYXRlZ29yeUljb24iLCJSZXN0YXVyYW50Q2F0ZWdvcnlJY29uIiwicmVzdGF1cmFudF9fY2F0ZWdvcnkiLCJzZXRDYXRlZ29yeSIsIl9SZXN0YXVyYW50X2luc3RhbmNlcyIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsInJlc3RhdXJhbnRBcmdzIiwiZGlzdGFuY2UiLCJsaW5rIiwiaXNFcXVhbCIsImFub3RoZXIiLCJyZXN0YXVyYW50cyIsInJlc3RhdXJhbnRMaXN0IiwicmVzdGF1cmFudCIsImZpbHRlckJ5Q2F0ZWdvcnkiLCJmaWx0ZXIiLCJzb3J0Iiwic29ydEJ5TmFtZSIsInNvcnRCeURpc3RhbmNlIiwidG9Tb3J0ZWQiLCJiIiwibG9jYWxlQ29tcGFyZSIsImFkZFJlc3RhdXJhbnQiLCJyZXN0YXVyYW50QXJnIiwibmV3UmVzdGF1cmFudCIsInNvbWUiLCJfUmVzdGF1cmFudERCU2VydmljZV9SRVNUQVVSQU5UU19EQl9LRVkiLCJfUmVzdGF1cmFudERCU2VydmljZV9yZXN0YXVyYW50Q29sbGVjdGlvbiIsImdldEZyb21SZXN0YXVyYW50TGlzdCIsImV4aXN0aW5nUmVzdGF1cmFudHMiLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeSIsIl9SZXN0YXVyYW50SXRlbV9kaXN0YW5jZSIsIl9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiIsIl9SZXN0YXVyYW50SXRlbV9uYW1lIiwiX1Jlc3RhdXJhbnRJdGVtX2xpbmsiLCJfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSIsIl9SZXN0YXVyYW50SXRlbV9mYXZvcml0ZUljb24iLCJfUmVzdGF1cmFudEl0ZW1fc2hvd0RldGFpbExpc3RlbmVyIiwiUmVzdGF1cmFudEl0ZW0iLCJIVE1MTElFbGVtZW50IiwidGVtcGxhdGUiLCJyZXN0YXVyYW50X19pbmZvIiwicmVzdGF1cmFudF9fbmFtZSIsInJlc3RhdXJhbnRfX2Rpc3RhbmNlIiwicmVzdGF1cmFudF9fZGVzY3JpcHRpb24iLCJ0ZXh0Q29udGVudCIsImV2ZW50IiwiY29udGFpbnMiLCJwYWludERldGFpbE1vZGFsIiwiX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcyIsIl9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cyIsIl9SZXN0YXVyYW50TGlzdF9yZW1vdmVDaGlsZHJlbiIsIkhUTUxVTGlzdEVsZW1lbnQiLCJfYiIsImNoYW5nZWQiLCJuZXdSZXN0YXVyYW50cyIsInJlc3RhdXJhbnRJdGVtIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50SXRlbURldGFpbF9jYXRlZ29yeSIsIl9SZXN0YXVyYW50SXRlbURldGFpbF9uYW1lIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rpc3RhbmNlIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rlc2NyaXB0aW9uIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2xpbmsiLCJfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSIsIl9SZXN0YXVyYW50SXRlbURldGFpbF9mYXZvcml0ZUljb25EQkxpc3RlbmVyIiwiUmVzdGF1cmFudEl0ZW1EZXRhaWwiLCJyZXN0YXVyYW50Q29udGVudCIsInJlc3RhdXJhbnRfX2xpbmsiLCJyZXN0YXVyYW50X19idXR0b25Db250YWluZXIiLCIkYnV0dG9uQm94IiwiY29uc29sZSIsImxvZyIsIk5ld1Jlc3RhdXJhbnRGb3JtIiwiSFRNTEZvcm1FbGVtZW50IiwiRElTVEFOQ0VTX1JFUVVSSUVEIiwibnVtIiwiRElTVEFOQ0VTX1RFWFRTIiwiU3RyaW5nIiwiX05ld1Jlc3RhdXJhbnRNb2RhbF9pbnN0YW5jZXMiLCJfTmV3UmVzdGF1cmFudE1vZGFsX3RpdGxlIiwiX05ld1Jlc3RhdXJhbnRNb2RhbF9mb3JtIiwiX05ld1Jlc3RhdXJhbnRNb2RhbF92YWxpZGF0ZVJlcXVpcmVkVmFsdWVzIiwiX05ld1Jlc3RhdXJhbnRNb2RhbF9pbnZpc2libGVFcnJvck1lc3NhZ2UiLCJfTmV3UmVzdGF1cmFudE1vZGFsX3NldFN1Ym1pdEV2ZW50IiwiX05ld1Jlc3RhdXJhbnRNb2RhbF9nZXRWYWx1ZXMiLCJfTmV3UmVzdGF1cmFudE1vZGFsX3JlcmVuZGVyQXBwIiwiX2MiLCJpc05vdFZhbGlkQ2F0ZWdvcnkiLCJpc05vdFZhbGlkRGlzdGFuY2UiLCJOdW1iZXIiLCJpc05hTiIsImlzTm90VmFsaWROYW1lIiwicHJldmVudERlZmF1bHQiLCJkaXN0YW5jZU51bWVyaWMiLCJjYXRlZ29yeU9ubHkiLCJlbGVtZW50cyIsIm5hbWVkSXRlbSIsImdldEZvcm0iLCJPbk9mZkJ1dHRvbiIsIl9UYWJfc2VsZWN0ZWQiLCJFTEVNRU5UX05BTUUiLCJnZXRTZWxlY3RlZCIsIl9BbGxSZXN0YXVyYW50QXBwX2luc3RhbmNlcyIsIl9BbGxSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciIsIl9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnRMaXN0IiwiX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSIsIl9BbGxSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0IiwiX0FsbFJlc3RhdXJhbnRBcHBfc2V0TW9jayIsIl9BbGxSZXN0YXVyYW50QXBwX2dldERCIiwiQWxsUmVzdGF1cmFudEFwcCIsIm5ld1Jlc3RhdXJhbnRMaXN0IiwiX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMiLCJfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciIsIl9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QiLCJfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UiLCJfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0IiwiX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9zZXRNb2NrIiwiX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9nZXREQiIsIl9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0REJSYXciLCJGYXZvcml0ZVJlc3RhdXJhbnRBcHAiLCJ0YXJnZXRSZXN0YXVyYW50IiwiX01haW5BcHBfbmF2VGFiIiwiX01haW5BcHBfYWxsUmVzdGF1cmFudEFwcCIsIl9NYWluQXBwX2Zhdm9yaXRlUmVzdGF1cmFudEFwcCIsIl9NYWluQXBwX25ld1Jlc3RhdXJhbnRNb2RhbCIsIl9NYWluQXBwX3Jlc3RhdXJhbnREZXRhaWxNb2RhbCIsImRhdGFzZXQiXSwic291cmNlUm9vdCI6IiJ9