(()=>{"use strict";var t={509:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".eRlIIF278cpmiHq2vS6P {\r\n  width: 100%;\r\n  height: 44px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n}\r\n\r\n.eRlIIF278cpmiHq2vS6P:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.LyznXMKWC8RkefhT72Bf {\r\n  border: 1px solid var(--grey-300);\r\n  background: transparent;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\n.KF_WGp1jezQkqJFk7DjU {\r\n  background: var(--primary-color);\r\n\r\n  color: var(--grey-100);\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/BasicButton.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;;EAEZ,kBAAkB;;EAElB,YAAY;EACZ,kBAAkB;;EAElB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,uBAAuB;;EAEvB,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;;EAEhC,sBAAsB;AACxB",sourcesContent:[".button {\r\n  width: 100%;\r\n  height: 44px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n}\r\n\r\n.button:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.buttonSecondary {\r\n  border: 1px solid var(--grey-300);\r\n  background: transparent;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\n.buttonPrimary {\r\n  background: var(--primary-color);\r\n\r\n  color: var(--grey-100);\r\n}\r\n"],sourceRoot:""}]),a.locals={button:"eRlIIF278cpmiHq2vS6P",buttonSecondary:"LyznXMKWC8RkefhT72Bf",buttonPrimary:"KF_WGp1jezQkqJFk7DjU"};const o=a},516:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,"/* 음식점 추가 모달 *****************************************/\r\n\r\n.modal--open {\r\n  display: block;\r\n  height: 100%;\r\n  background: white;\r\n}\r\n\r\n.modal-backdrop {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  background: rgba(0, 0, 0, 0.35);\r\n}\r\n.modal--open .modal-backdrop {\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n\r\n.modal-container {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 80%;\r\n\r\n  padding: 32px 16px;\r\n\r\n  border-radius: 8px 8px 0px 0px;\r\n  background: var(--grey-100);\r\n}\r\n\r\n.modal--open .modal-container {\r\n  visibility: visible;\r\n  opacity: 1;\r\n  overflow-y: auto;\r\n}\r\n.modal--open .modal-container::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.modal-title {\r\n  margin-bottom: 16px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/BasicModal.css"],names:[],mappings:"AAAA,sDAAsD;;AAEtD;EACE,cAAc;EACd,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,qCAAqC;;EAErC,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,+BAA+B;AACjC;AACA;EACE,mBAAmB;EACnB,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,qCAAqC;;EAErC,eAAe;EACf,SAAS;EACT,OAAO;EACP,WAAW;EACX,WAAW;;EAEX,kBAAkB;;EAElB,8BAA8B;EAC9B,2BAA2B;AAC7B;;AAEA;EACE,mBAAmB;EACnB,UAAU;EACV,gBAAgB;AAClB;AACA;EACE,aAAa;AACf;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:["/* 음식점 추가 모달 *****************************************/\r\n\r\n.modal--open {\r\n  display: block;\r\n  height: 100%;\r\n  background: white;\r\n}\r\n\r\n.modal-backdrop {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  background: rgba(0, 0, 0, 0.35);\r\n}\r\n.modal--open .modal-backdrop {\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n\r\n.modal-container {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity 0.24s ease-in-out;\r\n\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 80%;\r\n\r\n  padding: 32px 16px;\r\n\r\n  border-radius: 8px 8px 0px 0px;\r\n  background: var(--grey-100);\r\n}\r\n\r\n.modal--open .modal-container {\r\n  visibility: visible;\r\n  opacity: 1;\r\n  overflow-y: auto;\r\n}\r\n.modal--open .modal-container::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.modal-title {\r\n  margin-bottom: 16px;\r\n}\r\n"],sourceRoot:""}]);const o=a},50:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".restaurant-filter-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  padding: 0 16px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.restaurant-filter {\r\n  padding: 8px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/FilterContainer.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd",sourcesContent:[".restaurant-filter-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  padding: 0 16px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.restaurant-filter {\r\n  padding: 8px;\r\n}\r\n"],sourceRoot:""}]);const o=a},986:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".form-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.input-box__input-set.vertical {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.input-box__input-set.horizontal {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.form-item label {\r\n  color: var(--grey-400);\r\n  font-size: 14px;\r\n}\r\n\r\n.form-item--required label::after {\r\n  padding-left: 4px;\r\n\r\n  color: var(--primary-color);\r\n  content: '*';\r\n}\r\n\r\n.form-item .help-text {\r\n  color: var(--grey-300);\r\n}\r\n\r\n.form-item input,\r\n.form-item textarea,\r\n.form-item select {\r\n  padding: 8px;\r\n  margin: 6px 0;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  font-size: 16px;\r\n  width: 100%;\r\n}\r\n\r\n.form-item textarea {\r\n  resize: none;\r\n}\r\n\r\n.form-item textarea {\r\n  height: 60px;\r\n}\r\n\r\n.form-item select {\r\n  height: 44px;\r\n\r\n  padding: 8px;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\ninput[name='name'],\r\ninput[name='link'] {\r\n  height: 44px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/InputBox.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,iBAAiB;;EAEjB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;;EAEZ,YAAY;;EAEZ,iCAAiC;EACjC,kBAAkB;;EAElB,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;AACd",sourcesContent:[".form-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.input-box__input-set.vertical {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.input-box__input-set.horizontal {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.form-item label {\r\n  color: var(--grey-400);\r\n  font-size: 14px;\r\n}\r\n\r\n.form-item--required label::after {\r\n  padding-left: 4px;\r\n\r\n  color: var(--primary-color);\r\n  content: '*';\r\n}\r\n\r\n.form-item .help-text {\r\n  color: var(--grey-300);\r\n}\r\n\r\n.form-item input,\r\n.form-item textarea,\r\n.form-item select {\r\n  padding: 8px;\r\n  margin: 6px 0;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  font-size: 16px;\r\n  width: 100%;\r\n}\r\n\r\n.form-item textarea {\r\n  resize: none;\r\n}\r\n\r\n.form-item textarea {\r\n  height: 60px;\r\n}\r\n\r\n.form-item select {\r\n  height: 44px;\r\n\r\n  padding: 8px;\r\n\r\n  border: 1px solid var(--grey-200);\r\n  border-radius: 8px;\r\n\r\n  color: var(--grey-300);\r\n}\r\n\r\ninput[name='name'],\r\ninput[name='link'] {\r\n  height: 44px;\r\n}\r\n"],sourceRoot:""}]);const o=a},890:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".custom-tab {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n}\r\n\r\n.custom-tab > * {\r\n  padding: 9px 0;\r\n\r\n  flex: 1;\r\n\r\n  font-family: Roboto;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 24px;\r\n  letter-spacing: 0.5px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.custom-tab > *[checked='on'] {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--primary-color);\r\n  color: var(--primary-color);\r\n}\r\n.custom-tab > * {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--grey-300);\r\n  color: var(--grey-300);\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/NavTab.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,cAAc;;EAEd,OAAO;;EAEP,mBAAmB;EACnB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,qBAAqB;;EAErB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,wBAAwB;EACxB,kCAAkC;EAClC,2BAA2B;AAC7B;AACA;EACE,wBAAwB;EACxB,6BAA6B;EAC7B,sBAAsB;AACxB",sourcesContent:[".custom-tab {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n}\r\n\r\n.custom-tab > * {\r\n  padding: 9px 0;\r\n\r\n  flex: 1;\r\n\r\n  font-family: Roboto;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 24px;\r\n  letter-spacing: 0.5px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.custom-tab > *[checked='on'] {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--primary-color);\r\n  color: var(--primary-color);\r\n}\r\n.custom-tab > * {\r\n  border-bottom: 3px solid;\r\n  border-color: var(--grey-300);\r\n  color: var(--grey-300);\r\n}\r\n"],sourceRoot:""}]);const o=a},894:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,"select {\r\n  height: 44px;\r\n  min-width: 125px;\r\n\r\n  border: 1px solid #d0d5dd;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 16px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Basic/SelectBox.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB",sourcesContent:["select {\r\n  height: 44px;\r\n  min-width: 125px;\r\n\r\n  border: 1px solid #d0d5dd;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 16px;\r\n}\r\n"],sourceRoot:""}]);const o=a},499:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".gnb {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 64px;\r\n\r\n  padding: 0 16px;\r\n\r\n  background-color: var(--primary-color);\r\n}\r\n\r\n.gnb__title {\r\n  color: #fcfcfd;\r\n}\r\n\r\n.gnb__button {\r\n  height: 40px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n}\r\n\r\n.gnb__button img {\r\n  display: block;\r\n  width: 40px;\r\n  height: 40px;\r\n  object-fit: contain;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/Header/Header.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;;EAEZ,eAAe;;EAEf,sCAAsC;AACxC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;;EAEZ,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB",sourcesContent:[".gnb {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 64px;\r\n\r\n  padding: 0 16px;\r\n\r\n  background-color: var(--primary-color);\r\n}\r\n\r\n.gnb__title {\r\n  color: #fcfcfd;\r\n}\r\n\r\n.gnb__button {\r\n  height: 40px;\r\n\r\n  border: none;\r\n  border-radius: 8px;\r\n  background: transparent;\r\n\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n}\r\n\r\n.gnb__button img {\r\n  display: block;\r\n  width: 40px;\r\n  height: 40px;\r\n  object-fit: contain;\r\n}\r\n"],sourceRoot:""}]);const o=a},342:(t,e,n)=>{n.d(e,{A:()=>c});var r=n(354),i=n.n(r),s=n(314),a=n.n(s),o=n(516),l=a()(i());l.i(o.A),l.push([t.id,".modal.basic-modal .detail-modal__container {\r\n  min-height: 556px;\r\n  height: 70vh !important;\r\n}\r\n.button-container {\r\n  display: flex;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/MainApp.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;AAGA;EACE,aAAa;AACf",sourcesContent:[".modal.basic-modal .detail-modal__container {\r\n  min-height: 556px;\r\n  height: 70vh !important;\r\n}\r\n\r\n@import url('./Basic/BasicModal.css');\r\n.button-container {\r\n  display: flex;\r\n}\r\n"],sourceRoot:""}]);const c=l},924:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".VkfmcSlc105QXXwB1yTP {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 64px;\r\n  height: 64px;\r\n  min-width: 64px;\r\n  min-height: 64px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border-radius: 50%;\r\n  background: var(--lighten-color);\r\n}\r\n\r\n.E90mOu6rYubjNsc7uCmV {\r\n  width: 36px;\r\n  height: 36px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantCategoryIcon.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;;EAEhB,kBAAkB;;EAElB,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,WAAW;EACX,YAAY;AACd",sourcesContent:[".restaurant__category {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 64px;\r\n  height: 64px;\r\n  min-width: 64px;\r\n  min-height: 64px;\r\n\r\n  margin-right: 16px;\r\n\r\n  border-radius: 50%;\r\n  background: var(--lighten-color);\r\n}\r\n\r\n.categoryIcon {\r\n  width: 36px;\r\n  height: 36px;\r\n}\r\n"],sourceRoot:""}]),a.locals={restaurant__category:"VkfmcSlc105QXXwB1yTP",categoryIcon:"E90mOu6rYubjNsc7uCmV"};const o=a},925:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".fXHLVliEE8LsA0GyysEm {\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n\r\n.HdCmGycu3hxDqHlCUuq2 {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.ZP7_AmooWl3lQtDx54R7 {\r\n  margin: 0;\r\n}\r\n\r\n.t_oHWbpeO2DwxqqegCNn {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.qRYbpYhBv29HPLbxjauv {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantItem.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;;EAEhC,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;AAC7B;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,4BAA4B;AAC9B",sourcesContent:[".restaurant {\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n\r\n.restaurant__info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.restaurant__name {\r\n  margin: 0;\r\n}\r\n\r\n.restaurant__distance {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.restaurant__description {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n"],sourceRoot:""}]),a.locals={restaurant:"fXHLVliEE8LsA0GyysEm",restaurant__info:"HdCmGycu3hxDqHlCUuq2",restaurant__name:"ZP7_AmooWl3lQtDx54R7",restaurant__distance:"t_oHWbpeO2DwxqqegCNn",restaurant__description:"qRYbpYhBv29HPLbxjauv"};const o=a},403:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".L1gzP4L6WvCIE4h20MGf {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n.fJow_ldVeDz3g4Pd7PrQ {\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 12px;\r\n}\r\n\r\n.ohxFQilFwHMemPm4YFZz {\r\n  margin: 0;\r\n}\r\n\r\n.L1gzP4L6WvCIE4h20MGf .ngCiHdrtCL6zjAF5YcVk {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.HzyStBOl2CS56iUuslpg {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 10;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.Mo9Gn2SFG4Yjv22NhJYM {\r\n  display: flex;\r\n  width: 100%;\r\n}\r\n.a71_W5lO7oWZOQ2yyWIN {\r\n  text-decoration: underline;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantItemDetail.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;;EAEhC,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,aAAa;AACf;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,WAAW;AACb;AACA;EACE,0BAA0B;AAC5B",sourcesContent:[".restaurant {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n\r\n  padding: 16px 8px;\r\n\r\n  border-bottom: 1px solid #e9eaed;\r\n\r\n  position: relative;\r\n}\r\n.restaurantContent {\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 12px;\r\n}\r\n\r\n.restaurant__name {\r\n  margin: 0;\r\n}\r\n\r\n.restaurant .restaurant__distance {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.restaurant__description {\r\n  display: -webkit-box;\r\n\r\n  padding-top: 8px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  -webkit-line-clamp: 10;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.restaurant__buttonContainer {\r\n  display: flex;\r\n  width: 100%;\r\n}\r\n.restaurant__link {\r\n  text-decoration: underline;\r\n}\r\n"],sourceRoot:""}]),a.locals={restaurant:"L1gzP4L6WvCIE4h20MGf",restaurantContent:"fJow_ldVeDz3g4Pd7PrQ",restaurant__name:"ohxFQilFwHMemPm4YFZz",restaurant__distance:"ngCiHdrtCL6zjAF5YcVk",restaurant__description:"HzyStBOl2CS56iUuslpg",restaurant__buttonContainer:"Mo9Gn2SFG4Yjv22NhJYM",restaurant__link:"a71_W5lO7oWZOQ2yyWIN"};const o=a},139:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,".restaurant-list-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  padding: 0 16px;\r\n  margin: 16px 0;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantList.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,eAAe;EACf,cAAc;AAChB",sourcesContent:[".restaurant-list-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  padding: 0 16px;\r\n  margin: 16px 0;\r\n}\r\n"],sourceRoot:""}]);const o=a},966:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,"* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nul,\r\nli {\r\n  list-style: hidden;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  font-family: sans-serif;\r\n  font-size: 16px;\r\n}\r\n\r\n:root {\r\n  --primary-color: #ec4a0a;\r\n  --lighten-color: #f6a88a;\r\n  --grey-100: #ffffff;\r\n  --grey-200: #d0d5dd;\r\n  --grey-300: #667085;\r\n  --grey-400: #344054;\r\n  --grey-500: #000000;\r\n}\r\n\r\n.text-title {\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-subtitle {\r\n  font-size: 18px;\r\n  line-height: 28px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-body {\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n}\r\n\r\n.text-caption {\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  font-weight: 400;\r\n}\r\n\r\n.error {\r\n  color: rgb(213, 93, 23);\r\n  height: 20px;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/global.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,kBAAkB;AACpB;;AAEA;;EAEE,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB",sourcesContent:["* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nul,\r\nli {\r\n  list-style: hidden;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  font-family: sans-serif;\r\n  font-size: 16px;\r\n}\r\n\r\n:root {\r\n  --primary-color: #ec4a0a;\r\n  --lighten-color: #f6a88a;\r\n  --grey-100: #ffffff;\r\n  --grey-200: #d0d5dd;\r\n  --grey-300: #667085;\r\n  --grey-400: #344054;\r\n  --grey-500: #000000;\r\n}\r\n\r\n.text-title {\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-subtitle {\r\n  font-size: 18px;\r\n  line-height: 28px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text-body {\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n}\r\n\r\n.text-caption {\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  font-weight: 400;\r\n}\r\n\r\n.error {\r\n  color: rgb(213, 93, 23);\r\n  height: 20px;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const o=a},211:(t,e,n)=>{n.d(e,{A:()=>d});var r=n(354),i=n.n(r),s=n(314),a=n.n(s),o=n(966),l=n(790),c=a()(i());c.i(o.A),c.i(l.A),c.push([t.id,"\r\n","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const d=c},790:(t,e,n)=>{n.d(e,{A:()=>o});var r=n(354),i=n.n(r),s=n(314),a=n.n(s)()(i());a.push([t.id,"* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\ninput {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n}\r\n\r\ntextarea {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n  resize: none;\r\n}\r\n\r\n:root {\r\n  cursor: default;\r\n}\r\n\r\nimg,\r\npicture,\r\nvideo,\r\nsvg {\r\n  display: block;\r\n  max-width: 100%;\r\n}\r\n\r\nbutton {\r\n  background: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\nol,\r\nul {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;EAIE,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;;EAEE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ",sourcesContent:["* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\ninput {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n}\r\n\r\ntextarea {\r\n  box-shadow: none;\r\n  outline: none;\r\n  border: none;\r\n  resize: none;\r\n}\r\n\r\n:root {\r\n  cursor: default;\r\n}\r\n\r\nimg,\r\npicture,\r\nvideo,\r\nsvg {\r\n  display: block;\r\n  max-width: 100%;\r\n}\r\n\r\nbutton {\r\n  background: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\nol,\r\nul {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n"],sourceRoot:""}]);const o=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);r&&a[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},a=[],o=0;o<t.length;o++){var l=t[o],c=r.base?l[0]+r.base:l[0],d=s[c]||0,A="".concat(c," ").concat(d);s[c]=d+1;var h=n(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var u=i(p,r);r.byIndex=o,e.splice(o,0,{identifier:A,updater:u,references:1})}a.push(A)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var o=n(s[a]);e[o].references--}for(var l=r(t,i),c=0;c<s.length;c++){var d=n(s[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}s=l}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={id:r,exports:{}};return t[r](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!t||!/^http(s?):/.test(t));)t=r[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{const t=n.p+"add-button.png";var e=n(72),r=n.n(e),i=n(825),s=n.n(i),a=n(659),o=n.n(a),l=n(56),c=n.n(l),d=n(540),A=n.n(d),h=n(113),p=n.n(h),u=n(499),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=A(),r()(u.A,m),u.A&&u.A.locals&&u.A.locals;const f={getElement(t,e){const n=t.querySelector(e);if(null===n)throw new Error(`요소 ${e}를 선택할 수 없습니다.`);return n},getElementAll:(t,e)=>t.querySelectorAll(e)};class E extends HTMLDivElement{constructor(){super(),this.role="banner"}connectedCallback(){this.render()}render(){this.classList.add("gnb"),this.innerHTML=`\n      <h1 class="gnb__title text-title">점심 뭐 먹지</h1>\n      <button type="button" class="gnb__button" aria-label="음식점 추가">\n        <img src=${t} alt="음식점 추가" />\n      </button>`,f.getElement(this,"button").addEventListener("click",(()=>{f.getElement(document.body,".main-app-new").renderNewRestaurantModal()}))}}customElements.define("header-bar",E,{extends:"div"});const g=Object.freeze({DISTANCES:[5,10,15,20,30],SORT_CRITERION:{이름순:"name",거리순:"distance"}}),b={한식:"korean",중식:"chinese",일식:"japanese",아시안:"asian",양식:"western",기타:"etc"},v=Object.assign({전체:"all"},b),w=Object.keys(v),y=Object.keys(b),C=Object.keys(g.SORT_CRITERION);var x=n(894),B={};B.styleTagTransform=p(),B.setAttributes=c(),B.insert=o().bind(null,"head"),B.domAPI=s(),B.insertStyleElement=A(),r()(x.A,B),x.A&&x.A.locals&&x.A.locals;var k,T,_,L,M=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n},S=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class j extends HTMLSelectElement{constructor(t=[],e=[],n=""){super(),k.add(this),this.values=[],T.set(this,[]),_.set(this,""),this.values=t,M(this,T,e,"f"),M(this,_,n,"f"),this.render()}set(t,e,n){this.values=t,M(this,T,e,"f"),M(this,_,n,"f"),this.render()}get(){return this.values[this.selectedIndex]}render(){this.classList.add("restaurant-filter"),this.name=S(this,_,"f"),this.id=`${S(this,_,"f")}-filter`,S(this,k,"m",L).call(this)}}T=new WeakMap,_=new WeakMap,k=new WeakSet,L=function(){for(let t=0;t<this.values.length;t++){const e=new Option(S(this,T,"f")[t],this.values[t]);this.add(e)}};const $=j;customElements.define("select-box",j,{extends:"select"});var P=n(50),R={};R.styleTagTransform=p(),R.setAttributes=c(),R.insert=o().bind(null,"head"),R.domAPI=s(),R.insertStyleElement=A(),r()(P.A,R),P.A&&P.A.locals&&P.A.locals;var W,I,Y=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n},H=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class q extends HTMLDivElement{constructor(){super(),W.set(this,void 0),I.set(this,void 0),Y(this,W,new $(w,w,"category"),"f"),Y(this,I,new $(C,C,"sorting"),"f"),this.render()}render(){this.append(H(this,W,"f")),this.append(H(this,I,"f"))}get(){return{category:H(this,W,"f").get(),sortCriteria:H(this,I,"f").get()}}setEvent(){this.addEventListener("change",(()=>{this.parentElement.render()}))}}W=new WeakMap,I=new WeakMap,customElements.define("filter-container",q,{extends:"div"});var z=n(516),N={};N.styleTagTransform=p(),N.setAttributes=c(),N.insert=o().bind(null,"head"),N.domAPI=s(),N.insertStyleElement=A(),r()(z.A,N),z.A&&z.A.locals&&z.A.locals;var O,F,D,V,U,Z=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)},X=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n};class G extends HTMLDivElement{constructor(){super(),O.add(this),F.set(this,void 0),D.set(this,void 0),this.classList.add("modal");const t=Array.from(this.querySelectorAll(".modal > *"));X(this,F,Z(this,O,"m",V).call(this),"f"),X(this,D,Z(this,O,"m",U).call(this),"f"),this.append(Z(this,F,"f")),this.append(Z(this,D,"f")),this.appendAll(t),Z(this,F,"f").addEventListener("click",(()=>{var t;null===(t=document.querySelector(".modal"))||void 0===t||t.classList.remove("modal--open")}))}appendAll(t){t.forEach((t=>Z(this,D,"f").append(t)))}removeAll(){Z(this,D,"f").replaceChildren()}replaceChildNodes(t){this.removeAll(),this.appendAll(t)}closeModal(){this.classList.remove("modal--open")}openModal(){this.classList.add("modal--open")}}F=new WeakMap,D=new WeakMap,O=new WeakSet,V=function(){const t=document.createElement("div");return t.classList.add("modal-backdrop"),t.addEventListener("click",this.closeModal.bind(this)),t},U=function(){const t=document.createElement("div");return this.getAttribute("class-container")&&(t.className=this.getAttribute("class-container")),t.classList.add("modal-container"),t};const Q=G;customElements.define("basic-modal",G,{extends:"div"});var J=n(509),K={};K.styleTagTransform=p(),K.setAttributes=c(),K.insert=o().bind(null,"head"),K.domAPI=s(),K.insertStyleElement=A(),r()(J.A,K);const tt=J.A&&J.A.locals?J.A.locals:void 0;var et;class nt extends HTMLButtonElement{constructor(t,e,n,r,i){super(),et.set(this,void 0),t=null!=t?t:this.getAttribute("style-variant"),e=null!=e?e:this.innerText,n=null!=n?n:this.getAttribute("type"),function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?i.call(t,n):i?i.value=n:e.set(t,n)}(this,et,t,"f"),this.innerText=e,this.setAttribute("type",n),this.classList.add(...null!=i?i:"");const s="primary"===function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,et,"f")?["button--primary",`${tt.buttonPrimary}`]:["button--secondary",`${tt.buttonSecondary}`];this.classList.add("button",`${tt.button}`,"text-caption"),this.classList.add(...s),this.addEventListener("click",(()=>{r()}))}render(){}}et=new WeakMap,customElements.define("basic-button",nt,{extends:"button"});const rt=nt,it=n.p+"favorite-icon-filled.png",st=n.p+"favorite-icon-lined.png";var at,ot;class lt extends HTMLImageElement{constructor(){super(),at.add(this),this.classList.add("clickable"),this.src=st,this.alt="즐겨찾기 아이콘",this.setAttribute("clicked","off"),function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,at,"m",ot).call(this)}attributeChangedCallback(t,e,n){"clicked"===t&&("on"===n?this.src=it:"off"===n&&(this.src=st))}isFavorite(){return"on"===this.getAttribute("clicked")}set(t){this.setAttribute("clicked",t?"on":"off")}on(){this.setAttribute("clicked","on")}off(){this.setAttribute("clicked","off")}isOn(){return"on"===this.getAttribute("clicked")}}at=new WeakSet,ot=function(){this.addEventListener("click",(()=>{"off"===this.getAttribute("clicked")?this.setAttribute("clicked","on"):this.setAttribute("clicked","off")}))},lt.observedAttributes=["clicked"],customElements.define("favorite-icon",lt,{extends:"img"});const ct=lt;var dt=n(986),At={};At.styleTagTransform=p(),At.setAttributes=c(),At.insert=o().bind(null,"head"),At.domAPI=s(),At.insertStyleElement=A(),r()(dt.A,At),dt.A&&dt.A.locals&&dt.A.locals;var ht,pt;class ut extends HTMLDivElement{constructor(t){super(),ht.add(this),this.styleVariant="vertical",this.name="",this.idName="",this.hasVerification=!1,this.isRequired=!1,this.helpText="",this.classList.add("input-box"),this.innerHTML=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,ht,"m",pt).call(this),this.$label=f.getElement(this,":scope label"),this.$input=f.getElement(this,":scope input"),this.$help=f.getElement(this,":scope > span"),this.$error=f.getElement(this,":scope > .error"),t&&this.setState(t),this.print()}setState(t){const{name:e,idName:n,classNames:r,styleVariant:i,child:s,hasVerification:a,isRequired:o,helpText:l}=t;this.name=e,this.idName=null!=n?n:"",this.classList.add(...null!=r?r:[]),this.styleVariant=i,this.hasVerification=null!=a&&a,this.isRequired=null!=o&&o,this.helpText=null!=l?l:"",f.getElement(this,".input-box__input-set").classList.add(`${i}`),void 0!==s&&(this.$input=s,f.getElement(this,".input").replaceWith(s)),this.classList.add("form-item"),this.isRequired&&this.classList.add("form-item--required"),this.print()}print(){this.$label.htmlFor=`${this.idName} text-caption`,this.$label.innerText=this.name,this.$input.classList.add(`input-box__${this.idName}`),this.$input.id=this.idName,this.helpText&&(this.$help.innerText=this.helpText),this.hasVerification&&(this.$error.innerText=`${this.name} 값은 필수 입력입니다.`)}visibleError(){this.$error.classList.remove("invisible")}invisibleError(){this.$error.classList.add("invisible")}}ht=new WeakSet,pt=function(){return'\n    <div class="input-box__input-set">\n      <label class="text-caption"></label>\n      <input type="text" class="input" />\n    </div>\n    <span class="help-text text-caption"></span>\n    <div class="error invisible"></span>\n    '},customElements.define("input-box",ut,{extends:"div"});class mt extends HTMLDivElement{constructor(){var t;super(),this.setAttribute("checked",null!==(t=this.getAttribute("checked"))&&void 0!==t?t:"off"),this.addEventListener("click",(()=>{this.isOn()?this.off():this.on()}))}isOn(){return"on"===this.getAttribute("checked")}on(){this.setAttribute("checked","on")}off(){this.setAttribute("checked","off")}}mt.observedAttributes=["checked"],customElements.define("on-off-button",mt,{extends:"div"});const ft=mt;var Et=n(890),gt={};gt.styleTagTransform=p(),gt.setAttributes=c(),gt.insert=o().bind(null,"head"),gt.domAPI=s(),gt.insertStyleElement=A(),r()(Et.A,gt),Et.A&&Et.A.locals&&Et.A.locals;var bt,vt,wt=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n},yt=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};const Ct="my-tab";class xt extends HTMLDivElement{constructor(){super(),bt.set(this,void 0),vt.set(this,void 0),this.classList.add("custom-tab",Ct),wt(this,bt,f.getElementAll(this,":scope > *"),"f"),wt(this,vt,f.getElement(this,":scope > *"),"f"),this.addEventListener("click",(t=>{t.target instanceof ft&&this.contains(t.target)&&(Array.from(yt(this,bt,"f")).forEach((t=>t.off())),t.target.on(),wt(this,vt,t.target,"f"))}))}getSelected(){return yt(this,vt,"f")}}bt=new WeakMap,vt=new WeakMap,customElements.define(Ct,xt,{extends:"div"});var Bt=n(924),kt={};kt.styleTagTransform=p(),kt.setAttributes=c(),kt.insert=o().bind(null,"head"),kt.domAPI=s(),kt.insertStyleElement=A(),r()(Bt.A,kt);const Tt=Bt.A&&Bt.A.locals?Bt.A.locals:void 0,_t={한식:n.p+"category-korean.png",아시안:n.p+"category-asian.png",일식:n.p+"category-japanese.png",중식:n.p+"category-chinese.png",양식:n.p+"category-western.png",기타:n.p+"category-etc.png"};class Lt extends HTMLDivElement{constructor(t,e){super(),this.$image=document.createElement("img"),t=null!=t?t:this.getAttribute("category"),this.classList.add("restaurant__category",`${Tt.restaurant__category}`,"category-icon"),this.setCategory(t),this.$image.alt=null!=e?e:"",this.append(this.$image)}setCategory(t){this.$image.src=_t[t]}}customElements.define("restaurant-category-icon",Lt,{extends:"div"});var Mt=n(925),St={};St.styleTagTransform=p(),St.setAttributes=c(),St.insert=o().bind(null,"head"),St.domAPI=s(),St.insertStyleElement=A(),r()(Mt.A,St);const jt=Mt.A&&Mt.A.locals?Mt.A.locals:void 0;var $t,Pt,Rt,Wt=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};$t=new WeakSet,Pt=function(){if(!this.name.length||this.name.length>20)throw new Error("[ERROR] 이름의 길이는 1~20자 여야 합니다.")},Rt=function(){if(this.description&&this.description.length>500)throw new Error("[ERROR] 음식점 설명 길이는 500자를 초과할 수 없습니다.")};const It=class{constructor(t){$t.add(this),this.name=t.name,this.distance=t.distance,this.category=t.category,this.description=t.description,this.link=t.link,this.isFavorite=t.isFavorite,Wt(this,$t,"m",Pt).call(this),Wt(this,$t,"m",Rt).call(this)}get(){const t={name:this.name,distance:this.distance,category:this.category};return this.description&&(t.description=this.description),this.link&&(t.link=this.link),void 0!==this.isFavorite&&(t.isFavorite=this.isFavorite),t}isEqual(t){return this.name===t.name&&this.distance===t.distance&&this.category===t.category}};class Yt{constructor(t){this.restaurants=t.map((t=>new It(t)))}get(){return this.restaurants.map((t=>t.get()))}filterByCategory(t){return"전체"===t?this.restaurants.map((t=>t.get())):this.restaurants.map((t=>t.get())).filter((e=>e.category===t))}sort(t){return"이름순"===t?this.sortByName():this.sortByDistance()}sortByName(){return this.restaurants.map((t=>t.get())).sort(((t,e)=>t.name.localeCompare(e.name)))}sortByDistance(){return this.restaurants.map((t=>t.get())).sort(((t,e)=>t.distance-e.distance))}add(t){if(this.has(t))throw new Error("[ERROR] 이미 존재하는 음식점입니다.");return this.restaurants.push(new It(t)),this.get()}has(t){return this.restaurants.some((e=>e.isEqual(t)))}remove(t){return this.restaurants.filter((e=>!e.isEqual(t))).map((t=>t.get()))}update(t){return new Yt(this.remove(t)).add(t)}}const Ht=Yt;var qt,zt,Nt,Ot,Ft=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};zt=new WeakMap,Nt=new WeakMap,qt=new WeakSet,Ot=function(){!function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?i.call(t,n):i?i.value=n:e.set(t,n)}(this,Nt,new Ht(this.get()),"f")};const Dt=class{constructor(){qt.add(this),zt.set(this,"restaurants"),Nt.set(this,new Ht([])),Ft(this,Nt,"f"),Ft(this,qt,"m",Ot).call(this)}getAfterFiltering(t,e){Ft(this,qt,"m",Ot).call(this);const n=Ft(this,Nt,"f").filterByCategory(t);return new Ht(n).sort(e)}get(){var t;return JSON.parse(null!==(t=localStorage.getItem(Ft(this,zt,"f")))&&void 0!==t?t:"[]")}set(t){localStorage.setItem(Ft(this,zt,"f"),JSON.stringify(t))}add(t){Ft(this,qt,"m",Ot).call(this),localStorage.setItem(Ft(this,zt,"f"),JSON.stringify(Ft(this,Nt,"f").add(t)))}remove(t){Ft(this,qt,"m",Ot).call(this),localStorage.setItem(Ft(this,zt,"f"),JSON.stringify(Ft(this,Nt,"f").remove(t)))}isEmpty(){return Ft(this,qt,"m",Ot).call(this),0===Ft(this,Nt,"f").get().length}};var Vt,Ut,Zt,Xt,Gt,Qt,Jt,Kt,te,ee,ne,re,ie,se=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n},ae=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class oe extends HTMLLIElement{constructor({category:t,name:e,distance:n,description:r,link:i,isFavorite:s}){super(),Vt.add(this),Ut.set(this,void 0),Zt.set(this,void 0),Xt.set(this,void 0),Gt.set(this,void 0),Qt.set(this,void 0),Jt.set(this,void 0),se(this,Ut,t,"f"),se(this,Gt,e,"f"),se(this,Zt,n,"f"),se(this,Xt,null!=r?r:"","f"),se(this,Qt,i,"f"),se(this,Jt,null!=s&&s,"f"),ae(this,Vt,"m",Kt).call(this),ae(this,Vt,"m",te).call(this),ae(this,Vt,"m",ee).call(this)}get(){return{category:ae(this,Ut,"f"),name:ae(this,Gt,"f"),distance:ae(this,Zt,"f"),description:ae(this,Xt,"f"),link:ae(this,Qt,"f"),isFavorite:ae(this,Jt,"f")}}}Ut=new WeakMap,Zt=new WeakMap,Xt=new WeakMap,Gt=new WeakMap,Qt=new WeakMap,Jt=new WeakMap,Vt=new WeakSet,Kt=function(){this.classList.add("restaurant",`${jt.restaurant}`),this.innerHTML=`\n    <div is="restaurant-category-icon" alt="음식점 로고"> </div>\n    <div class="restaurant__info ${jt.restaurant__info}">\n    <h3 class="restaurant__name text-subtitle ${jt.restaurant__name}"></h3>\n    <span class="restaurant__distance text-body  ${jt.restaurant__distance}"></span>\n    <p class="restaurant__description text-body ${jt.restaurant__description}">\n    </p>\n    <img is="favorite-icon" class="favorite-icon" style="width:26px; position:absolute; right:10px; top:10px;"/>\n    </div>\n   `},te=function(){f.getElement(this,'div[is="restaurant-category-icon"]').setCategory(ae(this,Ut,"f")),f.getElement(this,".restaurant__name").textContent=ae(this,Gt,"f"),f.getElement(this,".restaurant__distance").textContent=`캠퍼스부터 ${ae(this,Zt,"f")}분 내`,f.getElement(this,".restaurant__description").textContent=ae(this,Xt,"f"),f.getElement(this,'img[is="favorite-icon"]').set(ae(this,Jt,"f"))},ee=function(){this.addEventListener("click",ae(this,Vt,"m",ne).bind(this)),this.addEventListener("click",ae(this,Vt,"m",re).bind(this)),this.addEventListener("click",ae(this,Vt,"m",ie).bind(this))},ne=function(t){t.target instanceof HTMLElement&&(t.target instanceof ct||f.getElement(document.body,".main-app-new").paintDetailModal(this.get()))},re=function(t){t.target instanceof ct&&se(this,Jt,"on"===t.target.getAttribute("clicked"),"f")},ie=function(t){if(!(t.target instanceof ct))return;const e=(new Dt).get();(new Dt).set(new Ht(e).update(this.get())),f.getElement(document.body,".main-app-new").render()};const le=oe;customElements.define("restaurant-item",oe,{extends:"li"});var ce=n(139),de={};de.styleTagTransform=p(),de.setAttributes=c(),de.insert=o().bind(null,"head"),de.domAPI=s(),de.insertStyleElement=A(),r()(ce.A,de),ce.A&&ce.A.locals&&ce.A.locals;var Ae,he=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n},pe=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class ue extends HTMLUListElement{constructor(){super(),Ae.set(this,void 0),this.classList.add("restaurant-list"),he(this,Ae,[],"f")}paint(t){he(this,Ae,t,"f"),this.replaceChildren();const e=pe(this,Ae,"f").map((t=>new le(t)));this.append(...e)}get(){return pe(this,Ae,"f")}}Ae=new WeakMap,customElements.define("restaurant-list",ue,{extends:"ul"});var me=n(403),fe={};fe.styleTagTransform=p(),fe.setAttributes=c(),fe.insert=o().bind(null,"head"),fe.domAPI=s(),fe.insertStyleElement=A(),r()(me.A,fe);const Ee=me.A&&me.A.locals?me.A.locals:void 0;var ge,be,ve,we,ye,Ce,xe,Be,ke,Te,_e=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)},Le=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n};class Me extends HTMLLIElement{constructor(t){super(),ge.add(this),be.set(this,"기타"),ve.set(this,"빈 이름"),we.set(this,void 0),ye.set(this,void 0),Ce.set(this,void 0),xe.set(this,!1),_e(this,ge,"m",Be).call(this),void 0!==t&&this.setState(t),_e(this,ge,"m",ke).call(this)}setState({category:t,name:e,distance:n,description:r,link:i,isFavorite:s}){Le(this,be,t,"f"),Le(this,ve,e,"f"),Le(this,we,n,"f"),Le(this,ye,null!=r?r:"","f"),Le(this,Ce,null!=i?i:"","f"),Le(this,xe,null!=s&&s,"f")}get(){return{category:_e(this,be,"f"),name:_e(this,ve,"f"),distance:_e(this,we,"f"),description:_e(this,ye,"f"),link:_e(this,Ce,"f"),isFavorite:_e(this,xe,"f")}}}be=new WeakMap,ve=new WeakMap,we=new WeakMap,ye=new WeakMap,Ce=new WeakMap,xe=new WeakMap,ge=new WeakSet,Be=function(){this.classList.add("restaurant-item-detail",`${Ee.restaurant}`),this.innerHTML=`\n    <div class="restaurant-content ${Ee.restaurantContent}">\n      <div is="restaurant-category-icon"> </div>\n      <h3 class="restaurant__name text-subtitle ${Ee.restaurant__name}"></h3>\n      <span class="restaurant__distance text-body ${Ee.restaurant__distance}"></span>\n      <p class="restaurant__description text-body ${Ee.restaurant__description}"></p>\n      <a class="restaurant__link text-body ${Ee.restaurant__link}"></a>\n    </div>\n      <div class="restaurant__button-container ${Ee.restaurant__buttonContainer}" > </div>\n      <img is="favorite-icon" class="restaurant__favorite-icon" style="width:25px; position:absolute; right:10px; top:10px;"/>\n\n     `;const t=this.querySelector(".restaurant__button-container");t.append(new rt("secondary","삭제하기","reset",(()=>{(new Dt).remove(this.get()),this.parentElement.parentElement instanceof Q&&(this.parentElement.parentElement.closeModal(),f.getElement(document.body,"#main-app").render())}))),t.append(new rt("primary","닫기","submit",(()=>{this.parentElement.parentElement instanceof Q&&this.parentElement.parentElement.closeModal()}))),this.addEventListener("click",_e(this,ge,"m",Te).bind(this))},ke=function(){var t;f.getElement(this,'div[is="restaurant-category-icon"]').setCategory(_e(this,be,"f")),f.getElement(this,".restaurant__name").textContent=`${_e(this,ve,"f")}`,f.getElement(this,".restaurant__distance").textContent=`캠퍼스부터 ${_e(this,we,"f")}분 내`,f.getElement(this,".restaurant__description").textContent=null!==(t=_e(this,ye,"f"))&&void 0!==t?t:"",f.getElement(this,".restaurant__favorite-icon").set(_e(this,xe,"f"));const e=f.getElement(this,".restaurant__link");void 0!==_e(this,Ce,"f")&&(e.setAttribute("href",_e(this,Ce,"f")),e.textContent=_e(this,Ce,"f"))},Te=function(t){if(!(t.target instanceof ct))return;Le(this,xe,"on"===t.target.getAttribute("clicked"),"f");const e=(new Dt).get();(new Dt).set(new Ht(e).update(this.get())),f.getElement(document.body,".main-app-new").render()};const Se=Me;customElements.define("restaurant-item-detail",Me,{extends:"li"});var je,$e,Pe,Re,We,Ie,Ye,He=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class qe extends HTMLFormElement{constructor(){super(),je.add(this),this.innerHTML=He(this,je,"m",$e).call(this),this.$categorySelect=f.getElement(this,".category-select"),this.$nameInputBox=f.getElement(this,".name-input-box"),this.$distanceSelect=f.getElement(this,".distance-select"),He(this,je,"m",Pe).call(this),He(this,je,"m",Re).call(this),He(this,je,"m",We).call(this),He(this,je,"m",Ie).call(this),He(this,je,"m",Ye).call(this)}invisibleErrorMessage(){f.getElement(this,".category-select > .error").classList.add("invisible"),f.getElement(this,".distance-select > .error").classList.add("invisible"),this.$nameInputBox.invisibleError()}validateRequiredValues(t,e,n){const r="선택해주세요"===t,i=Number.isNaN(e),s=!n;return r&&f.getElement(this,".category-select > .error").classList.remove("invisible"),i&&f.getElement(this,".distance-select > .error").classList.remove("invisible"),s&&this.$nameInputBox.visibleError(),r||i||s}getValues(){return{name:this.elements.namedItem("name").value,distance:Number(this.elements.namedItem("distance").value),category:this.elements.namedItem("category").value,description:this.elements.namedItem("description").value,link:this.elements.namedItem("link").value}}}je=new WeakSet,$e=function(){return'\n    <div class="form-item form-item--required category-select">\n      <label for="category text-caption">카테고리</label>\n      <select is="select-box" class="category-input"></select>\n      <div class="error invisible">카테고리는 필수 입력입니다.</div>\n    </div>\n    \n    <div is="input-box" class="name-input-box"></div>\n\n    <div class="form-item form-item--required distance-select">\n      <label for="distance text-caption">거리(도보 이동 시간)</label>\n      <select is="select-box" class="distance-input"></select>\n      <div class="error invisible">거리 값은 필수 입력입니다.</div>\n    </div>\n\n    <div class="form-item">\n      <label for="description text-caption">설명</label>\n      <textarea name="description" id="description" cols="30" rows="5" class="description-input"></textarea>\n      <span class="help-text text-caption">메뉴 등 추가 정보를 입력해 주세요.</span>\n    </div>\n\n    <div is="input-box" class="link-input-box"></div>\n\n    <div class="button-container"></div>\n    '},Pe=function(){f.getElement(this,'.category-select select[is="select-box"]').set(["선택해주세요",...y],["선택해주세요",...y],"category")},Re=function(){f.getElement(this,'div[is="input-box"]').setState({styleVariant:"vertical",name:"이름",idName:"name",hasVerification:!0,isRequired:!0,classNames:["new-restaurant-form__name-input"]})},We=function(){const t=["선택해주세요",...g.DISTANCES.map((t=>`${t}`))],e=["선택해주세요",...g.DISTANCES.map((t=>`${String(t)}분 내`))];f.getElement(this,'.distance-select select[is="select-box"]').set(t,e,"distance")},Ie=function(){f.getElement(this,".link-input-box").setState({styleVariant:"vertical",name:"링크",idName:"link",helpText:"매장 정보를 확인할 수 있는 링크를 입력해 주세요."})},Ye=function(){const t=f.getElement(this,".button-container");t.append(new rt("secondary","취소하기","reset",(()=>{f.getElement(document.body,".new-restaurant-modal").closeModal()}),["new-restaurant-form__cancel-button"])),t.append(new rt("primary","추가하기","submit",(()=>{}),["new-restaurant-form__submit-button"]))},customElements.define("new-restaurant-form",qe,{extends:"form"});var ze=n(211),Ne={};Ne.styleTagTransform=p(),Ne.setAttributes=c(),Ne.insert=o().bind(null,"head"),Ne.domAPI=s(),Ne.insertStyleElement=A(),r()(ze.A,Ne),ze.A&&ze.A.locals&&ze.A.locals;const Oe=[{name:"피양콩할머니",category:"한식",distance:10,description:"평양 출신의 할머니가 수십 년간 운영해온 비지 전문점 피양콩 할마니. 두부를 빼지 않은\n되비지를 맛볼 수 있는 곳으로, ‘피양’은 평안도 사투리로 ‘평양’을 의미한다. 딸과 함께\n운영하는 이곳에선 맷돌로 직접 간 콩만을 사용하며, 일체의 조미료를 넣지 않은 건강식을\n선보인다. 콩비지와 피양 만두가 이곳의 대표 메뉴지만, 할머니가 옛날 방식을 고수하며\n만들어내는 비지전골 또한 이 집의 역사를 느낄 수 있는 특별한 메뉴다. 반찬은 손님들이\n먹고 싶은 만큼 덜어 먹을 수 있게 준비돼 있다.",link:"https://www.naver.com"},{name:"친친",category:"중식",distance:5,description:"Since 2004 편리한 교통과 주차, 그리고 관록만큼 깊은 맛과 정성으로 정통 중식의 세계를\n    펼쳐갑니다.",link:"https://www.naver.com"},{name:"잇쇼우",category:"일식",distance:10,description:"잇쇼우는 정통 자가제면 사누끼 우동이 대표메뉴입니다. 기술은 정성을 이길 수 없다는\n    신념으로 모든 음식에 최선을 다하는 잇쇼우는 고객 한분 한분께 최선을 다하겠습니다",link:"https://www.naver.com"},{name:"이태리키친",category:"양식",distance:20,description:"늘 변화를 추구하는 이태리키친입니다.",link:"https://www.naver.com"},{name:"호야빈 삼성점",category:"아시안",distance:15,description:"푸짐한 양에 국물이 일품인 쌀국수",link:"https://www.naver.com"},{name:"도스타코스 선릉점",category:"기타",distance:5,description:"멕시칸 캐주얼 그릴",link:"https://www.naver.com"},{name:"얌샘김밥",category:"한식",distance:5,description:"멕시칸 캐주얼 그릴",link:"https://www.naver.com"}];var Fe,De,Ve,Ue,Ze,Xe,Ge,Qe,Je=function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n},Ke=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class tn extends HTMLDivElement{constructor(){super(),Fe.add(this),De.set(this,void 0),Ve.set(this,void 0),Ue.set(this,void 0),this.observedAttributes=[],this.classList.add("restaurant-app"),this.innerHTML='\n    <div is="filter-container" class="restaurant-filter-container"></div>\n    <ul is="restaurant-list" class="restaurant-list-container restaurant-list"></ul>\n    ',Je(this,De,f.getElement(this,".restaurant-filter-container"),"f"),Ke(this,De,"f").addEventListener("change",Ke(this,Fe,"m",Qe).bind(this)),Je(this,Ve,f.getElement(this,".restaurant-list"),"f"),Je(this,Ue,new Dt,"f"),this.render()}render(){Ke(this,Ve,"f").paint(Ke(this,Fe,"m",Ze).call(this))}}De=new WeakMap,Ve=new WeakMap,Ue=new WeakMap,Fe=new WeakSet,Ze=function(){Ke(this,Ue,"f").isEmpty()&&Ke(this,Fe,"m",Xe).call(this);const{category:t,sortCriteria:e}=Ke(this,De,"f").get();return Ke(this,Fe,"m",Ge).call(this,t,e)},Xe=function(){Ke(this,Ue,"f").set(Oe)},Ge=function(t,e){return Ke(this,Ue,"f").getAfterFiltering(t,e)},Qe=function(t){this.render()},customElements.define("all-restaurant-app",tn,{extends:"div"});var en,nn,rn,sn,an,on,ln=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};class cn extends HTMLDivElement{constructor(){super(),en.add(this),nn.set(this,void 0),this.observedAttributes=[],this.classList.add("favorite-restaurant-app"),this.innerHTML='\n    <div is="filter-container" class="restaurant-filter-container"></div>\n    <ul is="restaurant-list" class="restaurant-list-container restaurant-list"></ul>\n    ',this.$filterContainer=f.getElement(this,".restaurant-filter-container"),this.$filterContainer.addEventListener("change",ln(this,en,"m",on).bind(this)),this.$restaurantList=f.getElement(this,".restaurant-list"),function(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?i.call(t,n):i?i.value=n:e.set(t,n)}(this,nn,new Dt,"f"),this.render()}render(){this.$restaurantList.paint(ln(this,en,"m",rn).call(this))}}nn=new WeakMap,en=new WeakSet,rn=function(){ln(this,nn,"f").isEmpty()&&ln(this,en,"m",sn).call(this);const{category:t,sortCriteria:e}=this.$filterContainer.get();return ln(this,en,"m",an).call(this,t,e).filter((t=>t.isFavorite))},sn=function(){ln(this,nn,"f").set(Oe)},an=function(t,e){return ln(this,nn,"f").getAfterFiltering(t,e)},on=function(){this.render()},customElements.define("favorite-restaurant-app",cn,{extends:"div"});var dn=n(342),An={};An.styleTagTransform=p(),An.setAttributes=c(),An.insert=o().bind(null,"head"),An.domAPI=s(),An.insertStyleElement=A(),r()(dn.A,An),dn.A&&dn.A.locals&&dn.A.locals;var hn,pn;class un extends HTMLDivElement{constructor(){super(),hn.add(this),this.observedAttributes=[],this.className="main-app-new",this.id="main-app",this.innerHTML='\n    <div is="my-tab" class="restaurant-nav-tab" style="margin-top:22px;"> \n      <div is="on-off-button" class="text-subtitle" checked="on" data-id="all">모든 음식점</div>\n      <div is="on-off-button" class="text-subtitle" data-id="favorite">자주 가는 음식점</div>\n    </div>\n\n    <div is="all-restaurant-app" class="all-restaurant-app" data-id="all"></div>\n    <div is="favorite-restaurant-app" class="hidden favorite-restaurant-app" data-id="favorite"></div>\n    \n    <div is="basic-modal" class="modal basic-modal " class-container="new-restaurant-modal__container" >\n      <div class="modal-item new-restaurant-modal-item">  \n        <h2 class="modal-title text-title">새로운 음식점</h2>\n        <form is="new-restaurant-form" class="new-restaurant-form"></form> \n      </div>\n      <div class="modal-item detail-modal-item">  \n        <li is="restaurant-item-detail" class="restaurant-item-detail" style=""></li>\n      </div>\n    </div>\n\n    ',this.$navTab=f.getElement(this,'div[is="my-tab"]'),this.$modal=f.getElement(this,".basic-modal"),this.$allRestaurantApp=f.getElement(this,".all-restaurant-app"),this.$favoriteRestaurantApp=f.getElement(this,".favorite-restaurant-app"),this.render(),this.$navTab.addEventListener("click",this.render.bind(this)),f.getElement(this.$modal,".new-restaurant-form").addEventListener("submit",function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,hn,"m",pn).bind(this)),this.$newRestaurantModalItem=f.getElement(this.$modal,".new-restaurant-modal-item"),this.$detailRestaurantModalItem=f.getElement(this.$modal,".detail-modal-item")}render(){this.$allRestaurantApp===this.querySelector(`.main-app-new > div[data-id="${this.$navTab.getSelected().dataset.id}"]`)?(this.$favoriteRestaurantApp.classList.add("hidden"),this.$allRestaurantApp.classList.remove("hidden"),this.$allRestaurantApp.render()):(this.$allRestaurantApp.classList.add("hidden"),this.$favoriteRestaurantApp.classList.remove("hidden"),this.$favoriteRestaurantApp.render())}renderNewRestaurantModal(){this.$detailRestaurantModalItem.classList.add("hidden"),this.$newRestaurantModalItem.classList.remove("hidden"),this.$modal.openModal()}paintDetailModal(t){this.$newRestaurantModalItem.classList.add("hidden"),this.$detailRestaurantModalItem.classList.remove("hidden"),this.$modal.openModal(),this.$detailRestaurantModalItem.replaceChildren(new Se(t))}}hn=new WeakSet,pn=function(t){const e=f.getElement(this.$modal,".new-restaurant-form");t.preventDefault(),e.invisibleErrorMessage();const{name:n,distance:r,category:i,description:s,link:a}=e.getValues();e.validateRequiredValues(i,r,n)||((new Dt).add({name:n,distance:r,category:i,description:s,link:a}),this.render(),e.invisibleErrorMessage(),this.$modal.closeModal())},customElements.define("main-app",un,{extends:"div"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWlCekMsR0FDYi9RLEtBQUsrWCx3QkFBd0J6UCxVQUFVQyxJQUFJLFVBQzNDdkksS0FBS2dZLDJCQUEyQjFQLFVBQVVyRixPQUFPLFVBQ2pEakQsS0FBSzRYLE9BQU9wTCxZQUNaeE0sS0FBS2dZLDJCQUEyQjNMLGdCQUFnQixJQUFJLEdBQXFCMEUsR0FDN0UsRUFFSjBHLEdBQXFCLElBQUkzTSxRQUFXNE0sR0FBd0IsU0FBK0J2VCxHQUN2RixNQUFNK1QsRUFBUXZRLEVBQUlDLFdBQVc1SCxLQUFLNFgsT0FBUSx3QkFDMUN6VCxFQUFFZ1UsaUJBQ0ZELEVBQU16Qyx3QkFDTixNQUFNLEtBQUU5SyxFQUFJLFNBQUU4RixFQUFRLFNBQUVyRixFQUFRLFlBQUVtRixFQUFXLEtBQUVHLEdBQVN3SCxFQUFNbEMsWUFDMURrQyxFQUFNeEMsdUJBQXVCdEssRUFBVXFGLEVBQVU5RixNQUVyRCxJQUFJLElBQXNCcEMsSUFBSSxDQUFFb0MsT0FBTThGLFdBQVVyRixXQUFVbUYsY0FBYUcsU0FDdkUxUSxLQUFLcUksU0FDTDZQLEVBQU16Qyx3QkFDTnpWLEtBQUs0WCxPQUFPckwsYUFDaEIsRUFDQTNELGVBQWVDLE9BQU8sV0FBWSxHQUFTLENBQUVDLFFBQVMsTyIsInNvdXJjZXMiOlsid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNCdXR0b24ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0Jhc2ljTW9kYWwuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvRmlsdGVyQ29udGFpbmVyLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0lucHV0Qm94LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL05hdlRhYi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9TZWxlY3RCb3guY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9NYWluQXBwLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRDYXRlZ29yeUljb24ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50SXRlbURldGFpbC5tb2R1bGUuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Nzcy9nbG9iYWwuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Nzcy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY3NzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2FkZC1idXR0b24ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5jc3M/MDU1ZSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlsL2RvbS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29uc3RhbnRzL0NvbmRpdGlvbi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL1NlbGVjdEJveC5jc3M/Zjg1MiIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL1NlbGVjdEJveC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0ZpbHRlckNvbnRhaW5lci5jc3M/ODQ0YSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0ZpbHRlckNvbnRhaW5lci50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL0Jhc2ljTW9kYWwuY3NzP2E1ODYiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9CYXNpY01vZGFsLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNCdXR0b24ubW9kdWxlLmNzcz83NDdlIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNCdXR0b24udHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9hc3NldHMvZmF2b3JpdGUtaWNvbi1maWxsZWQucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2Zhdm9yaXRlLWljb24tbGluZWQucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvRmF2b3JpdGVJY29uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvSW5wdXRCb3guY3NzPzYyY2IiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9CYXNpYy9JbnB1dEJveC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jhc2ljL09uT2ZmQnV0dG9uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvTmF2VGFiLmNzcz80MDU1Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvTmF2VGFiLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudENhdGVnb3J5SWNvbi5tb2R1bGUuY3NzP2FlZGQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50Q2F0ZWdvcnlJY29uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2NhdGVnb3J5LWtvcmVhbi5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9hc3NldHMvY2F0ZWdvcnktYXNpYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vYXNzZXRzL2NhdGVnb3J5LWphcGFuZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL2Fzc2V0cy9jYXRlZ29yeS1jaGluZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL2Fzc2V0cy9jYXRlZ29yeS13ZXN0ZXJuLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL2Fzc2V0cy9jYXRlZ29yeS1ldGMucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudEl0ZW0ubW9kdWxlLmNzcz9lNTA1Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbnMvZW50aXRpZXMvUmVzdGF1cmFudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9kb21haW5zL2VudGl0aWVzL1Jlc3RhdXJhbnRDb2xsZWN0aW9uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbnMvc2VydmljZXMvUmVzdGF1cmFudERCU2VydmljZS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QuY3NzP2IxNTEiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtRGV0YWlsLm1vZHVsZS5jc3M/MTA3MyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtRGV0YWlsLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvTmV3UmVzdGF1cmFudEZvcm0udHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY3NzL2luZGV4LmNzcz9mN2VhIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL21vY2svcmVzdGF1cmFudExpc3QubW9jay50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0FsbFJlc3RhdXJhbnRBcHAudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9GYXZvcml0ZVJlc3RhdXJhbnRBcHAudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9NYWluQXBwLmNzcz9jM2FkIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvTWFpbkFwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5lUmxJSUYyNzhjcG1pSHEydlM2UCB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG5cXHJcXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG5cXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5lUmxJSUYyNzhjcG1pSHEydlM2UDpsYXN0LWNoaWxkIHtcXHJcXG4gIG1hcmdpbi1yaWdodDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLkx5em5YTUtXQzhSa2VmaFQ3MkJmIHtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMzAwKTtcXHJcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcclxcblxcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXHJcXG59XFxyXFxuXFxyXFxuLktGX1dHcDFqZXpRa3FKRms3RGpVIHtcXHJcXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcblxcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMTAwKTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNCdXR0b24ubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxZQUFZOztFQUVaLGtCQUFrQjs7RUFFbEIsWUFBWTtFQUNaLGtCQUFrQjs7RUFFbEIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUNBQWlDO0VBQ2pDLHVCQUF1Qjs7RUFFdkIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0NBQWdDOztFQUVoQyxzQkFBc0I7QUFDeEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJ1dHRvbiB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG5cXHJcXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG5cXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25TZWNvbmRhcnkge1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0zMDApO1xcclxcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9uUHJpbWFyeSB7XFxyXFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXHJcXG5cXHJcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTEwMCk7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImJ1dHRvblwiOiBcImVSbElJRjI3OGNwbWlIcTJ2UzZQXCIsXG5cdFwiYnV0dG9uU2Vjb25kYXJ5XCI6IFwiTHl6blhNS1dDOFJrZWZoVDcyQmZcIixcblx0XCJidXR0b25QcmltYXJ5XCI6IFwiS0ZfV0dwMWplelFrcUpGazdEalVcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiDsnYzsi53soJAg7LaU6rCAIOuqqOuLrCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXHJcXG5cXHJcXG4ubW9kYWwtLW9wZW4ge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWJhY2tkcm9wIHtcXHJcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjRzIGVhc2UtaW4tb3V0O1xcclxcblxcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcblxcclxcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjM1KTtcXHJcXG59XFxyXFxuLm1vZGFsLS1vcGVuIC5tb2RhbC1iYWNrZHJvcCB7XFxyXFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcclxcbiAgb3BhY2l0eTogMTtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWNvbnRhaW5lciB7XFxyXFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxuICBvcGFjaXR5OiAwO1xcclxcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI0cyBlYXNlLWluLW91dDtcXHJcXG5cXHJcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gIGJvdHRvbTogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogODAlO1xcclxcblxcclxcbiAgcGFkZGluZzogMzJweCAxNnB4O1xcclxcblxcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwcHggMHB4O1xcclxcbiAgYmFja2dyb3VuZDogdmFyKC0tZ3JleS0xMDApO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtLW9wZW4gLm1vZGFsLWNvbnRhaW5lciB7XFxyXFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcclxcbiAgb3BhY2l0eTogMTtcXHJcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxyXFxufVxcclxcbi5tb2RhbC0tb3BlbiAubW9kYWwtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtdGl0bGUge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvQmFzaWNNb2RhbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsc0RBQXNEOztBQUV0RDtFQUNFLGNBQWM7RUFDZCxZQUFZO0VBQ1osaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixxQ0FBcUM7O0VBRXJDLGVBQWU7RUFDZixNQUFNO0VBQ04sUUFBUTtFQUNSLFNBQVM7RUFDVCxPQUFPOztFQUVQLCtCQUErQjtBQUNqQztBQUNBO0VBQ0UsbUJBQW1CO0VBQ25CLFVBQVU7QUFDWjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YscUNBQXFDOztFQUVyQyxlQUFlO0VBQ2YsU0FBUztFQUNULE9BQU87RUFDUCxXQUFXO0VBQ1gsV0FBVzs7RUFFWCxrQkFBa0I7O0VBRWxCLDhCQUE4QjtFQUM5QiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIOydjOyLneygkCDstpTqsIAg66qo64usICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcclxcblxcclxcbi5tb2RhbC0tb3BlbiB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtYmFja2Ryb3Age1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbiAgb3BhY2l0eTogMDtcXHJcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNHMgZWFzZS1pbi1vdXQ7XFxyXFxuXFxyXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICB0b3A6IDA7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGJvdHRvbTogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuXFxyXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcclxcbn1cXHJcXG4ubW9kYWwtLW9wZW4gLm1vZGFsLWJhY2tkcm9wIHtcXHJcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxuICBvcGFjaXR5OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtY29udGFpbmVyIHtcXHJcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjRzIGVhc2UtaW4tb3V0O1xcclxcblxcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgYm90dG9tOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiA4MCU7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAzMnB4IDE2cHg7XFxyXFxuXFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDBweCAwcHg7XFxyXFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1ncmV5LTEwMCk7XFxyXFxufVxcclxcblxcclxcbi5tb2RhbC0tb3BlbiAubW9kYWwtY29udGFpbmVyIHtcXHJcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxuICBvcGFjaXR5OiAxO1xcclxcbiAgb3ZlcmZsb3cteTogYXV0bztcXHJcXG59XFxyXFxuLm1vZGFsLS1vcGVuIC5tb2RhbC1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5tb2RhbC10aXRsZSB7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXNpYy9GaWx0ZXJDb250YWluZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4Qjs7RUFFOUIsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZm9ybS1pdGVtIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcclxcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcXHJcXG59XFxyXFxuXFxyXFxuLmlucHV0LWJveF9faW5wdXQtc2V0LnZlcnRpY2FsIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4uaW5wdXQtYm94X19pbnB1dC1zZXQuaG9yaXpvbnRhbCB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSBsYWJlbCB7XFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS00MDApO1xcclxcbiAgZm9udC1zaXplOiAxNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtLS1yZXF1aXJlZCBsYWJlbDo6YWZ0ZXIge1xcclxcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XFxyXFxuXFxyXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxuICBjb250ZW50OiAnKic7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gLmhlbHAtdGV4dCB7XFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIGlucHV0LFxcclxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEsXFxyXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbiAgbWFyZ2luOiA2cHggMDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG5cXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIHRleHRhcmVhIHtcXHJcXG4gIHJlc2l6ZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSB7XFxyXFxuICBoZWlnaHQ6IDYwcHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDhweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG5cXHJcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxyXFxufVxcclxcblxcclxcbmlucHV0W25hbWU9J25hbWUnXSxcXHJcXG5pbnB1dFtuYW1lPSdsaW5rJ10ge1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXNpYy9JbnB1dEJveC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUJBQWlCOztFQUVqQiwyQkFBMkI7RUFDM0IsWUFBWTtBQUNkOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBOzs7RUFHRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZOztFQUVaLGlDQUFpQztFQUNqQyxrQkFBa0I7O0VBRWxCLHNCQUFzQjtBQUN4Qjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmZvcm0taXRlbSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XFxyXFxufVxcclxcblxcclxcbi5pbnB1dC1ib3hfX2lucHV0LXNldC52ZXJ0aWNhbCB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuXFxyXFxuLmlucHV0LWJveF9faW5wdXQtc2V0Lmhvcml6b250YWwge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcclxcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXHJcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcclxcblxcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbiAgY29udGVudDogJyonO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSBpbnB1dCxcXHJcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcclxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXHJcXG4gIHBhZGRpbmc6IDhweDtcXHJcXG4gIG1hcmdpbjogNnB4IDA7XFxyXFxuXFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuXFxyXFxuICBmb250LXNpemU6IDE2cHg7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSB7XFxyXFxuICByZXNpemU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcclxcbiAgaGVpZ2h0OiA2MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiA4cHg7XFxyXFxuXFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuXFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFtuYW1lPSduYW1lJ10sXFxyXFxuaW5wdXRbbmFtZT0nbGluayddIHtcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmN1c3RvbS10YWIge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxyXFxufVxcclxcblxcclxcbi5jdXN0b20tdGFiID4gKiB7XFxyXFxuICBwYWRkaW5nOiA5cHggMDtcXHJcXG5cXHJcXG4gIGZsZXg6IDE7XFxyXFxuXFxyXFxuICBmb250LWZhbWlseTogUm9ib3RvO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcclxcbiAgbGV0dGVyLXNwYWNpbmc6IDAuNXB4O1xcclxcblxcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmN1c3RvbS10YWIgPiAqW2NoZWNrZWQ9J29uJ10ge1xcclxcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkO1xcclxcbiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXHJcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXHJcXG59XFxyXFxuLmN1c3RvbS10YWIgPiAqIHtcXHJcXG4gIGJvcmRlci1ib3R0b206IDNweCBzb2xpZDtcXHJcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvTmF2VGFiLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGNBQWM7O0VBRWQsT0FBTzs7RUFFUCxtQkFBbUI7RUFDbkIsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixpQkFBaUI7RUFDakIscUJBQXFCOztFQUVyQixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixrQ0FBa0M7RUFDbEMsMkJBQTJCO0FBQzdCO0FBQ0E7RUFDRSx3QkFBd0I7RUFDeEIsNkJBQTZCO0VBQzdCLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY3VzdG9tLXRhYiB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIHBhZGRpbmc6IDAgMTZweDtcXHJcXG59XFxyXFxuXFxyXFxuLmN1c3RvbS10YWIgPiAqIHtcXHJcXG4gIHBhZGRpbmc6IDlweCAwO1xcclxcblxcclxcbiAgZmxleDogMTtcXHJcXG5cXHJcXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxyXFxuICBmb250LXNpemU6IDE2cHg7XFxyXFxuICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBsZXR0ZXItc3BhY2luZzogMC41cHg7XFxyXFxuXFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uY3VzdG9tLXRhYiA+ICpbY2hlY2tlZD0nb24nXSB7XFxyXFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQ7XFxyXFxuICBib3JkZXItY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcclxcbn1cXHJcXG4uY3VzdG9tLXRhYiA+ICoge1xcclxcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkO1xcclxcbiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxyXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJzZWxlY3Qge1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgbWluLXdpZHRoOiAxMjVweDtcXHJcXG5cXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMGQ1ZGQ7XFxyXFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG5cXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQmFzaWMvU2VsZWN0Qm94LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFlBQVk7RUFDWixnQkFBZ0I7O0VBRWhCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcInNlbGVjdCB7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICBtaW4td2lkdGg6IDEyNXB4O1xcclxcblxcclxcbiAgYm9yZGVyOiAxcHggc29saWQgI2QwZDVkZDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcclxcblxcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZ25iIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcblxcclxcbiAgcGFkZGluZzogMCAxNnB4O1xcclxcblxcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5nbmJfX3RpdGxlIHtcXHJcXG4gIGNvbG9yOiAjZmNmY2ZkO1xcclxcbn1cXHJcXG5cXHJcXG4uZ25iX19idXR0b24ge1xcclxcbiAgaGVpZ2h0OiA0MHB4O1xcclxcblxcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxuICBmb250LXNpemU6IDI0cHg7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5nbmJfX2J1dHRvbiBpbWcge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB3aWR0aDogNDBweDtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsWUFBWTs7RUFFWixlQUFlOztFQUVmLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxZQUFZOztFQUVaLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0VBQ2YsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZ25iIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcblxcclxcbiAgcGFkZGluZzogMCAxNnB4O1xcclxcblxcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5nbmJfX3RpdGxlIHtcXHJcXG4gIGNvbG9yOiAjZmNmY2ZkO1xcclxcbn1cXHJcXG5cXHJcXG4uZ25iX19idXR0b24ge1xcclxcbiAgaGVpZ2h0OiA0MHB4O1xcclxcblxcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxyXFxuXFxyXFxuICBmb250LXNpemU6IDI0cHg7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5nbmJfX2J1dHRvbiBpbWcge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB3aWR0aDogNDBweDtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9CYXNpYy9CYXNpY01vZGFsLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1vZGFsLmJhc2ljLW1vZGFsIC5kZXRhaWwtbW9kYWxfX2NvbnRhaW5lciB7XFxyXFxuICBtaW4taGVpZ2h0OiA1NTZweDtcXHJcXG4gIGhlaWdodDogNzB2aCAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG4uYnV0dG9uLWNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9NYWluQXBwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGlCQUFpQjtFQUNqQix1QkFBdUI7QUFDekI7QUFHQTtFQUNFLGFBQWE7QUFDZlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubW9kYWwuYmFzaWMtbW9kYWwgLmRldGFpbC1tb2RhbF9fY29udGFpbmVyIHtcXHJcXG4gIG1pbi1oZWlnaHQ6IDU1NnB4O1xcclxcbiAgaGVpZ2h0OiA3MHZoICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbkBpbXBvcnQgdXJsKCcuL0Jhc2ljL0Jhc2ljTW9kYWwuY3NzJyk7XFxyXFxuLmJ1dHRvbi1jb250YWluZXIge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLlZrZm1jU2xjMTA1UVhYd0IxeVRQIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICB3aWR0aDogNjRweDtcXHJcXG4gIGhlaWdodDogNjRweDtcXHJcXG4gIG1pbi13aWR0aDogNjRweDtcXHJcXG4gIG1pbi1oZWlnaHQ6IDY0cHg7XFxyXFxuXFxyXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxyXFxuXFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1saWdodGVuLWNvbG9yKTtcXHJcXG59XFxyXFxuXFxyXFxuLkU5MG1PdTZyWXViak5zYzd1Q21WIHtcXHJcXG4gIHdpZHRoOiAzNnB4O1xcclxcbiAgaGVpZ2h0OiAzNnB4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50Q2F0ZWdvcnlJY29uLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixnQkFBZ0I7O0VBRWhCLGtCQUFrQjs7RUFFbEIsa0JBQWtCO0VBQ2xCLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJlc3RhdXJhbnRfX2NhdGVnb3J5IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICB3aWR0aDogNjRweDtcXHJcXG4gIGhlaWdodDogNjRweDtcXHJcXG4gIG1pbi13aWR0aDogNjRweDtcXHJcXG4gIG1pbi1oZWlnaHQ6IDY0cHg7XFxyXFxuXFxyXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxyXFxuXFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1saWdodGVuLWNvbG9yKTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhdGVnb3J5SWNvbiB7XFxyXFxuICB3aWR0aDogMzZweDtcXHJcXG4gIGhlaWdodDogMzZweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicmVzdGF1cmFudF9fY2F0ZWdvcnlcIjogXCJWa2ZtY1NsYzEwNVFYWHdCMXlUUFwiLFxuXHRcImNhdGVnb3J5SWNvblwiOiBcIkU5MG1PdTZyWXViak5zYzd1Q21WXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmZYSExWbGlFRThMc0EwR3l5c0VtIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcclxcblxcclxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxyXFxuXFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcblxcclxcbi5IZENtR3ljdTNoeERxSGxDVXVxMiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG59XFxyXFxuXFxyXFxuLlpQN19BbW9vV2wzbFF0RHg1NFI3IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuLnRfb0hXYnBlTzJEd3hxcWVnQ05uIHtcXHJcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXHJcXG59XFxyXFxuXFxyXFxuLnFSWWJwWWhCdjI5SFBMYnhqYXV2IHtcXHJcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcclxcblxcclxcbiAgcGFkZGluZy10b3A6IDhweDtcXHJcXG5cXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXHJcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCOztFQUV2QixpQkFBaUI7O0VBRWpCLGdDQUFnQzs7RUFFaEMsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxvQkFBb0I7O0VBRXBCLGdCQUFnQjs7RUFFaEIsZ0JBQWdCO0VBQ2hCLHVCQUF1QjtFQUN2QixxQkFBcUI7RUFDckIsNEJBQTRCO0FBQzlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXHJcXG5cXHJcXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcclxcblxcclxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxyXFxuXFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXVyYW50X19pbmZvIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudF9fbmFtZSB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXVyYW50X19kaXN0YW5jZSB7XFxyXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxyXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXHJcXG5cXHJcXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxyXFxuXFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XFxyXFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZXN0YXVyYW50XCI6IFwiZlhITFZsaUVFOExzQTBHeXlzRW1cIixcblx0XCJyZXN0YXVyYW50X19pbmZvXCI6IFwiSGRDbUd5Y3UzaHhEcUhsQ1V1cTJcIixcblx0XCJyZXN0YXVyYW50X19uYW1lXCI6IFwiWlA3X0Ftb29XbDNsUXREeDU0UjdcIixcblx0XCJyZXN0YXVyYW50X19kaXN0YW5jZVwiOiBcInRfb0hXYnBlTzJEd3hxcWVnQ05uXCIsXG5cdFwicmVzdGF1cmFudF9fZGVzY3JpcHRpb25cIjogXCJxUllicFloQnYyOUhQTGJ4amF1dlwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5MMWd6UDRMNld2Q0lFNGgyME1HZiB7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcclxcblxcclxcbiAgcGFkZGluZzogMTZweCA4cHg7XFxyXFxuXFxyXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZWFlZDtcXHJcXG5cXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuLmZKb3dfbGRWZUR6M2c0UGQ3UHJRIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgcm93LWdhcDogMTJweDtcXHJcXG59XFxyXFxuXFxyXFxuLm9oeEZRaWxGd0hNZW1QbTRZRlp6IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuLkwxZ3pQNEw2V3ZDSUU0aDIwTUdmIC5uZ0NpSGRydENMNnpqQUY1WWNWayB7XFxyXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5IenlTdEJPbDJDUzU2aVV1c2xwZyB7XFxyXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXHJcXG5cXHJcXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxyXFxuXFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDEwO1xcclxcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXHJcXG59XFxyXFxuXFxyXFxuLk1vOUduMlNGRzRZanYyMk5oSllNIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuLmE3MV9XNWxPN29XWk9RMnl5V0lOIHtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50SXRlbURldGFpbC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsOEJBQThCO0VBQzlCLHVCQUF1Qjs7RUFFdkIsaUJBQWlCOztFQUVqQixnQ0FBZ0M7O0VBRWhDLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxvQkFBb0I7O0VBRXBCLGdCQUFnQjs7RUFFaEIsZ0JBQWdCO0VBQ2hCLHVCQUF1QjtFQUN2QixzQkFBc0I7RUFDdEIsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFdBQVc7QUFDYjtBQUNBO0VBQ0UsMEJBQTBCO0FBQzVCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50IHtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXHJcXG5cXHJcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcclxcblxcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG4ucmVzdGF1cmFudENvbnRlbnQge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICByb3ctZ2FwOiAxMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdGF1cmFudF9fbmFtZSB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXVyYW50IC5yZXN0YXVyYW50X19kaXN0YW5jZSB7XFxyXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxyXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXHJcXG5cXHJcXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxyXFxuXFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDEwO1xcclxcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3RhdXJhbnRfX2J1dHRvbkNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcbi5yZXN0YXVyYW50X19saW5rIHtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJyZXN0YXVyYW50XCI6IFwiTDFnelA0TDZXdkNJRTRoMjBNR2ZcIixcblx0XCJyZXN0YXVyYW50Q29udGVudFwiOiBcImZKb3dfbGRWZUR6M2c0UGQ3UHJRXCIsXG5cdFwicmVzdGF1cmFudF9fbmFtZVwiOiBcIm9oeEZRaWxGd0hNZW1QbTRZRlp6XCIsXG5cdFwicmVzdGF1cmFudF9fZGlzdGFuY2VcIjogXCJuZ0NpSGRydENMNnpqQUY1WWNWa1wiLFxuXHRcInJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uXCI6IFwiSHp5U3RCT2wyQ1M1NmlVdXNscGdcIixcblx0XCJyZXN0YXVyYW50X19idXR0b25Db250YWluZXJcIjogXCJNbzlHbjJTRkc0WWp2MjJOaEpZTVwiLFxuXHRcInJlc3RhdXJhbnRfX2xpbmtcIjogXCJhNzFfVzVsTzdvV1pPUTJ5eVdJTlwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZXN0YXVyYW50LWxpc3QtY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcclxcbiAgcGFkZGluZzogMCAxNnB4O1xcclxcbiAgbWFyZ2luOiAxNnB4IDA7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLGVBQWU7RUFDZixjQUFjO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50LWxpc3QtY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcclxcbiAgcGFkZGluZzogMCAxNnB4O1xcclxcbiAgbWFyZ2luOiAxNnB4IDA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbnVsLFxcclxcbmxpIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCxcXHJcXG5ib2R5IHtcXHJcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxyXFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxyXFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcclxcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXHJcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxyXFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcclxcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnRleHQtdGl0bGUge1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNjAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1zdWJ0aXRsZSB7XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjhweDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxufVxcclxcblxcclxcbi50ZXh0LWJvZHkge1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1jYXB0aW9uIHtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG59XFxyXFxuXFxyXFxuLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZ2IoMjEzLCA5MywgMjMpO1xcclxcbiAgaGVpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcbi5pbnZpc2libGUge1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4uY2xpY2thYmxlIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9nbG9iYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxzQkFBc0I7QUFDeEI7O0FBRUE7O0VBRUUsa0JBQWtCO0FBQ3BCOztBQUVBOztFQUVFLHVCQUF1QjtFQUN2QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0Usd0JBQXdCO0VBQ3hCLHdCQUF3QjtFQUN4QixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbnVsLFxcclxcbmxpIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCxcXHJcXG5ib2R5IHtcXHJcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxyXFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxyXFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcclxcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXHJcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxyXFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcclxcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnRleHQtdGl0bGUge1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNjAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1zdWJ0aXRsZSB7XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjhweDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxufVxcclxcblxcclxcbi50ZXh0LWJvZHkge1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbn1cXHJcXG5cXHJcXG4udGV4dC1jYXB0aW9uIHtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG59XFxyXFxuXFxyXFxuLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZ2IoMjEzLCA5MywgMjMpO1xcclxcbiAgaGVpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcbi5pbnZpc2libGUge1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4uY2xpY2thYmxlIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dsb2JhbC5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuYm9keTo6LXdlYmtpdC1zY3JvbGxiYXIge1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXQge1xcclxcbiAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbnRleHRhcmVhIHtcXHJcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxyXFxuICBvdXRsaW5lOiBub25lO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgcmVzaXplOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxyXFxufVxcclxcblxcclxcbmltZyxcXHJcXG5waWN0dXJlLFxcclxcbnZpZGVvLFxcclxcbnN2ZyB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICBib3JkZXI6IDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZSB7XFxyXFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbm9sLFxcclxcbnVsIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsWUFBWTtFQUNaLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7Ozs7RUFJRSxjQUFjO0VBQ2QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixTQUFTO0VBQ1QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixpQkFBaUI7QUFDbkI7O0FBRUE7O0VBRUUsZ0JBQWdCO0VBQ2hCLFNBQVM7RUFDVCxVQUFVO0FBQ1pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5Ojotd2Via2l0LXNjcm9sbGJhciB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dCB7XFxyXFxuICBib3gtc2hhZG93OiBub25lO1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxudGV4dGFyZWEge1xcclxcbiAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICByZXNpemU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbjpyb290IHtcXHJcXG4gIGN1cnNvcjogZGVmYXVsdDtcXHJcXG59XFxyXFxuXFxyXFxuaW1nLFxcclxcbnBpY3R1cmUsXFxyXFxudmlkZW8sXFxyXFxuc3ZnIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24ge1xcclxcbiAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG4gIGJvcmRlcjogMDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuYSB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxuICBib3JkZXItc3BhY2luZzogMDtcXHJcXG59XFxyXFxuXFxyXFxub2wsXFxyXFxudWwge1xcclxcbiAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWRkLWJ1dHRvbi5wbmdcIjsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSGVhZGVyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSGVhZGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBjb25zdCBkb20gPSB7XG4gICAgZ2V0RWxlbWVudChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOyalOyGjCAke3NlbGVjdG9yfeulvCDshKDtg53tlaAg7IiYIOyXhuyKteuLiOuLpC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgZ2V0RWxlbWVudEFsbChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICB9LFxufTtcbiIsImltcG9ydCBBZGRCdXR0b24gZnJvbSAnQGFzc2V0cy9hZGQtYnV0dG9uLnBuZyc7XG5pbXBvcnQgJy4vSGVhZGVyLmNzcyc7XG5pbXBvcnQgeyBkb20gfSBmcm9tICdAL3V0aWwvZG9tJztcbmNsYXNzIEhlYWRlciBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yb2xlID0gJ2Jhbm5lcic7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZ25iJyk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxyXG4gICAgICA8aDEgY2xhc3M9XCJnbmJfX3RpdGxlIHRleHQtdGl0bGVcIj7soJDsi6wg662QIOuoueyngDwvaDE+XHJcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZ25iX19idXR0b25cIiBhcmlhLWxhYmVsPVwi7J2M7Iud7KCQIOy2lOqwgFwiPlxyXG4gICAgICAgIDxpbWcgc3JjPSR7QWRkQnV0dG9ufSBhbHQ9XCLsnYzsi53soJAg7LaU6rCAXCIgLz5cclxuICAgICAgPC9idXR0b24+YDtcbiAgICAgICAgZG9tLmdldEVsZW1lbnQodGhpcywgJ2J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgZG9tLmdldEVsZW1lbnQoZG9jdW1lbnQuYm9keSwgJy5tYWluLWFwcC1uZXcnKS5yZW5kZXJOZXdSZXN0YXVyYW50TW9kYWwoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdoZWFkZXItYmFyJywgSGVhZGVyLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuIiwiZXhwb3J0IGNvbnN0IENPTkRJVElPTlMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBESVNUQU5DRVM6IFs1LCAxMCwgMTUsIDIwLCAzMF0sXG4gICAgU09SVF9DUklURVJJT046IHtcbiAgICAgICAg7J2066aE7IicOiAnbmFtZScsXG4gICAgICAgIOqxsOumrOyInDogJ2Rpc3RhbmNlJyxcbiAgICB9LFxufSk7XG5leHBvcnQgY29uc3QgQ0FURUdPUklFUyA9IHtcbiAgICDtlZzsi506ICdrb3JlYW4nLFxuICAgIOykkeyLnTogJ2NoaW5lc2UnLFxuICAgIOydvOyLnTogJ2phcGFuZXNlJyxcbiAgICDslYTsi5zslYg6ICdhc2lhbicsXG4gICAg7JaR7IudOiAnd2VzdGVybicsXG4gICAg6riw7YOAOiAnZXRjJyxcbn07XG5leHBvcnQgY29uc3QgQ0FURUdPUklFU19XSVRIX0FMTCA9IE9iamVjdC5hc3NpZ24oeyDsoITssrQ6ICdhbGwnIH0sIENBVEVHT1JJRVMpO1xuZXhwb3J0IGNvbnN0IENBVEVHT1JJRVNfV0lUSF9BTExfS0VZUyA9IE9iamVjdC5rZXlzKENBVEVHT1JJRVNfV0lUSF9BTEwpO1xuZXhwb3J0IGNvbnN0IENBVEVHT1JJRVNfS0VZUyA9IE9iamVjdC5rZXlzKENBVEVHT1JJRVMpO1xuZXhwb3J0IGNvbnN0IFNPUlRfQ1JJVEVSSU9OX0tFWVMgPSBPYmplY3Qua2V5cyhDT05ESVRJT05TLlNPUlRfQ1JJVEVSSU9OKTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWxlY3RCb3guY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWxlY3RCb3guY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9TZWxlY3RCb3hfaW5zdGFuY2VzLCBfU2VsZWN0Qm94X3RleHRzLCBfU2VsZWN0Qm94X25hbWUsIF9TZWxlY3RCb3hfbWFrZU9wdGlvblRhZ3M7XG5pbXBvcnQgJy4vU2VsZWN0Qm94LmNzcyc7XG5jbGFzcyBTZWxlY3RCb3ggZXh0ZW5kcyBIVE1MU2VsZWN0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IodmFsdWVzID0gW10sIHRleHRzID0gW10sIG5hbWUgPSAnJykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfU2VsZWN0Qm94X2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMudmFsdWVzID0gW107XG4gICAgICAgIF9TZWxlY3RCb3hfdGV4dHMuc2V0KHRoaXMsIFtdKTtcbiAgICAgICAgX1NlbGVjdEJveF9uYW1lLnNldCh0aGlzLCAnJyk7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9TZWxlY3RCb3hfdGV4dHMsIHRleHRzLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1NlbGVjdEJveF9uYW1lLCBuYW1lLCBcImZcIik7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHNldCh2YWx1ZXMsIHRleHRzLCBuYW1lKSB7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9TZWxlY3RCb3hfdGV4dHMsIHRleHRzLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1NlbGVjdEJveF9uYW1lLCBuYW1lLCBcImZcIik7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzW3RoaXMuc2VsZWN0ZWRJbmRleF07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50LWZpbHRlcicpO1xuICAgICAgICB0aGlzLm5hbWUgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWxlY3RCb3hfbmFtZSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmlkID0gYCR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VsZWN0Qm94X25hbWUsIFwiZlwiKX0tZmlsdGVyYDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VsZWN0Qm94X2luc3RhbmNlcywgXCJtXCIsIF9TZWxlY3RCb3hfbWFrZU9wdGlvblRhZ3MpLmNhbGwodGhpcyk7XG4gICAgfVxufVxuX1NlbGVjdEJveF90ZXh0cyA9IG5ldyBXZWFrTWFwKCksIF9TZWxlY3RCb3hfbmFtZSA9IG5ldyBXZWFrTWFwKCksIF9TZWxlY3RCb3hfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1NlbGVjdEJveF9tYWtlT3B0aW9uVGFncyA9IGZ1bmN0aW9uIF9TZWxlY3RCb3hfbWFrZU9wdGlvblRhZ3MoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBvcHRpb25UYWcgPSBuZXcgT3B0aW9uKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlbGVjdEJveF90ZXh0cywgXCJmXCIpW2ldLCB0aGlzLnZhbHVlc1tpXSk7XG4gICAgICAgIHRoaXMuYWRkKG9wdGlvblRhZyk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEJveDtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc2VsZWN0LWJveCcsIFNlbGVjdEJveCwgeyBleHRlbmRzOiAnc2VsZWN0JyB9KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9GaWx0ZXJDb250YWluZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9GaWx0ZXJDb250YWluZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0Q2F0ZWdvcnlCb3gsIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveDtcbmltcG9ydCB7IENBVEVHT1JJRVNfV0lUSF9BTExfS0VZUywgU09SVF9DUklURVJJT05fS0VZUyB9IGZyb20gJ0AvY29uc3RhbnRzL0NvbmRpdGlvbic7XG5pbXBvcnQgU2VsZWN0Qm94IGZyb20gJy4vU2VsZWN0Qm94JztcbmltcG9ydCAnLi9GaWx0ZXJDb250YWluZXIuY3NzJztcbmNsYXNzIEZpbHRlckNvbnRhaW5lciBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RDYXRlZ29yeUJveC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RTb3J0Qm94LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0Q2F0ZWdvcnlCb3gsIG5ldyBTZWxlY3RCb3goQ0FURUdPUklFU19XSVRIX0FMTF9LRVlTLCBDQVRFR09SSUVTX1dJVEhfQUxMX0tFWVMsICdjYXRlZ29yeScpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RTb3J0Qm94LCBuZXcgU2VsZWN0Qm94KFNPUlRfQ1JJVEVSSU9OX0tFWVMsIFNPUlRfQ1JJVEVSSU9OX0tFWVMsICdzb3J0aW5nJyksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmFwcGVuZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0Q2F0ZWdvcnlCb3gsIFwiZlwiKSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RTb3J0Qm94LCBcImZcIikpO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYXRlZ29yeTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsdGVyQ29udGFpbmVyX3NlbGVjdENhdGVnb3J5Qm94LCBcImZcIikuZ2V0KCksXG4gICAgICAgICAgICBzb3J0Q3JpdGVyaWE6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RTb3J0Qm94LCBcImZcIikuZ2V0KCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5yZW5kZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuX0ZpbHRlckNvbnRhaW5lcl9zZWxlY3RDYXRlZ29yeUJveCA9IG5ldyBXZWFrTWFwKCksIF9GaWx0ZXJDb250YWluZXJfc2VsZWN0U29ydEJveCA9IG5ldyBXZWFrTWFwKCk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2ZpbHRlci1jb250YWluZXInLCBGaWx0ZXJDb250YWluZXIsIHsgZXh0ZW5kczogJ2RpdicgfSk7XG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJDb250YWluZXI7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQmFzaWNNb2RhbC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Jhc2ljTW9kYWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9CYXNpY01vZGFsX2luc3RhbmNlcywgX0Jhc2ljTW9kYWxfYmFja2Ryb3AsIF9CYXNpY01vZGFsX21vZGFsQ29udGFpbmVyLCBfQmFzaWNNb2RhbF9tYWtlQmFja2Ryb3AsIF9CYXNpY01vZGFsX21ha2VNb2RhbENvbnRhaW5lcjtcbmltcG9ydCAnLi9CYXNpY01vZGFsLmNzcyc7XG5jbGFzcyBCYXNpY01vZGFsIGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfQmFzaWNNb2RhbF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfQmFzaWNNb2RhbF9iYWNrZHJvcC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0Jhc2ljTW9kYWxfbW9kYWxDb250YWluZXIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbW9kYWwnKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsID4gKicpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQmFzaWNNb2RhbF9iYWNrZHJvcCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQmFzaWNNb2RhbF9pbnN0YW5jZXMsIFwibVwiLCBfQmFzaWNNb2RhbF9tYWtlQmFja2Ryb3ApLmNhbGwodGhpcyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQmFzaWNNb2RhbF9tb2RhbENvbnRhaW5lciwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQmFzaWNNb2RhbF9pbnN0YW5jZXMsIFwibVwiLCBfQmFzaWNNb2RhbF9tYWtlTW9kYWxDb250YWluZXIpLmNhbGwodGhpcyksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5hcHBlbmQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQmFzaWNNb2RhbF9iYWNrZHJvcCwgXCJmXCIpKTtcbiAgICAgICAgdGhpcy5hcHBlbmQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQmFzaWNNb2RhbF9tb2RhbENvbnRhaW5lciwgXCJmXCIpKTtcbiAgICAgICAgdGhpcy5hcHBlbmRBbGwoY2hpbGRyZW4pO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9CYXNpY01vZGFsX2JhY2tkcm9wLCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLS1vcGVuJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhcHBlbmRBbGwoY2hpbGRyZW4pIHtcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jhc2ljTW9kYWxfbW9kYWxDb250YWluZXIsIFwiZlwiKS5hcHBlbmQoY2hpbGQpKTtcbiAgICB9XG4gICAgcmVtb3ZlQWxsKCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9CYXNpY01vZGFsX21vZGFsQ29udGFpbmVyLCBcImZcIikucmVwbGFjZUNoaWxkcmVuKCk7XG4gICAgfVxuICAgIHJlcGxhY2VDaGlsZE5vZGVzKGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQWxsKGNoaWxkcmVuKTtcbiAgICB9XG4gICAgY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC0tb3BlbicpO1xuICAgIH1cbiAgICBvcGVuTW9kYWwoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbW9kYWwtLW9wZW4nKTtcbiAgICB9XG59XG5fQmFzaWNNb2RhbF9iYWNrZHJvcCA9IG5ldyBXZWFrTWFwKCksIF9CYXNpY01vZGFsX21vZGFsQ29udGFpbmVyID0gbmV3IFdlYWtNYXAoKSwgX0Jhc2ljTW9kYWxfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0Jhc2ljTW9kYWxfbWFrZUJhY2tkcm9wID0gZnVuY3Rpb24gX0Jhc2ljTW9kYWxfbWFrZUJhY2tkcm9wKCkge1xuICAgIGNvbnN0IGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYmFja2Ryb3AuY2xhc3NMaXN0LmFkZCgnbW9kYWwtYmFja2Ryb3AnKTtcbiAgICBiYWNrZHJvcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VNb2RhbC5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gYmFja2Ryb3A7XG59LCBfQmFzaWNNb2RhbF9tYWtlTW9kYWxDb250YWluZXIgPSBmdW5jdGlvbiBfQmFzaWNNb2RhbF9tYWtlTW9kYWxDb250YWluZXIoKSB7XG4gICAgY29uc3QgbW9kYWxDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoJ2NsYXNzLWNvbnRhaW5lcicpKSB7XG4gICAgICAgIG1vZGFsQ29udGFpbmVyLmNsYXNzTmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdjbGFzcy1jb250YWluZXInKTtcbiAgICB9XG4gICAgbW9kYWxDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbW9kYWwtY29udGFpbmVyJyk7XG4gICAgcmV0dXJuIG1vZGFsQ29udGFpbmVyO1xufTtcbmV4cG9ydCBkZWZhdWx0IEJhc2ljTW9kYWw7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2Jhc2ljLW1vZGFsJywgQmFzaWNNb2RhbCwgeyBleHRlbmRzOiAnZGl2JyB9KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9CYXNpY0J1dHRvbi5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9CYXNpY0J1dHRvbi5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9CYXNpY0J1dHRvbl9pc1ByaW1hcnk7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9CYXNpY0J1dHRvbi5tb2R1bGUuY3NzJztcbmNsYXNzIEJhc2ljQnV0dG9uIGV4dGVuZHMgSFRNTEJ1dHRvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHN0eWxlVmFyaWFudCwgaW5uZXJUZXh0LCB0eXBlLCBjbGlja0V2ZW50LCBjbGFzc05hbWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9CYXNpY0J1dHRvbl9pc1ByaW1hcnkuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHN0eWxlVmFyaWFudCA9IHN0eWxlVmFyaWFudCAhPT0gbnVsbCAmJiBzdHlsZVZhcmlhbnQgIT09IHZvaWQgMCA/IHN0eWxlVmFyaWFudCA6IHRoaXMuZ2V0QXR0cmlidXRlKCdzdHlsZS12YXJpYW50Jyk7XG4gICAgICAgIGlubmVyVGV4dCA9IGlubmVyVGV4dCAhPT0gbnVsbCAmJiBpbm5lclRleHQgIT09IHZvaWQgMCA/IGlubmVyVGV4dCA6IHRoaXMuaW5uZXJUZXh0O1xuICAgICAgICB0eXBlID0gdHlwZSAhPT0gbnVsbCAmJiB0eXBlICE9PSB2b2lkIDAgPyB0eXBlIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQmFzaWNCdXR0b25faXNQcmltYXJ5LCBzdHlsZVZhcmlhbnQsIFwiZlwiKTtcbiAgICAgICAgdGhpcy5pbm5lclRleHQgPSBpbm5lclRleHQ7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0eXBlJywgdHlwZSk7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCguLi4oY2xhc3NOYW1lcyAhPT0gbnVsbCAmJiBjbGFzc05hbWVzICE9PSB2b2lkIDAgPyBjbGFzc05hbWVzIDogJycpKTtcbiAgICAgICAgY29uc3QgYnV0dG9uU3R5bGVDbGFzcyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jhc2ljQnV0dG9uX2lzUHJpbWFyeSwgXCJmXCIpID09PSAncHJpbWFyeSdcbiAgICAgICAgICAgID8gWydidXR0b24tLXByaW1hcnknLCBgJHtzdHlsZS5idXR0b25QcmltYXJ5fWBdXG4gICAgICAgICAgICA6IFsnYnV0dG9uLS1zZWNvbmRhcnknLCBgJHtzdHlsZS5idXR0b25TZWNvbmRhcnl9YF07XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYnV0dG9uJywgYCR7c3R5bGUuYnV0dG9ufWAsICd0ZXh0LWNhcHRpb24nKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKC4uLmJ1dHRvblN0eWxlQ2xhc3MpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY2xpY2tFdmVudCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVuZGVyKCkgeyB9XG59XG5fQmFzaWNCdXR0b25faXNQcmltYXJ5ID0gbmV3IFdlYWtNYXAoKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYmFzaWMtYnV0dG9uJywgQmFzaWNCdXR0b24sIHsgZXh0ZW5kczogJ2J1dHRvbicgfSk7XG5leHBvcnQgZGVmYXVsdCBCYXNpY0J1dHRvbjtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZvcml0ZS1pY29uLWZpbGxlZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2b3JpdGUtaWNvbi1saW5lZC5wbmdcIjsiLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRmF2b3JpdGVJY29uX2luc3RhbmNlcywgX0Zhdm9yaXRlSWNvbl9zZXRFdmVudDtcbmltcG9ydCBmYXZvcml0ZUljb25GaWxsZWQgZnJvbSAnQGFzc2V0cy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmcnO1xuaW1wb3J0IGZhdm9yaXRlSWNvbkxpbmVkIGZyb20gJ0Bhc3NldHMvZmF2b3JpdGUtaWNvbi1saW5lZC5wbmcnO1xuY2xhc3MgRmF2b3JpdGVJY29uIGV4dGVuZHMgSFRNTEltYWdlRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9GYXZvcml0ZUljb25faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdjbGlja2FibGUnKTtcbiAgICAgICAgdGhpcy5zcmMgPSBmYXZvcml0ZUljb25MaW5lZDtcbiAgICAgICAgdGhpcy5hbHQgPSAn7KaQ6rKo7LC+6riwIOyVhOydtOy9mCc7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgJ29mZicpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZUljb25faW5zdGFuY2VzLCBcIm1cIiwgX0Zhdm9yaXRlSWNvbl9zZXRFdmVudCkuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2NsaWNrZWQnKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09ICdvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IGZhdm9yaXRlSWNvbkZpbGxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID09PSAnb2ZmJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3JjID0gZmF2b3JpdGVJY29uTGluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNGYXZvcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdjbGlja2VkJykgPT09ICdvbic7XG4gICAgfVxuICAgIHNldChpc0Zhdm9yaXRlKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgaXNGYXZvcml0ZSA/ICdvbicgOiAnb2ZmJyk7XG4gICAgfVxuICAgIG9uKCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY2xpY2tlZCcsICdvbicpO1xuICAgIH1cbiAgICBvZmYoKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgJ29mZicpO1xuICAgIH1cbiAgICBpc09uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NsaWNrZWQnKSA9PT0gJ29uJztcbiAgICB9XG59XG5fRmF2b3JpdGVJY29uX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9GYXZvcml0ZUljb25fc2V0RXZlbnQgPSBmdW5jdGlvbiBfRmF2b3JpdGVJY29uX3NldEV2ZW50KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnY2xpY2tlZCcpID09PSAnb2ZmJykge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NsaWNrZWQnLCAnb24nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjbGlja2VkJywgJ29mZicpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuRmF2b3JpdGVJY29uLm9ic2VydmVkQXR0cmlidXRlcyA9IFsnY2xpY2tlZCddO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdmYXZvcml0ZS1pY29uJywgRmF2b3JpdGVJY29uLCB7IGV4dGVuZHM6ICdpbWcnIH0pO1xuZXhwb3J0IGRlZmF1bHQgRmF2b3JpdGVJY29uO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0lucHV0Qm94LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSW5wdXRCb3guY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0lucHV0Qm94X2luc3RhbmNlcywgX0lucHV0Qm94X3RlbXBsYXRlO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnQC91dGlsL2RvbSc7XG5pbXBvcnQgJy4vSW5wdXRCb3guY3NzJztcbmNsYXNzIElucHV0Qm94IGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9JbnB1dEJveF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB0aGlzLnN0eWxlVmFyaWFudCA9ICd2ZXJ0aWNhbCc7XG4gICAgICAgIHRoaXMubmFtZSA9ICcnO1xuICAgICAgICB0aGlzLmlkTmFtZSA9ICcnO1xuICAgICAgICB0aGlzLmhhc1ZlcmlmaWNhdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oZWxwVGV4dCA9ICcnO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2lucHV0LWJveCcpO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0lucHV0Qm94X2luc3RhbmNlcywgXCJtXCIsIF9JbnB1dEJveF90ZW1wbGF0ZSkuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy4kbGFiZWwgPSBkb20uZ2V0RWxlbWVudCh0aGlzLCAnOnNjb3BlIGxhYmVsJyk7XG4gICAgICAgIHRoaXMuJGlucHV0ID0gZG9tLmdldEVsZW1lbnQodGhpcywgJzpzY29wZSBpbnB1dCcpO1xuICAgICAgICB0aGlzLiRoZWxwID0gZG9tLmdldEVsZW1lbnQodGhpcywgJzpzY29wZSA+IHNwYW4nKTtcbiAgICAgICAgdGhpcy4kZXJyb3IgPSBkb20uZ2V0RWxlbWVudCh0aGlzLCAnOnNjb3BlID4gLmVycm9yJyk7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmludCgpO1xuICAgIH1cbiAgICBzZXRTdGF0ZShwcm9wcykge1xuICAgICAgICBjb25zdCB7IG5hbWUsIGlkTmFtZSwgY2xhc3NOYW1lcywgc3R5bGVWYXJpYW50LCBjaGlsZCwgaGFzVmVyaWZpY2F0aW9uLCBpc1JlcXVpcmVkLCBoZWxwVGV4dCB9ID0gcHJvcHM7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuaWROYW1lID0gaWROYW1lICE9PSBudWxsICYmIGlkTmFtZSAhPT0gdm9pZCAwID8gaWROYW1lIDogJyc7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCguLi4oY2xhc3NOYW1lcyAhPT0gbnVsbCAmJiBjbGFzc05hbWVzICE9PSB2b2lkIDAgPyBjbGFzc05hbWVzIDogW10pKTtcbiAgICAgICAgdGhpcy5zdHlsZVZhcmlhbnQgPSBzdHlsZVZhcmlhbnQ7XG4gICAgICAgIHRoaXMuaGFzVmVyaWZpY2F0aW9uID0gaGFzVmVyaWZpY2F0aW9uICE9PSBudWxsICYmIGhhc1ZlcmlmaWNhdGlvbiAhPT0gdm9pZCAwID8gaGFzVmVyaWZpY2F0aW9uIDogZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZXF1aXJlZCA9IGlzUmVxdWlyZWQgIT09IG51bGwgJiYgaXNSZXF1aXJlZCAhPT0gdm9pZCAwID8gaXNSZXF1aXJlZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLmhlbHBUZXh0ID0gaGVscFRleHQgIT09IG51bGwgJiYgaGVscFRleHQgIT09IHZvaWQgMCA/IGhlbHBUZXh0IDogJyc7XG4gICAgICAgIGRvbS5nZXRFbGVtZW50KHRoaXMsICcuaW5wdXQtYm94X19pbnB1dC1zZXQnKS5jbGFzc0xpc3QuYWRkKGAke3N0eWxlVmFyaWFudH1gKTtcbiAgICAgICAgaWYgKGNoaWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gY2hpbGQ7XG4gICAgICAgICAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLmlucHV0JykucmVwbGFjZVdpdGgoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZm9ybS1pdGVtJyk7XG4gICAgICAgIGlmICh0aGlzLmlzUmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZm9ybS1pdGVtLS1yZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpbnQoKTtcbiAgICB9XG4gICAgcHJpbnQoKSB7XG4gICAgICAgIHRoaXMuJGxhYmVsLmh0bWxGb3IgPSBgJHt0aGlzLmlkTmFtZX0gdGV4dC1jYXB0aW9uYDtcbiAgICAgICAgdGhpcy4kbGFiZWwuaW5uZXJUZXh0ID0gdGhpcy5uYW1lO1xuICAgICAgICB0aGlzLiRpbnB1dC5jbGFzc0xpc3QuYWRkKGBpbnB1dC1ib3hfXyR7dGhpcy5pZE5hbWV9YCk7XG4gICAgICAgIHRoaXMuJGlucHV0LmlkID0gdGhpcy5pZE5hbWU7XG4gICAgICAgIGlmICh0aGlzLmhlbHBUZXh0KVxuICAgICAgICAgICAgdGhpcy4kaGVscC5pbm5lclRleHQgPSB0aGlzLmhlbHBUZXh0O1xuICAgICAgICBpZiAodGhpcy5oYXNWZXJpZmljYXRpb24pXG4gICAgICAgICAgICB0aGlzLiRlcnJvci5pbm5lclRleHQgPSBgJHt0aGlzLm5hbWV9IOqwkuydgCDtlYTsiJgg7J6F66Cl7J6F64uI64ukLmA7XG4gICAgfVxuICAgIHZpc2libGVFcnJvcigpIHtcbiAgICAgICAgdGhpcy4kZXJyb3IuY2xhc3NMaXN0LnJlbW92ZSgnaW52aXNpYmxlJyk7XG4gICAgfVxuICAgIGludmlzaWJsZUVycm9yKCkge1xuICAgICAgICB0aGlzLiRlcnJvci5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUnKTtcbiAgICB9XG59XG5fSW5wdXRCb3hfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0lucHV0Qm94X3RlbXBsYXRlID0gZnVuY3Rpb24gX0lucHV0Qm94X3RlbXBsYXRlKCkge1xuICAgIHJldHVybiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtYm94X19pbnB1dC1zZXRcIj5cclxuICAgICAgPGxhYmVsIGNsYXNzPVwidGV4dC1jYXB0aW9uXCI+PC9sYWJlbD5cclxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJpbnB1dFwiIC8+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxzcGFuIGNsYXNzPVwiaGVscC10ZXh0IHRleHQtY2FwdGlvblwiPjwvc3Bhbj5cclxuICAgIDxkaXYgY2xhc3M9XCJlcnJvciBpbnZpc2libGVcIj48L3NwYW4+XHJcbiAgICBgO1xufTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnaW5wdXQtYm94JywgSW5wdXRCb3gsIHsgZXh0ZW5kczogJ2RpdicgfSk7XG5leHBvcnQgZGVmYXVsdCBJbnB1dEJveDtcbiIsImNsYXNzIE9uT2ZmQnV0dG9uIGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgKF9hID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ29mZicpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlzT24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpID09PSAnb24nO1xuICAgIH1cbiAgICBvbigpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCAnb24nKTtcbiAgICB9XG4gICAgb2ZmKCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICdvZmYnKTtcbiAgICB9XG59XG5Pbk9mZkJ1dHRvbi5vYnNlcnZlZEF0dHJpYnV0ZXMgPSBbJ2NoZWNrZWQnXTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnb24tb2ZmLWJ1dHRvbicsIE9uT2ZmQnV0dG9uLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgT25PZmZCdXR0b247XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTmF2VGFiLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTmF2VGFiLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTmF2VGFiX2NoaWxkcmVuLCBfTmF2VGFiX3NlbGVjdGVkO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnQC91dGlsL2RvbSc7XG5pbXBvcnQgT25PZmZCdXR0b24gZnJvbSAnLi9Pbk9mZkJ1dHRvbic7XG5pbXBvcnQgJy4vTmF2VGFiLmNzcyc7XG5jb25zdCBFTEVNRU5UX05BTUUgPSAnbXktdGFiJztcbmNsYXNzIE5hdlRhYiBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX05hdlRhYl9jaGlsZHJlbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX05hdlRhYl9zZWxlY3RlZC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdjdXN0b20tdGFiJywgRUxFTUVOVF9OQU1FKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTmF2VGFiX2NoaWxkcmVuLCBkb20uZ2V0RWxlbWVudEFsbCh0aGlzLCBgOnNjb3BlID4gKmApLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX05hdlRhYl9zZWxlY3RlZCwgZG9tLmdldEVsZW1lbnQodGhpcywgJzpzY29wZSA+IConKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBPbk9mZkJ1dHRvbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgQXJyYXkuZnJvbShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OYXZUYWJfY2hpbGRyZW4sIFwiZlwiKSkuZm9yRWFjaCgoY2hpbGQpID0+IGNoaWxkLm9mZigpKTtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5vbigpO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTmF2VGFiX3NlbGVjdGVkLCBldmVudC50YXJnZXQsIFwiZlwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFNlbGVjdGVkKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmF2VGFiX3NlbGVjdGVkLCBcImZcIik7XG4gICAgfVxufVxuX05hdlRhYl9jaGlsZHJlbiA9IG5ldyBXZWFrTWFwKCksIF9OYXZUYWJfc2VsZWN0ZWQgPSBuZXcgV2Vha01hcCgpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKEVMRU1FTlRfTkFNRSwgTmF2VGFiLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgTmF2VGFiO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRDYXRlZ29yeUljb24ubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudENhdGVnb3J5SWNvbi5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vUmVzdGF1cmFudENhdGVnb3J5SWNvbi5tb2R1bGUuY3NzJztcbmltcG9ydCBrb3JlYW5JY29uIGZyb20gJ0Bhc3NldHMvY2F0ZWdvcnkta29yZWFuLnBuZyc7XG5pbXBvcnQgYXNpYW5JY29uIGZyb20gJ0Bhc3NldHMvY2F0ZWdvcnktYXNpYW4ucG5nJztcbmltcG9ydCBqYXBhbmVzZUljb24gZnJvbSAnQGFzc2V0cy9jYXRlZ29yeS1qYXBhbmVzZS5wbmcnO1xuaW1wb3J0IGNoaW5lc2VJY29uIGZyb20gJ0Bhc3NldHMvY2F0ZWdvcnktY2hpbmVzZS5wbmcnO1xuaW1wb3J0IHdlc3Rlcm5JY29uIGZyb20gJ0Bhc3NldHMvY2F0ZWdvcnktd2VzdGVybi5wbmcnO1xuaW1wb3J0IGV0Y0ljb24gZnJvbSAnQGFzc2V0cy9jYXRlZ29yeS1ldGMucG5nJztcbmV4cG9ydCBjb25zdCBJY29ucyA9IHtcbiAgICDtlZzsi506IGtvcmVhbkljb24sXG4gICAg7JWE7Iuc7JWIOiBhc2lhbkljb24sXG4gICAg7J287IudOiBqYXBhbmVzZUljb24sXG4gICAg7KSR7IudOiBjaGluZXNlSWNvbixcbiAgICDslpHsi506IHdlc3Rlcm5JY29uLFxuICAgIOq4sO2DgDogZXRjSWNvbixcbn07XG5jbGFzcyBSZXN0YXVyYW50Q2F0ZWdvcnlJY29uIGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNhdGVnb3J5LCBhbHQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy4kaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgY2F0ZWdvcnkgPSBjYXRlZ29yeSAhPT0gbnVsbCAmJiBjYXRlZ29yeSAhPT0gdm9pZCAwID8gY2F0ZWdvcnkgOiB0aGlzLmdldEF0dHJpYnV0ZSgnY2F0ZWdvcnknKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50X19jYXRlZ29yeScsIGAke3N0eWxlLnJlc3RhdXJhbnRfX2NhdGVnb3J5fWAsICdjYXRlZ29yeS1pY29uJyk7XG4gICAgICAgIHRoaXMuc2V0Q2F0ZWdvcnkoY2F0ZWdvcnkpO1xuICAgICAgICB0aGlzLiRpbWFnZS5hbHQgPSBhbHQgIT09IG51bGwgJiYgYWx0ICE9PSB2b2lkIDAgPyBhbHQgOiAnJztcbiAgICAgICAgdGhpcy5hcHBlbmQodGhpcy4kaW1hZ2UpO1xuICAgIH1cbiAgICBzZXRDYXRlZ29yeShjYXRlZ29yeSkge1xuICAgICAgICB0aGlzLiRpbWFnZS5zcmMgPSBJY29uc1tjYXRlZ29yeV07XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdyZXN0YXVyYW50LWNhdGVnb3J5LWljb24nLCBSZXN0YXVyYW50Q2F0ZWdvcnlJY29uLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudENhdGVnb3J5SWNvbjtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1rb3JlYW4ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWFzaWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1qYXBhbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktY2hpbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktd2VzdGVybi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktZXRjLnBuZ1wiOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50SXRlbS5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50SXRlbS5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRfaW5zdGFuY2VzLCBfUmVzdGF1cmFudF92YWxpZGF0ZU5hbWUsIF9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb247XG5jbGFzcyBSZXN0YXVyYW50IHtcbiAgICBjb25zdHJ1Y3RvcihyZXN0YXVyYW50QXJncykge1xuICAgICAgICBfUmVzdGF1cmFudF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSByZXN0YXVyYW50QXJncy5uYW1lO1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gcmVzdGF1cmFudEFyZ3MuZGlzdGFuY2U7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSByZXN0YXVyYW50QXJncy5jYXRlZ29yeTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHJlc3RhdXJhbnRBcmdzLmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmxpbmsgPSByZXN0YXVyYW50QXJncy5saW5rO1xuICAgICAgICB0aGlzLmlzRmF2b3JpdGUgPSByZXN0YXVyYW50QXJncy5pc0Zhdm9yaXRlO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50X2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSkuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudF92YWxpZGF0ZURlc2NyaXB0aW9uKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiB0aGlzLmRpc3RhbmNlLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHQuZGVzY3JpcHRpb24gPSB0aGlzLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpbmspIHtcbiAgICAgICAgICAgIHJlc3VsdC5saW5rID0gdGhpcy5saW5rO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRmF2b3JpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmlzRmF2b3JpdGUgPSB0aGlzLmlzRmF2b3JpdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaXNFcXVhbChhbm90aGVyKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5uYW1lID09PSBhbm90aGVyLm5hbWUgJiZcbiAgICAgICAgICAgIHRoaXMuZGlzdGFuY2UgPT09IGFub3RoZXIuZGlzdGFuY2UgJiZcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcnkgPT09IGFub3RoZXIuY2F0ZWdvcnkpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50X2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSgpIHtcbiAgICBpZiAoIXRoaXMubmFtZS5sZW5ndGggfHwgdGhpcy5uYW1lLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW0VSUk9SXSDsnbTrpoTsnZgg6ri47J2064qUIDF+MjDsnpAg7Jes7JW8IO2VqeuLiOuLpC4nKTtcbiAgICB9XG59LCBfUmVzdGF1cmFudF92YWxpZGF0ZURlc2NyaXB0aW9uID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRfdmFsaWRhdGVEZXNjcmlwdGlvbigpIHtcbiAgICBpZiAodGhpcy5kZXNjcmlwdGlvbiAmJiB0aGlzLmRlc2NyaXB0aW9uLmxlbmd0aCA+IDUwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tFUlJPUl0g7J2M7Iud7KCQIOyEpOuqhSDquLjsnbTripQgNTAw7J6Q66W8IOy0iOqzvO2VoCDsiJgg7JeG7Iq164uI64ukLicpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50O1xuIiwiaW1wb3J0IFJlc3RhdXJhbnQgZnJvbSAnLi9SZXN0YXVyYW50JztcbmNsYXNzIFJlc3RhdXJhbnRDb2xsZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihyZXN0YXVyYW50cykge1xuICAgICAgICB0aGlzLnJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHMubWFwKChyZXN0YXVyYW50KSA9PiBuZXcgUmVzdGF1cmFudChyZXN0YXVyYW50KSk7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdGF1cmFudHMubWFwKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmdldCgpKTtcbiAgICB9XG4gICAgZmlsdGVyQnlDYXRlZ29yeShjYXRlZ29yeSkge1xuICAgICAgICBpZiAoY2F0ZWdvcnkgPT09ICfsoITssrQnKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdGF1cmFudHMubWFwKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmdldCgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdGF1cmFudHNcbiAgICAgICAgICAgIC5tYXAoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuZ2V0KCkpXG4gICAgICAgICAgICAuZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmNhdGVnb3J5ID09PSBjYXRlZ29yeSk7XG4gICAgfVxuICAgIHNvcnQoc29ydENyaXRlcmlhKSB7XG4gICAgICAgIGlmIChzb3J0Q3JpdGVyaWEgPT09ICfsnbTrpoTsiJwnKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ydEJ5TmFtZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0QnlEaXN0YW5jZSgpO1xuICAgIH1cbiAgICBzb3J0QnlOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50c1xuICAgICAgICAgICAgLm1hcCgocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5nZXQoKSlcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKTtcbiAgICB9XG4gICAgc29ydEJ5RGlzdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RhdXJhbnRzXG4gICAgICAgICAgICAubWFwKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmdldCgpKVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKTtcbiAgICB9XG4gICAgYWRkKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzKHJlc3RhdXJhbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tFUlJPUl0g7J2066+4IOyhtOyerO2VmOuKlCDsnYzsi53soJDsnoXri4jri6QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXN0YXVyYW50cy5wdXNoKG5ldyBSZXN0YXVyYW50KHJlc3RhdXJhbnQpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XG4gICAgfVxuICAgIGhhcyhuZXdSZXN0YXVyYW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RhdXJhbnRzLnNvbWUoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuaXNFcXVhbChuZXdSZXN0YXVyYW50KSk7XG4gICAgfVxuICAgIHJlbW92ZShuZXdSZXN0YXVyYW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RhdXJhbnRzXG4gICAgICAgICAgICAuZmlsdGVyKChyZXN0YXVyYW50KSA9PiAhcmVzdGF1cmFudC5pc0VxdWFsKG5ld1Jlc3RhdXJhbnQpKVxuICAgICAgICAgICAgLm1hcCgocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5nZXQoKSk7XG4gICAgfVxuICAgIHVwZGF0ZShuZXdSZXN0YXVyYW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzdGF1cmFudENvbGxlY3Rpb24odGhpcy5yZW1vdmUobmV3UmVzdGF1cmFudCkpLmFkZChuZXdSZXN0YXVyYW50KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50Q29sbGVjdGlvbjtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfUmVzdGF1cmFudERCU2VydmljZV9pbnN0YW5jZXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWSwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfcmVzdGF1cmFudENvbGxlY3Rpb24sIF9SZXN0YXVyYW50REJTZXJ2aWNlX3VwZGF0ZTtcbmltcG9ydCBSZXN0YXVyYW50Q29sbGVjdGlvbiBmcm9tICcuLi9lbnRpdGllcy9SZXN0YXVyYW50Q29sbGVjdGlvbic7XG5jbGFzcyBSZXN0YXVyYW50REJTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX1Jlc3RhdXJhbnREQlNlcnZpY2VfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnREQlNlcnZpY2VfUkVTVEFVUkFOVFNfREJfS0VZLnNldCh0aGlzLCAncmVzdGF1cmFudHMnKTtcbiAgICAgICAgX1Jlc3RhdXJhbnREQlNlcnZpY2VfcmVzdGF1cmFudENvbGxlY3Rpb24uc2V0KHRoaXMsIG5ldyBSZXN0YXVyYW50Q29sbGVjdGlvbihbXSkpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfdXBkYXRlKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBnZXRBZnRlckZpbHRlcmluZyhjYXRlZ29yeSwgc29ydENyaXRlcmlhKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfdXBkYXRlKS5jYWxsKHRoaXMpO1xuICAgICAgICBjb25zdCByZXN0YXVyYW50cyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfcmVzdGF1cmFudENvbGxlY3Rpb24sIFwiZlwiKS5maWx0ZXJCeUNhdGVnb3J5KGNhdGVnb3J5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN0YXVyYW50Q29sbGVjdGlvbihyZXN0YXVyYW50cykuc29ydChzb3J0Q3JpdGVyaWEpO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoKF9hID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERCU2VydmljZV9SRVNUQVVSQU5UU19EQl9LRVksIFwiZlwiKSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdbXScpO1xuICAgIH1cbiAgICBzZXQoZGF0YSkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWSwgXCJmXCIpLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgfVxuICAgIGFkZChyZXN0YXVyYW50KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfdXBkYXRlKS5jYWxsKHRoaXMpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWSwgXCJmXCIpLCBKU09OLnN0cmluZ2lmeShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLCBcImZcIikuYWRkKHJlc3RhdXJhbnQpKSk7XG4gICAgfVxuICAgIHJlbW92ZShyZXN0YXVyYW50KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfdXBkYXRlKS5jYWxsKHRoaXMpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWSwgXCJmXCIpLCBKU09OLnN0cmluZ2lmeShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLCBcImZcIikucmVtb3ZlKHJlc3RhdXJhbnQpKSk7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREQlNlcnZpY2VfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREQlNlcnZpY2VfdXBkYXRlKS5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERCU2VydmljZV9yZXN0YXVyYW50Q29sbGVjdGlvbiwgXCJmXCIpLmdldCgpLmxlbmd0aCA9PT0gMDtcbiAgICB9XG59XG5fUmVzdGF1cmFudERCU2VydmljZV9SRVNUQVVSQU5UU19EQl9LRVkgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudERCU2VydmljZV9yZXN0YXVyYW50Q29sbGVjdGlvbiA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50REJTZXJ2aWNlX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50REJTZXJ2aWNlX3VwZGF0ZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50REJTZXJ2aWNlX3VwZGF0ZSgpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uLCBuZXcgUmVzdGF1cmFudENvbGxlY3Rpb24odGhpcy5nZXQoKSksIFwiZlwiKTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50REJTZXJ2aWNlO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeSwgX1Jlc3RhdXJhbnRJdGVtX2Rpc3RhbmNlLCBfUmVzdGF1cmFudEl0ZW1fZGVzY3JpcHRpb24sIF9SZXN0YXVyYW50SXRlbV9uYW1lLCBfUmVzdGF1cmFudEl0ZW1fbGluaywgX1Jlc3RhdXJhbnRJdGVtX2lzRmF2b3JpdGUsIF9SZXN0YXVyYW50SXRlbV90ZW1wbGF0ZSwgX1Jlc3RhdXJhbnRJdGVtX3JlbmRlciwgX1Jlc3RhdXJhbnRJdGVtX3NldEV2ZW50LCBfUmVzdGF1cmFudEl0ZW1fc2hvd0RldGFpbExpc3RlbmVyLCBfUmVzdGF1cmFudEl0ZW1fb25DbGlja0Zhdm9yaXRlQnV0dG9uLCBfUmVzdGF1cmFudEl0ZW1fb25DbGlja0Zhdm9yaXRlSWNvbjtcbmltcG9ydCBzdHlsZSBmcm9tICcuL1Jlc3RhdXJhbnRJdGVtLm1vZHVsZS5jc3MnO1xuaW1wb3J0IEZhdm9yaXRlSWNvbiBmcm9tICcuLi9CYXNpYy9GYXZvcml0ZUljb24nO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnQC91dGlsL2RvbSc7XG5pbXBvcnQgUmVzdGF1cmFudERCU2VydmljZSBmcm9tICdAL2RvbWFpbnMvc2VydmljZXMvUmVzdGF1cmFudERCU2VydmljZSc7XG5pbXBvcnQgUmVzdGF1cmFudENvbGxlY3Rpb24gZnJvbSAnQC9kb21haW5zL2VudGl0aWVzL1Jlc3RhdXJhbnRDb2xsZWN0aW9uJztcbmNsYXNzIFJlc3RhdXJhbnRJdGVtIGV4dGVuZHMgSFRNTExJRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoeyBjYXRlZ29yeSwgbmFtZSwgZGlzdGFuY2UsIGRlc2NyaXB0aW9uLCBsaW5rLCBpc0Zhdm9yaXRlIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2Rpc3RhbmNlLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fZGVzY3JpcHRpb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9uYW1lLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fbGluay5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2lzRmF2b3JpdGUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5LCBjYXRlZ29yeSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9uYW1lLCBuYW1lLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2Rpc3RhbmNlLCBkaXN0YW5jZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiwgZGVzY3JpcHRpb24gIT09IG51bGwgJiYgZGVzY3JpcHRpb24gIT09IHZvaWQgMCA/IGRlc2NyaXB0aW9uIDogJycsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fbGluaywgbGluaywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pc0Zhdm9yaXRlLCBpc0Zhdm9yaXRlICE9PSBudWxsICYmIGlzRmF2b3JpdGUgIT09IHZvaWQgMCA/IGlzRmF2b3JpdGUgOiBmYWxzZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fdGVtcGxhdGUpLmNhbGwodGhpcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9zZXRFdmVudCkuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5LCBcImZcIiksXG4gICAgICAgICAgICBuYW1lOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9uYW1lLCBcImZcIiksXG4gICAgICAgICAgICBkaXN0YW5jZTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fZGlzdGFuY2UsIFwiZlwiKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiwgXCJmXCIpLFxuICAgICAgICAgICAgbGluazogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fbGluaywgXCJmXCIpLFxuICAgICAgICAgICAgaXNGYXZvcml0ZTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSwgXCJmXCIpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbl9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9kaXN0YW5jZSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9uYW1lID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtX2xpbmsgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudEl0ZW1fdGVtcGxhdGUgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1fdGVtcGxhdGUoKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGByZXN0YXVyYW50YCwgYCR7c3R5bGUucmVzdGF1cmFudH1gKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IGBcclxuICAgIDxkaXYgaXM9XCJyZXN0YXVyYW50LWNhdGVnb3J5LWljb25cIiBhbHQ9XCLsnYzsi53soJAg66Gc6rOgXCI+IDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cInJlc3RhdXJhbnRfX2luZm8gJHtzdHlsZS5yZXN0YXVyYW50X19pbmZvfVwiPlxyXG4gICAgPGgzIGNsYXNzPVwicmVzdGF1cmFudF9fbmFtZSB0ZXh0LXN1YnRpdGxlICR7c3R5bGUucmVzdGF1cmFudF9fbmFtZX1cIj48L2gzPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJyZXN0YXVyYW50X19kaXN0YW5jZSB0ZXh0LWJvZHkgICR7c3R5bGUucmVzdGF1cmFudF9fZGlzdGFuY2V9XCI+PC9zcGFuPlxyXG4gICAgPHAgY2xhc3M9XCJyZXN0YXVyYW50X19kZXNjcmlwdGlvbiB0ZXh0LWJvZHkgJHtzdHlsZS5yZXN0YXVyYW50X19kZXNjcmlwdGlvbn1cIj5cclxuICAgIDwvcD5cclxuICAgIDxpbWcgaXM9XCJmYXZvcml0ZS1pY29uXCIgY2xhc3M9XCJmYXZvcml0ZS1pY29uXCIgc3R5bGU9XCJ3aWR0aDoyNnB4OyBwb3NpdGlvbjphYnNvbHV0ZTsgcmlnaHQ6MTBweDsgdG9wOjEwcHg7XCIvPlxyXG4gICAgPC9kaXY+XHJcbiAgIGA7XG59LCBfUmVzdGF1cmFudEl0ZW1fcmVuZGVyID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtX3JlbmRlcigpIHtcbiAgICBkb21cbiAgICAgICAgLmdldEVsZW1lbnQodGhpcywgJ2Rpdltpcz1cInJlc3RhdXJhbnQtY2F0ZWdvcnktaWNvblwiXScpXG4gICAgICAgIC5zZXRDYXRlZ29yeShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeSwgXCJmXCIpKTtcbiAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnRfX25hbWUnKS50ZXh0Q29udGVudCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX25hbWUsIFwiZlwiKTtcbiAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnRfX2Rpc3RhbmNlJykudGV4dENvbnRlbnQgPSBg7Lqg7Y287Iqk67aA7YSwICR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fZGlzdGFuY2UsIFwiZlwiKX3rtoQg64K0YDtcbiAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uJykudGV4dENvbnRlbnQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9kZXNjcmlwdGlvbiwgXCJmXCIpO1xuICAgIGRvbS5nZXRFbGVtZW50KHRoaXMsICdpbWdbaXM9XCJmYXZvcml0ZS1pY29uXCJdJykuc2V0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2lzRmF2b3JpdGUsIFwiZlwiKSk7XG59LCBfUmVzdGF1cmFudEl0ZW1fc2V0RXZlbnQgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1fc2V0RXZlbnQoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9zaG93RGV0YWlsTGlzdGVuZXIpLmJpbmQodGhpcykpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fb25DbGlja0Zhdm9yaXRlQnV0dG9uKS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRJdGVtX29uQ2xpY2tGYXZvcml0ZUljb24pLmJpbmQodGhpcykpO1xufSwgX1Jlc3RhdXJhbnRJdGVtX3Nob3dEZXRhaWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9zaG93RGV0YWlsTGlzdGVuZXIoZXZlbnQpIHtcbiAgICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgRmF2b3JpdGVJY29uKVxuICAgICAgICByZXR1cm47XG4gICAgZG9tLmdldEVsZW1lbnQoZG9jdW1lbnQuYm9keSwgJy5tYWluLWFwcC1uZXcnKS5wYWludERldGFpbE1vZGFsKHRoaXMuZ2V0KCkpO1xufSwgX1Jlc3RhdXJhbnRJdGVtX29uQ2xpY2tGYXZvcml0ZUJ1dHRvbiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9vbkNsaWNrRmF2b3JpdGVCdXR0b24oZXZlbnQpIHtcbiAgICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBGYXZvcml0ZUljb24pKVxuICAgICAgICByZXR1cm47XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faXNGYXZvcml0ZSwgZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnY2xpY2tlZCcpID09PSAnb24nLCBcImZcIik7XG59LCBfUmVzdGF1cmFudEl0ZW1fb25DbGlja0Zhdm9yaXRlSWNvbiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9vbkNsaWNrRmF2b3JpdGVJY29uKGV2ZW50KSB7XG4gICAgaWYgKCEoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgRmF2b3JpdGVJY29uKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHJlc3RhdXJhbnRzID0gbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKS5nZXQoKTtcbiAgICBuZXcgUmVzdGF1cmFudERCU2VydmljZSgpLnNldChuZXcgUmVzdGF1cmFudENvbGxlY3Rpb24ocmVzdGF1cmFudHMpLnVwZGF0ZSh0aGlzLmdldCgpKSk7XG4gICAgZG9tLmdldEVsZW1lbnQoZG9jdW1lbnQuYm9keSwgJy5tYWluLWFwcC1uZXcnKS5yZW5kZXIoKTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50SXRlbTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncmVzdGF1cmFudC1pdGVtJywgUmVzdGF1cmFudEl0ZW0sIHsgZXh0ZW5kczogJ2xpJyB9KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50TGlzdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRMaXN0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHM7XG5pbXBvcnQgUmVzdGF1cmFudEl0ZW0gZnJvbSAnLi9SZXN0YXVyYW50SXRlbSc7XG5pbXBvcnQgJy4vUmVzdGF1cmFudExpc3QuY3NzJztcbmNsYXNzIFJlc3RhdXJhbnRMaXN0IGV4dGVuZHMgSFRNTFVMaXN0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cy5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50LWxpc3QnKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIFtdLCBcImZcIik7XG4gICAgfVxuICAgIHBhaW50KHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCByZXN0YXVyYW50cywgXCJmXCIpO1xuICAgICAgICB0aGlzLnJlcGxhY2VDaGlsZHJlbigpO1xuICAgICAgICBjb25zdCByZXN0YXVyYW50TGlzdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCBcImZcIikubWFwKChyZXN0YXVyYW50KSA9PiBuZXcgUmVzdGF1cmFudEl0ZW0ocmVzdGF1cmFudCkpO1xuICAgICAgICB0aGlzLmFwcGVuZCguLi5yZXN0YXVyYW50TGlzdCk7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCBcImZcIik7XG4gICAgfVxufVxuX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzID0gbmV3IFdlYWtNYXAoKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncmVzdGF1cmFudC1saXN0JywgUmVzdGF1cmFudExpc3QsIHsgZXh0ZW5kczogJ3VsJyB9KTtcbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRMaXN0O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRJdGVtRGV0YWlsLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRJdGVtRGV0YWlsLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2luc3RhbmNlcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2NhdGVnb3J5LCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbmFtZSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rpc3RhbmNlLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGVzY3JpcHRpb24sIF9SZXN0YXVyYW50SXRlbURldGFpbF9saW5rLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX3RlbXBsYXRlLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfcmVuZGVyLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZmF2b3JpdGVJY29uREJMaXN0ZW5lcjtcbmltcG9ydCBzdHlsZSBmcm9tICcuL1Jlc3RhdXJhbnRJdGVtRGV0YWlsLm1vZHVsZS5jc3MnO1xuaW1wb3J0IEZhdm9yaXRlSWNvbiBmcm9tICcuLi9CYXNpYy9GYXZvcml0ZUljb24nO1xuaW1wb3J0IFJlc3RhdXJhbnREQlNlcnZpY2UgZnJvbSAnQC9kb21haW5zL3NlcnZpY2VzL1Jlc3RhdXJhbnREQlNlcnZpY2UnO1xuaW1wb3J0IEJhc2ljQnV0dG9uIGZyb20gJy4uL0Jhc2ljL0Jhc2ljQnV0dG9uJztcbmltcG9ydCBCYXNpY01vZGFsIGZyb20gJy4uL0Jhc2ljL0Jhc2ljTW9kYWwnO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnQC91dGlsL2RvbSc7XG5pbXBvcnQgUmVzdGF1cmFudENvbGxlY3Rpb24gZnJvbSAnQC9kb21haW5zL2VudGl0aWVzL1Jlc3RhdXJhbnRDb2xsZWN0aW9uJztcbmNsYXNzIFJlc3RhdXJhbnRJdGVtRGV0YWlsIGV4dGVuZHMgSFRNTExJRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbURldGFpbF9jYXRlZ29yeS5zZXQodGhpcywgJ+q4sO2DgCcpO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbmFtZS5zZXQodGhpcywgJ+u5iCDsnbTrpoQnKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rpc3RhbmNlLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGVzY3JpcHRpb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbURldGFpbF9saW5rLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZS5zZXQodGhpcywgZmFsc2UpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfdGVtcGxhdGUpLmNhbGwodGhpcyk7XG4gICAgICAgIGlmIChwcm9wcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShwcm9wcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbURldGFpbF9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIHNldFN0YXRlKHsgY2F0ZWdvcnksIG5hbWUsIGRpc3RhbmNlLCBkZXNjcmlwdGlvbiwgbGluaywgaXNGYXZvcml0ZSB9KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2NhdGVnb3J5LCBjYXRlZ29yeSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9uYW1lLCBuYW1lLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rpc3RhbmNlLCBkaXN0YW5jZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9kZXNjcmlwdGlvbiwgZGVzY3JpcHRpb24gIT09IG51bGwgJiYgZGVzY3JpcHRpb24gIT09IHZvaWQgMCA/IGRlc2NyaXB0aW9uIDogJycsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbGluaywgbGluayAhPT0gbnVsbCAmJiBsaW5rICE9PSB2b2lkIDAgPyBsaW5rIDogJycsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSwgaXNGYXZvcml0ZSAhPT0gbnVsbCAmJiBpc0Zhdm9yaXRlICE9PSB2b2lkIDAgPyBpc0Zhdm9yaXRlIDogZmFsc2UsIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2NhdGVnb3J5LCBcImZcIiksXG4gICAgICAgICAgICBuYW1lOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9uYW1lLCBcImZcIiksXG4gICAgICAgICAgICBkaXN0YW5jZTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGlzdGFuY2UsIFwiZlwiKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9kZXNjcmlwdGlvbiwgXCJmXCIpLFxuICAgICAgICAgICAgbGluazogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbGluaywgXCJmXCIpLFxuICAgICAgICAgICAgaXNGYXZvcml0ZTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSwgXCJmXCIpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbl9SZXN0YXVyYW50SXRlbURldGFpbF9jYXRlZ29yeSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbURldGFpbF9uYW1lID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rpc3RhbmNlID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Rlc2NyaXB0aW9uID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2xpbmsgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbURldGFpbF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfdGVtcGxhdGUgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfdGVtcGxhdGUoKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGByZXN0YXVyYW50LWl0ZW0tZGV0YWlsYCwgYCR7c3R5bGUucmVzdGF1cmFudH1gKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IGBcclxuICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50LWNvbnRlbnQgJHtzdHlsZS5yZXN0YXVyYW50Q29udGVudH1cIj5cclxuICAgICAgPGRpdiBpcz1cInJlc3RhdXJhbnQtY2F0ZWdvcnktaWNvblwiPiA8L2Rpdj5cclxuICAgICAgPGgzIGNsYXNzPVwicmVzdGF1cmFudF9fbmFtZSB0ZXh0LXN1YnRpdGxlICR7c3R5bGUucmVzdGF1cmFudF9fbmFtZX1cIj48L2gzPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cInJlc3RhdXJhbnRfX2Rpc3RhbmNlIHRleHQtYm9keSAke3N0eWxlLnJlc3RhdXJhbnRfX2Rpc3RhbmNlfVwiPjwvc3Bhbj5cclxuICAgICAgPHAgY2xhc3M9XCJyZXN0YXVyYW50X19kZXNjcmlwdGlvbiB0ZXh0LWJvZHkgJHtzdHlsZS5yZXN0YXVyYW50X19kZXNjcmlwdGlvbn1cIj48L3A+XHJcbiAgICAgIDxhIGNsYXNzPVwicmVzdGF1cmFudF9fbGluayB0ZXh0LWJvZHkgJHtzdHlsZS5yZXN0YXVyYW50X19saW5rfVwiPjwvYT5cclxuICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwicmVzdGF1cmFudF9fYnV0dG9uLWNvbnRhaW5lciAke3N0eWxlLnJlc3RhdXJhbnRfX2J1dHRvbkNvbnRhaW5lcn1cIiA+IDwvZGl2PlxyXG4gICAgICA8aW1nIGlzPVwiZmF2b3JpdGUtaWNvblwiIGNsYXNzPVwicmVzdGF1cmFudF9fZmF2b3JpdGUtaWNvblwiIHN0eWxlPVwid2lkdGg6MjVweDsgcG9zaXRpb246YWJzb2x1dGU7IHJpZ2h0OjEwcHg7IHRvcDoxMHB4O1wiLz5cclxuXHJcbiAgICAgYDtcbiAgICBjb25zdCAkYnV0dG9uQm94ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fYnV0dG9uLWNvbnRhaW5lcicpO1xuICAgICRidXR0b25Cb3guYXBwZW5kKG5ldyBCYXNpY0J1dHRvbignc2Vjb25kYXJ5JywgJ+yCreygnO2VmOq4sCcsICdyZXNldCcsICgpID0+IHtcbiAgICAgICAgbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKS5yZW1vdmUodGhpcy5nZXQoKSk7XG4gICAgICAgIGlmICghKHRoaXMucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50IGluc3RhbmNlb2YgQmFzaWNNb2RhbCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsb3NlTW9kYWwoKTtcbiAgICAgICAgZG9tLmdldEVsZW1lbnQoZG9jdW1lbnQuYm9keSwgJyNtYWluLWFwcCcpLnJlbmRlcigpO1xuICAgIH0pKTtcbiAgICAkYnV0dG9uQm94LmFwcGVuZChuZXcgQmFzaWNCdXR0b24oJ3ByaW1hcnknLCAn64ur6riwJywgJ3N1Ym1pdCcsICgpID0+IHtcbiAgICAgICAgaWYgKCEodGhpcy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgaW5zdGFuY2VvZiBCYXNpY01vZGFsKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xvc2VNb2RhbCgpO1xuICAgIH0pKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2Zhdm9yaXRlSWNvbkRCTGlzdGVuZXIpLmJpbmQodGhpcykpO1xufSwgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX3JlbmRlciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbURldGFpbF9yZW5kZXIoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGNhdGVnb3J5SWNvbiA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICdkaXZbaXM9XCJyZXN0YXVyYW50LWNhdGVnb3J5LWljb25cIl0nKTtcbiAgICBjYXRlZ29yeUljb24uc2V0Q2F0ZWdvcnkoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfY2F0ZWdvcnksIFwiZlwiKSk7XG4gICAgZG9tLmdldEVsZW1lbnQodGhpcywgJy5yZXN0YXVyYW50X19uYW1lJykudGV4dENvbnRlbnQgPSBgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9uYW1lLCBcImZcIil9YDtcbiAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnRfX2Rpc3RhbmNlJykudGV4dENvbnRlbnQgPSBg7Lqg7Y287Iqk67aA7YSwICR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGlzdGFuY2UsIFwiZlwiKX3rtoQg64K0YDtcbiAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uJykudGV4dENvbnRlbnQgPSAoX2EgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9kZXNjcmlwdGlvbiwgXCJmXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnRfX2Zhdm9yaXRlLWljb24nKS5zZXQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaXNGYXZvcml0ZSwgXCJmXCIpKTtcbiAgICBjb25zdCBsaW5rID0gZG9tLmdldEVsZW1lbnQodGhpcywgJy5yZXN0YXVyYW50X19saW5rJyk7XG4gICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2xpbmssIFwiZlwiKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9saW5rLCBcImZcIikpO1xuICAgIGxpbmsudGV4dENvbnRlbnQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbURldGFpbF9saW5rLCBcImZcIik7XG59LCBfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZmF2b3JpdGVJY29uREJMaXN0ZW5lciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbURldGFpbF9mYXZvcml0ZUljb25EQkxpc3RlbmVyKGV2ZW50KSB7XG4gICAgaWYgKCEoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgRmF2b3JpdGVJY29uKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2lzRmF2b3JpdGUsIGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2NsaWNrZWQnKSA9PT0gJ29uJywgXCJmXCIpO1xuICAgIGNvbnN0IG5ld1Jlc3RhdXJhbnRzID0gbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKS5nZXQoKTtcbiAgICBuZXcgUmVzdGF1cmFudERCU2VydmljZSgpLnNldChuZXcgUmVzdGF1cmFudENvbGxlY3Rpb24obmV3UmVzdGF1cmFudHMpLnVwZGF0ZSh0aGlzLmdldCgpKSk7XG4gICAgZG9tLmdldEVsZW1lbnQoZG9jdW1lbnQuYm9keSwgJy5tYWluLWFwcC1uZXcnKS5yZW5kZXIoKTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50SXRlbURldGFpbDtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncmVzdGF1cmFudC1pdGVtLWRldGFpbCcsIFJlc3RhdXJhbnRJdGVtRGV0YWlsLCB7IGV4dGVuZHM6ICdsaScgfSk7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBfTmV3UmVzdGF1cmFudEZvcm1fdGVtcGxhdGUsIF9OZXdSZXN0YXVyYW50Rm9ybV9yZW5kZXJDYXRlZ29yeUlucHV0LCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyTmFtZUlucHV0LCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyU2VsZWN0Qm94LCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyTGlua0lucHV0Qm94LCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyQnV0dG9uQm94O1xuaW1wb3J0IHsgQ0FURUdPUklFU19LRVlTLCBDT05ESVRJT05TIH0gZnJvbSAnQC9jb25zdGFudHMvQ29uZGl0aW9uJztcbmltcG9ydCBCYXNpY0J1dHRvbiBmcm9tICcuLi9CYXNpYy9CYXNpY0J1dHRvbic7XG5pbXBvcnQgeyBkb20gfSBmcm9tICdAL3V0aWwvZG9tJztcbmNsYXNzIE5ld1Jlc3RhdXJhbnRGb3JtIGV4dGVuZHMgSFRNTEZvcm1FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX05ld1Jlc3RhdXJhbnRGb3JtX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRGb3JtX3RlbXBsYXRlKS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLiRjYXRlZ29yeVNlbGVjdCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcuY2F0ZWdvcnktc2VsZWN0Jyk7XG4gICAgICAgIHRoaXMuJG5hbWVJbnB1dEJveCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcubmFtZS1pbnB1dC1ib3gnKTtcbiAgICAgICAgdGhpcy4kZGlzdGFuY2VTZWxlY3QgPSBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLmRpc3RhbmNlLXNlbGVjdCcpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9OZXdSZXN0YXVyYW50Rm9ybV9pbnN0YW5jZXMsIFwibVwiLCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyQ2F0ZWdvcnlJbnB1dCkuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlck5hbWVJbnB1dCkuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlclNlbGVjdEJveCkuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlckxpbmtJbnB1dEJveCkuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlckJ1dHRvbkJveCkuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgaW52aXNpYmxlRXJyb3JNZXNzYWdlKCkge1xuICAgICAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLmNhdGVnb3J5LXNlbGVjdCA+IC5lcnJvcicpLmNsYXNzTGlzdC5hZGQoJ2ludmlzaWJsZScpO1xuICAgICAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLmRpc3RhbmNlLXNlbGVjdCA+IC5lcnJvcicpLmNsYXNzTGlzdC5hZGQoJ2ludmlzaWJsZScpO1xuICAgICAgICB0aGlzLiRuYW1lSW5wdXRCb3guaW52aXNpYmxlRXJyb3IoKTtcbiAgICB9XG4gICAgdmFsaWRhdGVSZXF1aXJlZFZhbHVlcyhjYXRlZ29yeSwgZGlzdGFuY2UsIG5hbWUpIHtcbiAgICAgICAgY29uc3QgaXNOb3RWYWxpZENhdGVnb3J5ID0gY2F0ZWdvcnkgPT09ICfshKDtg53tlbTso7zshLjsmpQnO1xuICAgICAgICBjb25zdCBpc05vdFZhbGlkRGlzdGFuY2UgPSBOdW1iZXIuaXNOYU4oZGlzdGFuY2UpO1xuICAgICAgICBjb25zdCBpc05vdFZhbGlkTmFtZSA9ICFuYW1lO1xuICAgICAgICBpZiAoaXNOb3RWYWxpZENhdGVnb3J5KSB7XG4gICAgICAgICAgICBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLmNhdGVnb3J5LXNlbGVjdCA+IC5lcnJvcicpLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05vdFZhbGlkRGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGRvbS5nZXRFbGVtZW50KHRoaXMsICcuZGlzdGFuY2Utc2VsZWN0ID4gLmVycm9yJykuY2xhc3NMaXN0LnJlbW92ZSgnaW52aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTm90VmFsaWROYW1lKSB7XG4gICAgICAgICAgICB0aGlzLiRuYW1lSW5wdXRCb3gudmlzaWJsZUVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTm90VmFsaWRDYXRlZ29yeSB8fCBpc05vdFZhbGlkRGlzdGFuY2UgfHwgaXNOb3RWYWxpZE5hbWU7XG4gICAgfVxuICAgIGdldFZhbHVlcygpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZWxlbWVudHMubmFtZWRJdGVtKCduYW1lJykudmFsdWU7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTnVtYmVyKHRoaXMuZWxlbWVudHMubmFtZWRJdGVtKCdkaXN0YW5jZScpLnZhbHVlKTtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLmVsZW1lbnRzLm5hbWVkSXRlbSgnY2F0ZWdvcnknKS52YWx1ZTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLmVsZW1lbnRzLm5hbWVkSXRlbSgnZGVzY3JpcHRpb24nKS52YWx1ZTtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMuZWxlbWVudHMubmFtZWRJdGVtKCdsaW5rJykudmFsdWU7XG4gICAgICAgIHJldHVybiB7IG5hbWUsIGRpc3RhbmNlLCBjYXRlZ29yeSwgZGVzY3JpcHRpb24sIGxpbmsgfTtcbiAgICB9XG59XG5fTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX05ld1Jlc3RhdXJhbnRGb3JtX3RlbXBsYXRlID0gZnVuY3Rpb24gX05ld1Jlc3RhdXJhbnRGb3JtX3RlbXBsYXRlKCkge1xuICAgIHJldHVybiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pdGVtIGZvcm0taXRlbS0tcmVxdWlyZWQgY2F0ZWdvcnktc2VsZWN0XCI+XHJcbiAgICAgIDxsYWJlbCBmb3I9XCJjYXRlZ29yeSB0ZXh0LWNhcHRpb25cIj7subTthYzqs6Drpqw8L2xhYmVsPlxyXG4gICAgICA8c2VsZWN0IGlzPVwic2VsZWN0LWJveFwiIGNsYXNzPVwiY2F0ZWdvcnktaW5wdXRcIj48L3NlbGVjdD5cclxuICAgICAgPGRpdiBjbGFzcz1cImVycm9yIGludmlzaWJsZVwiPuy5tO2FjOqzoOumrOuKlCDtlYTsiJgg7J6F66Cl7J6F64uI64ukLjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICBcclxuICAgIDxkaXYgaXM9XCJpbnB1dC1ib3hcIiBjbGFzcz1cIm5hbWUtaW5wdXQtYm94XCI+PC9kaXY+XHJcblxyXG4gICAgPGRpdiBjbGFzcz1cImZvcm0taXRlbSBmb3JtLWl0ZW0tLXJlcXVpcmVkIGRpc3RhbmNlLXNlbGVjdFwiPlxyXG4gICAgICA8bGFiZWwgZm9yPVwiZGlzdGFuY2UgdGV4dC1jYXB0aW9uXCI+6rGw66asKOuPhOuztCDsnbTrj5kg7Iuc6rCEKTwvbGFiZWw+XHJcbiAgICAgIDxzZWxlY3QgaXM9XCJzZWxlY3QtYm94XCIgY2xhc3M9XCJkaXN0YW5jZS1pbnB1dFwiPjwvc2VsZWN0PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZXJyb3IgaW52aXNpYmxlXCI+6rGw66asIOqwkuydgCDtlYTsiJgg7J6F66Cl7J6F64uI64ukLjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcblxyXG4gICAgPGRpdiBjbGFzcz1cImZvcm0taXRlbVwiPlxyXG4gICAgICA8bGFiZWwgZm9yPVwiZGVzY3JpcHRpb24gdGV4dC1jYXB0aW9uXCI+7ISk66qFPC9sYWJlbD5cclxuICAgICAgPHRleHRhcmVhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGlkPVwiZGVzY3JpcHRpb25cIiBjb2xzPVwiMzBcIiByb3dzPVwiNVwiIGNsYXNzPVwiZGVzY3JpcHRpb24taW5wdXRcIj48L3RleHRhcmVhPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cImhlbHAtdGV4dCB0ZXh0LWNhcHRpb25cIj7rqZTribQg65OxIOy2lOqwgCDsoJXrs7Trpbwg7J6F66Cl7ZW0IOyjvOyEuOyalC48L3NwYW4+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICA8ZGl2IGlzPVwiaW5wdXQtYm94XCIgY2xhc3M9XCJsaW5rLWlucHV0LWJveFwiPjwvZGl2PlxyXG5cclxuICAgIDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyXCI+PC9kaXY+XHJcbiAgICBgO1xufSwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlckNhdGVnb3J5SW5wdXQgPSBmdW5jdGlvbiBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyQ2F0ZWdvcnlJbnB1dCgpIHtcbiAgICBjb25zdCBjYXRlZ29yeVNlbGVjdEJveCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcuY2F0ZWdvcnktc2VsZWN0IHNlbGVjdFtpcz1cInNlbGVjdC1ib3hcIl0nKTtcbiAgICBjYXRlZ29yeVNlbGVjdEJveC5zZXQoWyfshKDtg53tlbTso7zshLjsmpQnLCAuLi5DQVRFR09SSUVTX0tFWVNdLCBbJ+yEoO2Dne2VtOyjvOyEuOyalCcsIC4uLkNBVEVHT1JJRVNfS0VZU10sICdjYXRlZ29yeScpO1xufSwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlck5hbWVJbnB1dCA9IGZ1bmN0aW9uIF9OZXdSZXN0YXVyYW50Rm9ybV9yZW5kZXJOYW1lSW5wdXQoKSB7XG4gICAgZG9tLmdldEVsZW1lbnQodGhpcywgJ2Rpdltpcz1cImlucHV0LWJveFwiXScpLnNldFN0YXRlKHtcbiAgICAgICAgc3R5bGVWYXJpYW50OiAndmVydGljYWwnLFxuICAgICAgICBuYW1lOiAn7J2066aEJyxcbiAgICAgICAgaWROYW1lOiAnbmFtZScsXG4gICAgICAgIGhhc1ZlcmlmaWNhdGlvbjogdHJ1ZSxcbiAgICAgICAgaXNSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lczogWyduZXctcmVzdGF1cmFudC1mb3JtX19uYW1lLWlucHV0J10sXG4gICAgfSk7XG59LCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyU2VsZWN0Qm94ID0gZnVuY3Rpb24gX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlclNlbGVjdEJveCgpIHtcbiAgICBjb25zdCBESVNUQU5DRVNfUkVRVUlSRUQgPSBbXG4gICAgICAgICfshKDtg53tlbTso7zshLjsmpQnLFxuICAgICAgICAuLi5DT05ESVRJT05TLkRJU1RBTkNFUy5tYXAoKG51bSkgPT4gYCR7bnVtfWApLFxuICAgIF07XG4gICAgY29uc3QgRElTVEFOQ0VTX1RFWFRTID0gW1xuICAgICAgICAn7ISg7YOd7ZW07KO87IS47JqUJyxcbiAgICAgICAgLi4uQ09ORElUSU9OUy5ESVNUQU5DRVMubWFwKChudW0pID0+IGAke1N0cmluZyhudW0pfeu2hCDrgrRgKSxcbiAgICBdO1xuICAgIGNvbnN0IGRpc3RhbmNlU2VsZWN0Qm94ID0gZG9tLmdldEVsZW1lbnQodGhpcywgJy5kaXN0YW5jZS1zZWxlY3Qgc2VsZWN0W2lzPVwic2VsZWN0LWJveFwiXScpO1xuICAgIGRpc3RhbmNlU2VsZWN0Qm94LnNldChESVNUQU5DRVNfUkVRVUlSRUQsIERJU1RBTkNFU19URVhUUywgJ2Rpc3RhbmNlJyk7XG59LCBfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyTGlua0lucHV0Qm94ID0gZnVuY3Rpb24gX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlckxpbmtJbnB1dEJveCgpIHtcbiAgICBjb25zdCBsaW5rSW5wdXRCb3ggPSBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLmxpbmstaW5wdXQtYm94Jyk7XG4gICAgbGlua0lucHV0Qm94LnNldFN0YXRlKHtcbiAgICAgICAgc3R5bGVWYXJpYW50OiAndmVydGljYWwnLFxuICAgICAgICBuYW1lOiAn66eB7YGsJyxcbiAgICAgICAgaWROYW1lOiAnbGluaycsXG4gICAgICAgIGhlbHBUZXh0OiAn66ek7J6lIOygleuztOulvCDtmZXsnbjtlaAg7IiYIOyeiOuKlCDrp4Htgazrpbwg7J6F66Cl7ZW0IOyjvOyEuOyalC4nLFxuICAgIH0pO1xufSwgX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlckJ1dHRvbkJveCA9IGZ1bmN0aW9uIF9OZXdSZXN0YXVyYW50Rm9ybV9yZW5kZXJCdXR0b25Cb3goKSB7XG4gICAgY29uc3QgJGJ1dHRvbkJveCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcuYnV0dG9uLWNvbnRhaW5lcicpO1xuICAgIGNvbnN0IGNsb3NlTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIGRvbS5nZXRFbGVtZW50KGRvY3VtZW50LmJvZHksICcubmV3LXJlc3RhdXJhbnQtbW9kYWwnKS5jbG9zZU1vZGFsKCk7XG4gICAgfTtcbiAgICAkYnV0dG9uQm94LmFwcGVuZChuZXcgQmFzaWNCdXR0b24oJ3NlY29uZGFyeScsICfst6jshoztlZjquLAnLCAncmVzZXQnLCBjbG9zZU1vZGFsLCBbXG4gICAgICAgICduZXctcmVzdGF1cmFudC1mb3JtX19jYW5jZWwtYnV0dG9uJyxcbiAgICBdKSk7XG4gICAgJGJ1dHRvbkJveC5hcHBlbmQobmV3IEJhc2ljQnV0dG9uKCdwcmltYXJ5JywgJ+y2lOqwgO2VmOq4sCcsICdzdWJtaXQnLCAoKSA9PiB7IH0sIFtcbiAgICAgICAgJ25ldy1yZXN0YXVyYW50LWZvcm1fX3N1Ym1pdC1idXR0b24nLFxuICAgIF0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBOZXdSZXN0YXVyYW50Rm9ybTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbmV3LXJlc3RhdXJhbnQtZm9ybScsIE5ld1Jlc3RhdXJhbnRGb3JtLCB7IGV4dGVuZHM6ICdmb3JtJyB9KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImNvbnN0IHJlc3RhdXJhbnRMaXN0TW9jayA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICftlLzslpHsvantlaDrqLjri4gnLFxuICAgICAgICBjYXRlZ29yeTogJ+2VnOyLnScsXG4gICAgICAgIGRpc3RhbmNlOiAxMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGDtj4nslpEg7Lac7Iug7J2YIO2VoOuouOuLiOqwgCDsiJjsi60g64WE6rCEIOyatOyYge2VtOyYqCDruYTsp4Ag7KCE66y47KCQIO2UvOyWkey9qSDtlaDrp4jri4guIOuRkOu2gOulvCDrubzsp4Ag7JWK7J2AXHJcbuuQmOu5hOyngOulvCDrp5vrs7wg7IiYIOyeiOuKlCDqs7PsnLzroZwsIOKAmO2UvOyWkeKAmeydgCDtj4nslYjrj4Qg7IKs7Yis66as66GcIOKAmO2PieyWkeKAmeydhCDsnZjrr7jtlZzri6QuIOuUuOqzvCDtlajqu5hcclxu7Jq07JiB7ZWY64qUIOydtOqzs+yXkOyEoCDrp7frj4zroZwg7KeB7KCRIOqwhCDsvanrp4zsnYQg7IKs7Jqp7ZWY66mwLCDsnbzssrTsnZgg7KGw66+466OM66W8IOuEo+yngCDslYrsnYAg6rG06rCV7Iud7J2EXHJcbuyEoOuztOyduOuLpC4g7L2p67mE7KeA7JmAIO2UvOyWkSDrp4zrkZDqsIAg7J206rOz7J2YIOuMgO2RnCDrqZTribTsp4Drp4wsIO2VoOuouOuLiOqwgCDsmJvrgqAg67Cp7Iud7J2EIOqzoOyImO2VmOupsFxyXG7rp4zrk6TslrTrgrTripQg67mE7KeA7KCE6rOoIOuYkO2VnCDsnbQg7KeR7J2YIOyXreyCrOulvCDripDrgoQg7IiYIOyeiOuKlCDtirnrs4TtlZwg66mU64m064ukLiDrsJjssKzsnYAg7IaQ64uY65Ok7J20XHJcbuuoueqzoCDsi7bsnYAg66eM7YG8IOuNnOyWtCDrqLnsnYQg7IiYIOyeiOqyjCDspIDruYTrj7wg7J6I64ukLmAsXG4gICAgICAgIGxpbms6ICdodHRwczovL3d3dy5uYXZlci5jb20nLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn7Lmc7LmcJyxcbiAgICAgICAgY2F0ZWdvcnk6ICfspJHsi50nLFxuICAgICAgICBkaXN0YW5jZTogNSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTaW5jZSAyMDA0IO2OuOumrO2VnCDqtZDthrXqs7wg7KO87LCoLCDqt7jrpqzqs6Ag6rSA66Gd66eM7YG8IOq5iuydgCDrp5vqs7wg7KCV7ISx7Jy866GcIOygle2GtSDspJHsi53snZgg7IS46rOE66W8XHJcbiAgICDtjrzss5DqsJHri4jri6QuYCxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3Lm5hdmVyLmNvbScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICfsnofsh7zsmrAnLFxuICAgICAgICBjYXRlZ29yeTogJ+ydvOyLnScsXG4gICAgICAgIGRpc3RhbmNlOiAxMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGDsnofsh7zsmrDripQg7KCV7Ya1IOyekOqwgOygnOuptCDsgqzriITrgbwg7Jqw64+Z7J20IOuMgO2RnOuplOuJtOyeheuLiOuLpC4g6riw7Iig7J2AIOygleyEseydhCDsnbTquLgg7IiYIOyXhuuLpOuKlFxyXG4gICAg7Iug64WQ7Jy866GcIOuqqOuToCDsnYzsi53sl5Ag7LWc7ISg7J2EIOuLpO2VmOuKlCDsnofsh7zsmrDripQg6rOg6rCdIO2VnOu2hCDtlZzrtoTqu5gg7LWc7ISg7J2EIOuLpO2VmOqyoOyKteuLiOuLpGAsXG4gICAgICAgIGxpbms6ICdodHRwczovL3d3dy5uYXZlci5jb20nLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn7J207YOc66as7YKk7LmcJyxcbiAgICAgICAgY2F0ZWdvcnk6ICfslpHsi50nLFxuICAgICAgICBkaXN0YW5jZTogMjAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBg64qYIOuzgO2ZlOulvCDstpTqtaztlZjripQg7J207YOc66as7YKk7Lmc7J6F64uI64ukLmAsXG4gICAgICAgIGxpbms6ICdodHRwczovL3d3dy5uYXZlci5jb20nLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn7Zi47JW867mIIOyCvOyEseygkCcsXG4gICAgICAgIGNhdGVnb3J5OiAn7JWE7Iuc7JWIJyxcbiAgICAgICAgZGlzdGFuY2U6IDE1LFxuICAgICAgICBkZXNjcmlwdGlvbjogYO2RuOynkO2VnCDslpHsl5Ag6rWt66y87J20IOydvO2SiOyduCDsjIDqta3siJhgLFxuICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cubmF2ZXIuY29tJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ+uPhOyKpO2DgOy9lOyKpCDshKDrponsoJAnLFxuICAgICAgICBjYXRlZ29yeTogJ+q4sO2DgCcsXG4gICAgICAgIGRpc3RhbmNlOiA1LFxuICAgICAgICBkZXNjcmlwdGlvbjogYOupleyLnOy5uCDsupDso7zslrwg6re466a0YCxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3Lm5hdmVyLmNvbScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICfslozsg5jquYDrsKUnLFxuICAgICAgICBjYXRlZ29yeTogJ+2VnOyLnScsXG4gICAgICAgIGRpc3RhbmNlOiA1LFxuICAgICAgICBkZXNjcmlwdGlvbjogYOupleyLnOy5uCDsupDso7zslrwg6re466a0YCxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3Lm5hdmVyLmNvbScsXG4gICAgfSxcbl07XG5leHBvcnQgZGVmYXVsdCByZXN0YXVyYW50TGlzdE1vY2s7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0FsbFJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLCBfQWxsUmVzdGF1cmFudEFwcF9maWx0ZXJDb250YWluZXIsIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnRMaXN0LCBfQWxsUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50REJTZXJ2aWNlLCBfQWxsUmVzdGF1cmFudEFwcF9nZXROZXdSZXN0YXVyYW50TGlzdCwgX0FsbFJlc3RhdXJhbnRBcHBfc2V0TW9jaywgX0FsbFJlc3RhdXJhbnRBcHBfZ2V0REIsIF9BbGxSZXN0YXVyYW50QXBwX29uQ2hhbmdlRmlsdGVyQ29udGFpbmVyO1xuaW1wb3J0ICdAL2Nzcy9pbmRleC5jc3MnO1xuaW1wb3J0IFJlc3RhdXJhbnREQlNlcnZpY2UgZnJvbSAnQC9kb21haW5zL3NlcnZpY2VzL1Jlc3RhdXJhbnREQlNlcnZpY2UnO1xuaW1wb3J0IHJlc3RhdXJhbnRMaXN0TW9jayBmcm9tICdAL21vY2svcmVzdGF1cmFudExpc3QubW9jayc7XG5pbXBvcnQgeyBkb20gfSBmcm9tICdAL3V0aWwvZG9tJztcbmNsYXNzIEFsbFJlc3RhdXJhbnRBcHAgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9BbGxSZXN0YXVyYW50QXBwX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9BbGxSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3Quc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2Uuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzID0gW107XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgncmVzdGF1cmFudC1hcHAnKTtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXHJcbiAgICA8ZGl2IGlzPVwiZmlsdGVyLWNvbnRhaW5lclwiIGNsYXNzPVwicmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyXCI+PC9kaXY+XHJcbiAgICA8dWwgaXM9XCJyZXN0YXVyYW50LWxpc3RcIiBjbGFzcz1cInJlc3RhdXJhbnQtbGlzdC1jb250YWluZXIgcmVzdGF1cmFudC1saXN0XCI+PC91bD5cclxuICAgIGA7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfZmlsdGVyQ29udGFpbmVyLCBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lcicpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfZmlsdGVyQ29udGFpbmVyLCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfQWxsUmVzdGF1cmFudEFwcF9vbkNoYW5nZUZpbHRlckNvbnRhaW5lcikuYmluZCh0aGlzKSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudExpc3QsIGRvbS5nZXRFbGVtZW50KHRoaXMsICcucmVzdGF1cmFudC1saXN0JyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50REJTZXJ2aWNlLCBuZXcgUmVzdGF1cmFudERCU2VydmljZSgpLCBcImZcIik7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50TGlzdCwgXCJmXCIpLnBhaW50KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FsbFJlc3RhdXJhbnRBcHBfZ2V0TmV3UmVzdGF1cmFudExpc3QpLmNhbGwodGhpcykpO1xuICAgIH1cbn1cbl9BbGxSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciA9IG5ldyBXZWFrTWFwKCksIF9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnRMaXN0ID0gbmV3IFdlYWtNYXAoKSwgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSA9IG5ldyBXZWFrTWFwKCksIF9BbGxSZXN0YXVyYW50QXBwX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9BbGxSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0ID0gZnVuY3Rpb24gX0FsbFJlc3RhdXJhbnRBcHBfZ2V0TmV3UmVzdGF1cmFudExpc3QoKSB7XG4gICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLmlzRW1wdHkoKSkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BbGxSZXN0YXVyYW50QXBwX2luc3RhbmNlcywgXCJtXCIsIF9BbGxSZXN0YXVyYW50QXBwX3NldE1vY2spLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IHsgY2F0ZWdvcnksIHNvcnRDcml0ZXJpYSB9ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9maWx0ZXJDb250YWluZXIsIFwiZlwiKS5nZXQoKTtcbiAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQWxsUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfQWxsUmVzdGF1cmFudEFwcF9nZXREQikuY2FsbCh0aGlzLCBjYXRlZ29yeSwgc29ydENyaXRlcmlhKTtcbn0sIF9BbGxSZXN0YXVyYW50QXBwX3NldE1vY2sgPSBmdW5jdGlvbiBfQWxsUmVzdGF1cmFudEFwcF9zZXRNb2NrKCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLnNldChyZXN0YXVyYW50TGlzdE1vY2spO1xufSwgX0FsbFJlc3RhdXJhbnRBcHBfZ2V0REIgPSBmdW5jdGlvbiBfQWxsUmVzdGF1cmFudEFwcF9nZXREQihjYXRlZ29yeSwgc29ydENyaXRlcmlhKSB7XG4gICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLmdldEFmdGVyRmlsdGVyaW5nKGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEpO1xufSwgX0FsbFJlc3RhdXJhbnRBcHBfb25DaGFuZ2VGaWx0ZXJDb250YWluZXIgPSBmdW5jdGlvbiBfQWxsUmVzdGF1cmFudEFwcF9vbkNoYW5nZUZpbHRlckNvbnRhaW5lcihldmVudCkge1xuICAgIHRoaXMucmVuZGVyKCk7XG59O1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhbGwtcmVzdGF1cmFudC1hcHAnLCBBbGxSZXN0YXVyYW50QXBwLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgQWxsUmVzdGF1cmFudEFwcDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2luc3RhbmNlcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9yZXN0YXVyYW50REJTZXJ2aWNlLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0LCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3NldE1vY2ssIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0REIsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfb25DaGFuZ2VGaWx0ZXJDb250YWluZXI7XG5pbXBvcnQgeyBkb20gfSBmcm9tICdAL3V0aWwvZG9tJztcbmltcG9ydCByZXN0YXVyYW50TGlzdE1vY2sgZnJvbSAnQC9tb2NrL3Jlc3RhdXJhbnRMaXN0Lm1vY2snO1xuaW1wb3J0IFJlc3RhdXJhbnREQlNlcnZpY2UgZnJvbSAnQC9kb21haW5zL3NlcnZpY2VzL1Jlc3RhdXJhbnREQlNlcnZpY2UnO1xuaW1wb3J0ICdAL2Nzcy9pbmRleC5jc3MnO1xuY2xhc3MgRmF2b3JpdGVSZXN0YXVyYW50QXBwIGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdmYXZvcml0ZS1yZXN0YXVyYW50LWFwcCcpO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcclxuICAgIDxkaXYgaXM9XCJmaWx0ZXItY29udGFpbmVyXCIgY2xhc3M9XCJyZXN0YXVyYW50LWZpbHRlci1jb250YWluZXJcIj48L2Rpdj5cclxuICAgIDx1bCBpcz1cInJlc3RhdXJhbnQtbGlzdFwiIGNsYXNzPVwicmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciByZXN0YXVyYW50LWxpc3RcIj48L3VsPlxyXG4gICAgYDtcbiAgICAgICAgdGhpcy4kZmlsdGVyQ29udGFpbmVyID0gZG9tLmdldEVsZW1lbnQodGhpcywgJy5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXInKTtcbiAgICAgICAgdGhpcy4kZmlsdGVyQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX29uQ2hhbmdlRmlsdGVyQ29udGFpbmVyKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy4kcmVzdGF1cmFudExpc3QgPSBkb20uZ2V0RWxlbWVudCh0aGlzLCAnLnJlc3RhdXJhbnQtbGlzdCcpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuJHJlc3RhdXJhbnRMaXN0LnBhaW50KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0KS5jYWxsKHRoaXMpKTtcbiAgICB9XG59XG5fRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UgPSBuZXcgV2Vha01hcCgpLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0TmV3UmVzdGF1cmFudExpc3QgPSBmdW5jdGlvbiBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0KCkge1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSwgXCJmXCIpLmlzRW1wdHkoKSkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9zZXRNb2NrKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEgfSA9IHRoaXMuJGZpbHRlckNvbnRhaW5lci5nZXQoKTtcbiAgICBjb25zdCByZXN0YXVyYW50cyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldERCKS5jYWxsKHRoaXMsIGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEpO1xuICAgIHJldHVybiByZXN0YXVyYW50cy5maWx0ZXIoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuaXNGYXZvcml0ZSk7XG59LCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3NldE1vY2sgPSBmdW5jdGlvbiBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3NldE1vY2soKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UsIFwiZlwiKS5zZXQocmVzdGF1cmFudExpc3RNb2NrKTtcbn0sIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfZ2V0REIgPSBmdW5jdGlvbiBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldERCKGNhdGVnb3J5LCBzb3J0Q3JpdGVyaWEpIHtcbiAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UsIFwiZlwiKS5nZXRBZnRlckZpbHRlcmluZyhjYXRlZ29yeSwgc29ydENyaXRlcmlhKTtcbn0sIF9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfb25DaGFuZ2VGaWx0ZXJDb250YWluZXIgPSBmdW5jdGlvbiBfRmF2b3JpdGVSZXN0YXVyYW50QXBwX29uQ2hhbmdlRmlsdGVyQ29udGFpbmVyKCkge1xuICAgIHRoaXMucmVuZGVyKCk7XG59O1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdmYXZvcml0ZS1yZXN0YXVyYW50LWFwcCcsIEZhdm9yaXRlUmVzdGF1cmFudEFwcCwgeyBleHRlbmRzOiAnZGl2JyB9KTtcbmV4cG9ydCBkZWZhdWx0IEZhdm9yaXRlUmVzdGF1cmFudEFwcDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9NYWluQXBwLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWFpbkFwcC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTWFpbkFwcF9pbnN0YW5jZXMsIF9NYWluQXBwX29uU3VibWl0Rm9ybTtcbmltcG9ydCB7IGRvbSB9IGZyb20gJ0AvdXRpbC9kb20nO1xuaW1wb3J0IFJlc3RhdXJhbnRJdGVtRGV0YWlsIGZyb20gJy4vUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudEl0ZW1EZXRhaWwnO1xuaW1wb3J0IFJlc3RhdXJhbnREQlNlcnZpY2UgZnJvbSAnQC9kb21haW5zL3NlcnZpY2VzL1Jlc3RhdXJhbnREQlNlcnZpY2UnO1xuaW1wb3J0ICdAL2Nzcy9pbmRleC5jc3MnO1xuaW1wb3J0ICcuL01haW5BcHAuY3NzJztcbmNsYXNzIE1haW5BcHAgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9NYWluQXBwX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzID0gW107XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ21haW4tYXBwLW5ldyc7XG4gICAgICAgIHRoaXMuaWQgPSAnbWFpbi1hcHAnO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcclxuICAgIDxkaXYgaXM9XCJteS10YWJcIiBjbGFzcz1cInJlc3RhdXJhbnQtbmF2LXRhYlwiIHN0eWxlPVwibWFyZ2luLXRvcDoyMnB4O1wiPiBcclxuICAgICAgPGRpdiBpcz1cIm9uLW9mZi1idXR0b25cIiBjbGFzcz1cInRleHQtc3VidGl0bGVcIiBjaGVja2VkPVwib25cIiBkYXRhLWlkPVwiYWxsXCI+66qo65OgIOydjOyLneygkDwvZGl2PlxyXG4gICAgICA8ZGl2IGlzPVwib24tb2ZmLWJ1dHRvblwiIGNsYXNzPVwidGV4dC1zdWJ0aXRsZVwiIGRhdGEtaWQ9XCJmYXZvcml0ZVwiPuyekOyjvCDqsIDripQg7J2M7Iud7KCQPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICA8ZGl2IGlzPVwiYWxsLXJlc3RhdXJhbnQtYXBwXCIgY2xhc3M9XCJhbGwtcmVzdGF1cmFudC1hcHBcIiBkYXRhLWlkPVwiYWxsXCI+PC9kaXY+XHJcbiAgICA8ZGl2IGlzPVwiZmF2b3JpdGUtcmVzdGF1cmFudC1hcHBcIiBjbGFzcz1cImhpZGRlbiBmYXZvcml0ZS1yZXN0YXVyYW50LWFwcFwiIGRhdGEtaWQ9XCJmYXZvcml0ZVwiPjwvZGl2PlxyXG4gICAgXHJcbiAgICA8ZGl2IGlzPVwiYmFzaWMtbW9kYWxcIiBjbGFzcz1cIm1vZGFsIGJhc2ljLW1vZGFsIFwiIGNsYXNzLWNvbnRhaW5lcj1cIm5ldy1yZXN0YXVyYW50LW1vZGFsX19jb250YWluZXJcIiA+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1pdGVtIG5ldy1yZXN0YXVyYW50LW1vZGFsLWl0ZW1cIj4gIFxyXG4gICAgICAgIDxoMiBjbGFzcz1cIm1vZGFsLXRpdGxlIHRleHQtdGl0bGVcIj7sg4jroZzsmrQg7J2M7Iud7KCQPC9oMj5cclxuICAgICAgICA8Zm9ybSBpcz1cIm5ldy1yZXN0YXVyYW50LWZvcm1cIiBjbGFzcz1cIm5ldy1yZXN0YXVyYW50LWZvcm1cIj48L2Zvcm0+IFxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWl0ZW0gZGV0YWlsLW1vZGFsLWl0ZW1cIj4gIFxyXG4gICAgICAgIDxsaSBpcz1cInJlc3RhdXJhbnQtaXRlbS1kZXRhaWxcIiBjbGFzcz1cInJlc3RhdXJhbnQtaXRlbS1kZXRhaWxcIiBzdHlsZT1cIlwiPjwvbGk+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcblxyXG4gICAgYDtcbiAgICAgICAgdGhpcy4kbmF2VGFiID0gZG9tLmdldEVsZW1lbnQodGhpcywgJ2Rpdltpcz1cIm15LXRhYlwiXScpO1xuICAgICAgICB0aGlzLiRtb2RhbCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcuYmFzaWMtbW9kYWwnKTtcbiAgICAgICAgdGhpcy4kYWxsUmVzdGF1cmFudEFwcCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcuYWxsLXJlc3RhdXJhbnQtYXBwJyk7XG4gICAgICAgIHRoaXMuJGZhdm9yaXRlUmVzdGF1cmFudEFwcCA9IGRvbS5nZXRFbGVtZW50KHRoaXMsICcuZmF2b3JpdGUtcmVzdGF1cmFudC1hcHAnKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy4kbmF2VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIGNvbnN0ICRmb3JtID0gZG9tLmdldEVsZW1lbnQodGhpcy4kbW9kYWwsICcubmV3LXJlc3RhdXJhbnQtZm9ybScpO1xuICAgICAgICAkZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYWluQXBwX2luc3RhbmNlcywgXCJtXCIsIF9NYWluQXBwX29uU3VibWl0Rm9ybSkuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuJG5ld1Jlc3RhdXJhbnRNb2RhbEl0ZW0gPSBkb20uZ2V0RWxlbWVudCh0aGlzLiRtb2RhbCwgJy5uZXctcmVzdGF1cmFudC1tb2RhbC1pdGVtJyk7XG4gICAgICAgIHRoaXMuJGRldGFpbFJlc3RhdXJhbnRNb2RhbEl0ZW0gPSBkb20uZ2V0RWxlbWVudCh0aGlzLiRtb2RhbCwgJy5kZXRhaWwtbW9kYWwtaXRlbScpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLiRhbGxSZXN0YXVyYW50QXBwID09PVxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKGAubWFpbi1hcHAtbmV3ID4gZGl2W2RhdGEtaWQ9XCIke3RoaXMuJG5hdlRhYi5nZXRTZWxlY3RlZCgpLmRhdGFzZXQuaWR9XCJdYCkpIHtcbiAgICAgICAgICAgIHRoaXMuJGZhdm9yaXRlUmVzdGF1cmFudEFwcC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuJGFsbFJlc3RhdXJhbnRBcHAuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLiRhbGxSZXN0YXVyYW50QXBwLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kYWxsUmVzdGF1cmFudEFwcC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuJGZhdm9yaXRlUmVzdGF1cmFudEFwcC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuJGZhdm9yaXRlUmVzdGF1cmFudEFwcC5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJOZXdSZXN0YXVyYW50TW9kYWwoKSB7XG4gICAgICAgIHRoaXMuJGRldGFpbFJlc3RhdXJhbnRNb2RhbEl0ZW0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIHRoaXMuJG5ld1Jlc3RhdXJhbnRNb2RhbEl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHRoaXMuJG1vZGFsLm9wZW5Nb2RhbCgpO1xuICAgIH1cbiAgICBwYWludERldGFpbE1vZGFsKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgdGhpcy4kbmV3UmVzdGF1cmFudE1vZGFsSXRlbS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy4kZGV0YWlsUmVzdGF1cmFudE1vZGFsSXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy4kbW9kYWwub3Blbk1vZGFsKCk7XG4gICAgICAgIHRoaXMuJGRldGFpbFJlc3RhdXJhbnRNb2RhbEl0ZW0ucmVwbGFjZUNoaWxkcmVuKG5ldyBSZXN0YXVyYW50SXRlbURldGFpbChyZXN0YXVyYW50KSk7XG4gICAgfVxufVxuX01haW5BcHBfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX01haW5BcHBfb25TdWJtaXRGb3JtID0gZnVuY3Rpb24gX01haW5BcHBfb25TdWJtaXRGb3JtKGUpIHtcbiAgICBjb25zdCAkZm9ybSA9IGRvbS5nZXRFbGVtZW50KHRoaXMuJG1vZGFsLCAnLm5ldy1yZXN0YXVyYW50LWZvcm0nKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgJGZvcm0uaW52aXNpYmxlRXJyb3JNZXNzYWdlKCk7XG4gICAgY29uc3QgeyBuYW1lLCBkaXN0YW5jZSwgY2F0ZWdvcnksIGRlc2NyaXB0aW9uLCBsaW5rIH0gPSAkZm9ybS5nZXRWYWx1ZXMoKTtcbiAgICBpZiAoJGZvcm0udmFsaWRhdGVSZXF1aXJlZFZhbHVlcyhjYXRlZ29yeSwgZGlzdGFuY2UsIG5hbWUpKVxuICAgICAgICByZXR1cm47XG4gICAgbmV3IFJlc3RhdXJhbnREQlNlcnZpY2UoKS5hZGQoeyBuYW1lLCBkaXN0YW5jZSwgY2F0ZWdvcnksIGRlc2NyaXB0aW9uLCBsaW5rIH0pO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgJGZvcm0uaW52aXNpYmxlRXJyb3JNZXNzYWdlKCk7XG4gICAgdGhpcy4kbW9kYWwuY2xvc2VNb2RhbCgpO1xufTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbWFpbi1hcHAnLCBNYWluQXBwLCB7IGV4dGVuZHM6ICdkaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgTWFpbkFwcDtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImxvY2FscyIsImkiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0ZXN0IiwicmVwbGFjZSIsInAiLCJuYyIsImRvbSIsImdldEVsZW1lbnQiLCJzZWxlY3RvciIsImdldEVsZW1lbnRBbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSFRNTERpdkVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwicm9sZSIsImNvbm5lY3RlZENhbGxiYWNrIiwicmVuZGVyIiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJvZHkiLCJyZW5kZXJOZXdSZXN0YXVyYW50TW9kYWwiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImV4dGVuZHMiLCJDT05ESVRJT05TIiwiZnJlZXplIiwiRElTVEFOQ0VTIiwiU09SVF9DUklURVJJT04iLCJDQVRFR09SSUVTIiwiQ0FURUdPUklFU19XSVRIX0FMTCIsImFzc2lnbiIsIkNBVEVHT1JJRVNfV0lUSF9BTExfS0VZUyIsImtleXMiLCJDQVRFR09SSUVTX0tFWVMiLCJTT1JUX0NSSVRFUklPTl9LRVlTIiwiX1NlbGVjdEJveF9pbnN0YW5jZXMiLCJfU2VsZWN0Qm94X3RleHRzIiwiX1NlbGVjdEJveF9uYW1lIiwiX1NlbGVjdEJveF9tYWtlT3B0aW9uVGFncyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyZWNlaXZlciIsInN0YXRlIiwidmFsdWUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJIVE1MU2VsZWN0RWxlbWVudCIsInZhbHVlcyIsInRleHRzIiwibmFtZSIsInNlbGVjdGVkSW5kZXgiLCJXZWFrTWFwIiwiV2Vha1NldCIsIm9wdGlvblRhZyIsIk9wdGlvbiIsIl9GaWx0ZXJDb250YWluZXJfc2VsZWN0Q2F0ZWdvcnlCb3giLCJfRmlsdGVyQ29udGFpbmVyX3NlbGVjdFNvcnRCb3giLCJhcHBlbmQiLCJjYXRlZ29yeSIsInNvcnRDcml0ZXJpYSIsInNldEV2ZW50IiwicGFyZW50RWxlbWVudCIsIl9CYXNpY01vZGFsX2luc3RhbmNlcyIsIl9CYXNpY01vZGFsX2JhY2tkcm9wIiwiX0Jhc2ljTW9kYWxfbW9kYWxDb250YWluZXIiLCJfQmFzaWNNb2RhbF9tYWtlQmFja2Ryb3AiLCJfQmFzaWNNb2RhbF9tYWtlTW9kYWxDb250YWluZXIiLCJjaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsImFwcGVuZEFsbCIsIl9hIiwiZm9yRWFjaCIsImNoaWxkIiwicmVtb3ZlQWxsIiwicmVwbGFjZUNoaWxkcmVuIiwicmVwbGFjZUNoaWxkTm9kZXMiLCJjbG9zZU1vZGFsIiwib3Blbk1vZGFsIiwiYmFja2Ryb3AiLCJiaW5kIiwibW9kYWxDb250YWluZXIiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc05hbWUiLCJfQmFzaWNCdXR0b25faXNQcmltYXJ5IiwiQmFzaWNCdXR0b24iLCJIVE1MQnV0dG9uRWxlbWVudCIsInN0eWxlVmFyaWFudCIsImlubmVyVGV4dCIsInR5cGUiLCJjbGlja0V2ZW50IiwiY2xhc3NOYW1lcyIsImJ1dHRvblN0eWxlQ2xhc3MiLCJidXR0b25QcmltYXJ5IiwiYnV0dG9uU2Vjb25kYXJ5IiwiYnV0dG9uIiwiX0Zhdm9yaXRlSWNvbl9pbnN0YW5jZXMiLCJfRmF2b3JpdGVJY29uX3NldEV2ZW50IiwiRmF2b3JpdGVJY29uIiwiSFRNTEltYWdlRWxlbWVudCIsImFsdCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJpc0Zhdm9yaXRlIiwib24iLCJvZmYiLCJpc09uIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiX0lucHV0Qm94X2luc3RhbmNlcyIsIl9JbnB1dEJveF90ZW1wbGF0ZSIsInByb3BzIiwiaWROYW1lIiwiaGFzVmVyaWZpY2F0aW9uIiwiaXNSZXF1aXJlZCIsImhlbHBUZXh0IiwiJGxhYmVsIiwiJGlucHV0IiwiJGhlbHAiLCIkZXJyb3IiLCJzZXRTdGF0ZSIsInByaW50IiwicmVwbGFjZVdpdGgiLCJodG1sRm9yIiwidmlzaWJsZUVycm9yIiwiaW52aXNpYmxlRXJyb3IiLCJPbk9mZkJ1dHRvbiIsIl9OYXZUYWJfY2hpbGRyZW4iLCJfTmF2VGFiX3NlbGVjdGVkIiwiRUxFTUVOVF9OQU1FIiwiZXZlbnQiLCJjb250YWlucyIsImdldFNlbGVjdGVkIiwiSWNvbnMiLCJSZXN0YXVyYW50Q2F0ZWdvcnlJY29uIiwiJGltYWdlIiwicmVzdGF1cmFudF9fY2F0ZWdvcnkiLCJzZXRDYXRlZ29yeSIsIl9SZXN0YXVyYW50X2luc3RhbmNlcyIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsInJlc3RhdXJhbnRBcmdzIiwiZGlzdGFuY2UiLCJsaW5rIiwiaXNFcXVhbCIsImFub3RoZXIiLCJSZXN0YXVyYW50Q29sbGVjdGlvbiIsInJlc3RhdXJhbnRzIiwicmVzdGF1cmFudCIsImZpbHRlckJ5Q2F0ZWdvcnkiLCJmaWx0ZXIiLCJzb3J0Iiwic29ydEJ5TmFtZSIsInNvcnRCeURpc3RhbmNlIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJuZXdSZXN0YXVyYW50Iiwic29tZSIsIl9SZXN0YXVyYW50REJTZXJ2aWNlX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50REJTZXJ2aWNlX1JFU1RBVVJBTlRTX0RCX0tFWSIsIl9SZXN0YXVyYW50REJTZXJ2aWNlX3Jlc3RhdXJhbnRDb2xsZWN0aW9uIiwiX1Jlc3RhdXJhbnREQlNlcnZpY2VfdXBkYXRlIiwiZ2V0QWZ0ZXJGaWx0ZXJpbmciLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiaXNFbXB0eSIsIl9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMiLCJfUmVzdGF1cmFudEl0ZW1fY2F0ZWdvcnkiLCJfUmVzdGF1cmFudEl0ZW1fZGlzdGFuY2UiLCJfUmVzdGF1cmFudEl0ZW1fZGVzY3JpcHRpb24iLCJfUmVzdGF1cmFudEl0ZW1fbmFtZSIsIl9SZXN0YXVyYW50SXRlbV9saW5rIiwiX1Jlc3RhdXJhbnRJdGVtX2lzRmF2b3JpdGUiLCJfUmVzdGF1cmFudEl0ZW1fdGVtcGxhdGUiLCJfUmVzdGF1cmFudEl0ZW1fcmVuZGVyIiwiX1Jlc3RhdXJhbnRJdGVtX3NldEV2ZW50IiwiX1Jlc3RhdXJhbnRJdGVtX3Nob3dEZXRhaWxMaXN0ZW5lciIsIl9SZXN0YXVyYW50SXRlbV9vbkNsaWNrRmF2b3JpdGVCdXR0b24iLCJfUmVzdGF1cmFudEl0ZW1fb25DbGlja0Zhdm9yaXRlSWNvbiIsIlJlc3RhdXJhbnRJdGVtIiwiSFRNTExJRWxlbWVudCIsInJlc3RhdXJhbnRfX2luZm8iLCJyZXN0YXVyYW50X19uYW1lIiwicmVzdGF1cmFudF9fZGlzdGFuY2UiLCJyZXN0YXVyYW50X19kZXNjcmlwdGlvbiIsInRleHRDb250ZW50IiwiSFRNTEVsZW1lbnQiLCJwYWludERldGFpbE1vZGFsIiwiX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzIiwiSFRNTFVMaXN0RWxlbWVudCIsInBhaW50IiwicmVzdGF1cmFudExpc3QiLCJfUmVzdGF1cmFudEl0ZW1EZXRhaWxfaW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX2NhdGVnb3J5IiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX25hbWUiLCJfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGlzdGFuY2UiLCJfUmVzdGF1cmFudEl0ZW1EZXRhaWxfZGVzY3JpcHRpb24iLCJfUmVzdGF1cmFudEl0ZW1EZXRhaWxfbGluayIsIl9SZXN0YXVyYW50SXRlbURldGFpbF9pc0Zhdm9yaXRlIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX3RlbXBsYXRlIiwiX1Jlc3RhdXJhbnRJdGVtRGV0YWlsX3JlbmRlciIsIl9SZXN0YXVyYW50SXRlbURldGFpbF9mYXZvcml0ZUljb25EQkxpc3RlbmVyIiwiUmVzdGF1cmFudEl0ZW1EZXRhaWwiLCJyZXN0YXVyYW50Q29udGVudCIsInJlc3RhdXJhbnRfX2xpbmsiLCJyZXN0YXVyYW50X19idXR0b25Db250YWluZXIiLCIkYnV0dG9uQm94IiwibmV3UmVzdGF1cmFudHMiLCJfTmV3UmVzdGF1cmFudEZvcm1faW5zdGFuY2VzIiwiX05ld1Jlc3RhdXJhbnRGb3JtX3RlbXBsYXRlIiwiX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlckNhdGVnb3J5SW5wdXQiLCJfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyTmFtZUlucHV0IiwiX05ld1Jlc3RhdXJhbnRGb3JtX3JlbmRlclNlbGVjdEJveCIsIl9OZXdSZXN0YXVyYW50Rm9ybV9yZW5kZXJMaW5rSW5wdXRCb3giLCJfTmV3UmVzdGF1cmFudEZvcm1fcmVuZGVyQnV0dG9uQm94IiwiTmV3UmVzdGF1cmFudEZvcm0iLCJIVE1MRm9ybUVsZW1lbnQiLCIkY2F0ZWdvcnlTZWxlY3QiLCIkbmFtZUlucHV0Qm94IiwiJGRpc3RhbmNlU2VsZWN0IiwiaW52aXNpYmxlRXJyb3JNZXNzYWdlIiwidmFsaWRhdGVSZXF1aXJlZFZhbHVlcyIsImlzTm90VmFsaWRDYXRlZ29yeSIsImlzTm90VmFsaWREaXN0YW5jZSIsIk51bWJlciIsImlzTmFOIiwiaXNOb3RWYWxpZE5hbWUiLCJnZXRWYWx1ZXMiLCJlbGVtZW50cyIsIm5hbWVkSXRlbSIsIkRJU1RBTkNFU19SRVFVSVJFRCIsIm51bSIsIkRJU1RBTkNFU19URVhUUyIsIlN0cmluZyIsIl9BbGxSZXN0YXVyYW50QXBwX2luc3RhbmNlcyIsIl9BbGxSZXN0YXVyYW50QXBwX2ZpbHRlckNvbnRhaW5lciIsIl9BbGxSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnRMaXN0IiwiX0FsbFJlc3RhdXJhbnRBcHBfcmVzdGF1cmFudERCU2VydmljZSIsIl9BbGxSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0IiwiX0FsbFJlc3RhdXJhbnRBcHBfc2V0TW9jayIsIl9BbGxSZXN0YXVyYW50QXBwX2dldERCIiwiX0FsbFJlc3RhdXJhbnRBcHBfb25DaGFuZ2VGaWx0ZXJDb250YWluZXIiLCJBbGxSZXN0YXVyYW50QXBwIiwiX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9pbnN0YW5jZXMiLCJfRmF2b3JpdGVSZXN0YXVyYW50QXBwX3Jlc3RhdXJhbnREQlNlcnZpY2UiLCJfRmF2b3JpdGVSZXN0YXVyYW50QXBwX2dldE5ld1Jlc3RhdXJhbnRMaXN0IiwiX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9zZXRNb2NrIiwiX0Zhdm9yaXRlUmVzdGF1cmFudEFwcF9nZXREQiIsIl9GYXZvcml0ZVJlc3RhdXJhbnRBcHBfb25DaGFuZ2VGaWx0ZXJDb250YWluZXIiLCJGYXZvcml0ZVJlc3RhdXJhbnRBcHAiLCIkZmlsdGVyQ29udGFpbmVyIiwiJHJlc3RhdXJhbnRMaXN0IiwiX01haW5BcHBfaW5zdGFuY2VzIiwiX01haW5BcHBfb25TdWJtaXRGb3JtIiwiJG5hdlRhYiIsIiRtb2RhbCIsIiRhbGxSZXN0YXVyYW50QXBwIiwiJGZhdm9yaXRlUmVzdGF1cmFudEFwcCIsIiRuZXdSZXN0YXVyYW50TW9kYWxJdGVtIiwiJGRldGFpbFJlc3RhdXJhbnRNb2RhbEl0ZW0iLCJkYXRhc2V0IiwiJGZvcm0iLCJwcmV2ZW50RGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=